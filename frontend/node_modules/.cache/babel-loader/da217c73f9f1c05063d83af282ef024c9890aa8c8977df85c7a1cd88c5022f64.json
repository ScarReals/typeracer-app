{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.edwards = edwards;\nexports.eddsa = eddsa;\nexports.twistedEdwards = twistedEdwards;\n/**\n * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n * For design rationale of types / exports, see weierstrass module documentation.\n * Untwisted Edwards curves exist, but they aren't used in real-world protocols.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst utils_ts_1 = require(\"../utils.js\");\nconst curve_ts_1 = require(\"./curve.js\");\nconst modular_ts_1 = require(\"./modular.js\");\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = {\n  zip215: true\n};\nfunction isEdValidXY(Fp, CURVE, x, y) {\n  const x2 = Fp.sqr(x);\n  const y2 = Fp.sqr(y);\n  const left = Fp.add(Fp.mul(CURVE.a, x2), y2);\n  const right = Fp.add(Fp.ONE, Fp.mul(CURVE.d, Fp.mul(x2, y2)));\n  return Fp.eql(left, right);\n}\nfunction edwards(CURVE, curveOpts = {}) {\n  const {\n    Fp,\n    Fn\n  } = (0, curve_ts_1._createCurveFields)('edwards', CURVE, curveOpts);\n  const {\n    h: cofactor,\n    n: CURVE_ORDER\n  } = CURVE;\n  (0, utils_ts_1._validateObject)(curveOpts, {}, {\n    uvRatio: 'function'\n  });\n  // Important:\n  // There are some places where Fp.BYTES is used instead of nByteLength.\n  // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n  // TODO: test and find curves which behave otherwise.\n  const MASK = _2n << BigInt(Fn.BYTES * 8) - _1n;\n  const modP = n => Fp.create(n); // Function overrides\n  // sqrt(u/v)\n  const uvRatio = curveOpts.uvRatio || ((u, v) => {\n    try {\n      return {\n        isValid: true,\n        value: Fp.sqrt(Fp.div(u, v))\n      };\n    } catch (e) {\n      return {\n        isValid: false,\n        value: _0n\n      };\n    }\n  });\n  // Validate whether the passed curve params are valid.\n  // equation ax² + y² = 1 + dx²y² should work for generator point.\n  if (!isEdValidXY(Fp, CURVE, CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n  /**\n   * Asserts coordinate is valid: 0 <= n < MASK.\n   * Coordinates >= Fp.ORDER are allowed for zip215.\n   */\n  function acoord(title, n, banZero = false) {\n    const min = banZero ? _1n : _0n;\n    (0, utils_ts_1.aInRange)('coordinate ' + title, n, min, MASK);\n    return n;\n  }\n  function aextpoint(other) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Converts Extended point to default (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  const toAffineMemo = (0, utils_ts_1.memoized)((p, iz) => {\n    const {\n      ex: x,\n      ey: y,\n      ez: z\n    } = p;\n    const is0 = p.is0();\n    if (iz == null) iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n    const ax = modP(x * iz);\n    const ay = modP(y * iz);\n    const zz = modP(z * iz);\n    if (is0) return {\n      x: _0n,\n      y: _1n\n    };\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return {\n      x: ax,\n      y: ay\n    };\n  });\n  const assertValidMemo = (0, utils_ts_1.memoized)(p => {\n    const {\n      a,\n      d\n    } = CURVE;\n    if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n    // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n    // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n    const {\n      ex: X,\n      ey: Y,\n      ez: Z,\n      et: T\n    } = p;\n    const X2 = modP(X * X); // X²\n    const Y2 = modP(Y * Y); // Y²\n    const Z2 = modP(Z * Z); // Z²\n    const Z4 = modP(Z2 * Z2); // Z⁴\n    const aX2 = modP(X2 * a); // aX²\n    const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n    const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n    if (left !== right) throw new Error('bad point: equation left != right (1)');\n    // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n    const XY = modP(X * Y);\n    const ZT = modP(Z * T);\n    if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    return true;\n  });\n  // Extended Point works in extended coordinates: (X, Y, Z, T) ∋ (x=X/Z, y=Y/Z, T=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point {\n    constructor(ex, ey, ez, et) {\n      this.ex = acoord('x', ex);\n      this.ey = acoord('y', ey);\n      this.ez = acoord('z', ez, true);\n      this.et = acoord('t', et);\n      Object.freeze(this);\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    static fromAffine(p) {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const {\n        x,\n        y\n      } = p || {};\n      acoord('x', x);\n      acoord('y', y);\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points) {\n      return (0, curve_ts_1.normalizeZ)(Point, 'ez', points);\n    }\n    // Multiscalar Multiplication\n    static msm(points, scalars) {\n      return (0, curve_ts_1.pippenger)(Point, Fn, points, scalars);\n    }\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize) {\n      this.precompute(windowSize);\n    }\n    precompute(windowSize = 8, isLazy = true) {\n      wnaf.setWindowSize(this, windowSize);\n      if (!isLazy) this.multiply(_2n); // random number\n      return this;\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity() {\n      assertValidMemo(this);\n    }\n    // Compare one point to another.\n    equals(other) {\n      aextpoint(other);\n      const {\n        ex: X1,\n        ey: Y1,\n        ez: Z1\n      } = this;\n      const {\n        ex: X2,\n        ey: Y2,\n        ez: Z2\n      } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    negate() {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double() {\n      const {\n        a\n      } = CURVE;\n      const {\n        ex: X1,\n        ey: Y1,\n        ez: Z1\n      } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other) {\n      aextpoint(other);\n      const {\n        a,\n        d\n      } = CURVE;\n      const {\n        ex: X1,\n        ey: Y1,\n        ez: Z1,\n        et: T1\n      } = this;\n      const {\n        ex: X2,\n        ey: Y2,\n        ez: Z2,\n        et: T2\n      } = other;\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n      return this.add(other.negate());\n    }\n    // Constant-time multiplication.\n    multiply(scalar) {\n      const n = scalar;\n      (0, utils_ts_1.aInRange)('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n      const {\n        p,\n        f\n      } = wnaf.wNAFCached(this, n, Point.normalizeZ);\n      return Point.normalizeZ([p, f])[0];\n    }\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n    multiplyUnsafe(scalar, acc = Point.ZERO) {\n      const n = scalar;\n      (0, utils_ts_1.aInRange)('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n      if (n === _0n) return Point.ZERO;\n      if (this.is0() || n === _1n) return this;\n      return wnaf.wNAFCachedUnsafe(this, n, Point.normalizeZ, acc);\n    }\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder() {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree() {\n      return wnaf.wNAFCachedUnsafe(this, CURVE_ORDER).is0();\n    }\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(invertedZ) {\n      return toAffineMemo(this, invertedZ);\n    }\n    clearCofactor() {\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n    static fromBytes(bytes, zip215 = false) {\n      (0, utils_ts_1.abytes)(bytes);\n      return this.fromHex(bytes, zip215);\n    }\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex, zip215 = false) {\n      const {\n        d,\n        a\n      } = CURVE;\n      const len = Fp.BYTES;\n      hex = (0, utils_ts_1.ensureBytes)('pointHex', hex, len); // copy hex to a new array\n      (0, utils_ts_1.abool)('zip215', zip215);\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = (0, utils_ts_1.bytesToNumberLE)(normed);\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // RFC8032 prohibits >= p, but ZIP215 doesn't\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      const max = zip215 ? MASK : Fp.ORDER;\n      (0, utils_ts_1.aInRange)('pointHex.y', y, _0n, max);\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let {\n        isValid,\n        value: x\n      } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({\n        x,\n        y\n      });\n    }\n    static fromPrivateScalar(scalar) {\n      return Point.BASE.multiply(scalar);\n    }\n    toBytes() {\n      const {\n        x,\n        y\n      } = this.toAffine();\n      const bytes = (0, utils_ts_1.numberToBytesLE)(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    /** @deprecated use `toBytes` */\n    toRawBytes() {\n      return this.toBytes();\n    }\n    toHex() {\n      return (0, utils_ts_1.bytesToHex)(this.toBytes());\n    }\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n  }\n  // base / generator point\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n  // zero / infinity / identity point\n  Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n  // fields\n  Point.Fp = Fp;\n  Point.Fn = Fn;\n  const wnaf = (0, curve_ts_1.wNAF)(Point, Fn.BYTES * 8); // Fn.BITS?\n  return Point;\n}\n/**\n * Initializes EdDSA signatures over given Edwards curve.\n */\nfunction eddsa(Point, eddsaOpts) {\n  (0, utils_ts_1._validateObject)(eddsaOpts, {\n    hash: 'function'\n  }, {\n    adjustScalarBytes: 'function',\n    randomBytes: 'function',\n    domain: 'function',\n    prehash: 'function',\n    mapToCurve: 'function'\n  });\n  const {\n    prehash,\n    hash: cHash\n  } = eddsaOpts;\n  const {\n    BASE: G,\n    Fp,\n    Fn\n  } = Point;\n  const CURVE_ORDER = Fn.ORDER;\n  const randomBytes_ = eddsaOpts.randomBytes || utils_ts_1.randomBytes;\n  const adjustScalarBytes = eddsaOpts.adjustScalarBytes || (bytes => bytes); // NOOP\n  const domain = eddsaOpts.domain || ((data, ctx, phflag) => {\n    (0, utils_ts_1.abool)('phflag', phflag);\n    if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n    return data;\n  }); // NOOP\n  function modN(a) {\n    return Fn.create(a);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash) {\n    // Not using Fn.fromBytes: hash can be 2*Fn.BYTES\n    return modN((0, utils_ts_1.bytesToNumberLE)(hash));\n  }\n  // Get the hashed private scalar per RFC8032 5.1.5\n  function getPrivateScalar(key) {\n    const len = Fp.BYTES;\n    key = (0, utils_ts_1.ensureBytes)('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = (0, utils_ts_1.ensureBytes)('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    return {\n      head,\n      prefix,\n      scalar\n    };\n  }\n  // Convenience method that creates public key from scalar. RFC8032 5.1.5\n  function getExtendedPublicKey(key) {\n    const {\n      head,\n      prefix,\n      scalar\n    } = getPrivateScalar(key);\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toBytes();\n    return {\n      head,\n      prefix,\n      scalar,\n      point,\n      pointBytes\n    };\n  }\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey) {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context = Uint8Array.of(), ...msgs) {\n    const msg = (0, utils_ts_1.concatBytes)(...msgs);\n    return modN_LE(cHash(domain(msg, (0, utils_ts_1.ensureBytes)('context', context), !!prehash)));\n  }\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg, privKey, options = {}) {\n    msg = (0, utils_ts_1.ensureBytes)('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const {\n      prefix,\n      scalar,\n      pointBytes\n    } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    (0, utils_ts_1.aInRange)('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n    const L = Fp.BYTES;\n    const res = (0, utils_ts_1.concatBytes)(R, (0, utils_ts_1.numberToBytesLE)(s, L));\n    return (0, utils_ts_1.ensureBytes)('result', res, L * 2); // 64-byte signature\n  }\n  const verifyOpts = VERIFY_DEFAULT;\n  /**\n   * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n   * An extended group equation is checked.\n   */\n  function verify(sig, msg, publicKey, options = verifyOpts) {\n    const {\n      context,\n      zip215\n    } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = (0, utils_ts_1.ensureBytes)('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = (0, utils_ts_1.ensureBytes)('message', msg);\n    publicKey = (0, utils_ts_1.ensureBytes)('publicKey', publicKey, len);\n    if (zip215 !== undefined) (0, utils_ts_1.abool)('zip215', zip215);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n    const s = (0, utils_ts_1.bytesToNumberLE)(sig.slice(len, 2 * len));\n    let A, R, SB;\n    try {\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n    const k = hashDomainToScalar(context, R.toBytes(), A.toBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // Extended group equation\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().is0();\n  }\n  G.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n  const utils = {\n    getExtendedPublicKey,\n    /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */\n    randomPrivateKey: () => randomBytes_(Fp.BYTES),\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE) {\n      return point.precompute(windowSize, false);\n    }\n  };\n  return {\n    getPublicKey,\n    sign,\n    verify,\n    utils,\n    Point\n  };\n}\nfunction _eddsa_legacy_opts_to_new(c) {\n  const CURVE = {\n    a: c.a,\n    d: c.d,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy\n  };\n  const Fp = c.Fp;\n  const Fn = (0, modular_ts_1.Field)(CURVE.n, c.nBitLength, true);\n  const curveOpts = {\n    Fp,\n    Fn,\n    uvRatio: c.uvRatio\n  };\n  const eddsaOpts = {\n    hash: c.hash,\n    randomBytes: c.randomBytes,\n    adjustScalarBytes: c.adjustScalarBytes,\n    domain: c.domain,\n    prehash: c.prehash,\n    mapToCurve: c.mapToCurve\n  };\n  return {\n    CURVE,\n    curveOpts,\n    eddsaOpts\n  };\n}\nfunction _eddsa_new_output_to_legacy(c, eddsa) {\n  const legacy = Object.assign({}, eddsa, {\n    ExtendedPoint: eddsa.Point,\n    CURVE: c\n  });\n  return legacy;\n}\n// TODO: remove. Use eddsa\nfunction twistedEdwards(c) {\n  const {\n    CURVE,\n    curveOpts,\n    eddsaOpts\n  } = _eddsa_legacy_opts_to_new(c);\n  const Point = edwards(CURVE, curveOpts);\n  const EDDSA = eddsa(Point, eddsaOpts);\n  return _eddsa_new_output_to_legacy(c, EDDSA);\n}","map":{"version":3,"names":["exports","edwards","eddsa","twistedEdwards","utils_ts_1","require","curve_ts_1","modular_ts_1","_0n","BigInt","_1n","_2n","_8n","VERIFY_DEFAULT","zip215","isEdValidXY","Fp","CURVE","x","y","x2","sqr","y2","left","add","mul","a","right","ONE","d","eql","curveOpts","Fn","_createCurveFields","h","cofactor","n","CURVE_ORDER","_validateObject","uvRatio","MASK","BYTES","modP","create","u","v","isValid","value","sqrt","div","e","Gx","Gy","Error","acoord","title","banZero","min","aInRange","aextpoint","other","Point","toAffineMemo","memoized","p","iz","ex","ey","ez","z","is0","inv","ax","ay","zz","assertValidMemo","X","Y","Z","et","T","X2","Y2","Z2","Z4","aX2","XY","ZT","constructor","Object","freeze","toAffine","fromAffine","normalizeZ","points","msm","scalars","pippenger","_setWindowSize","windowSize","precompute","isLazy","wnaf","setWindowSize","multiply","assertValidity","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","ZERO","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","scalar","f","wNAFCached","multiplyUnsafe","acc","wNAFCachedUnsafe","isSmallOrder","isTorsionFree","invertedZ","clearCofactor","fromBytes","bytes","abytes","fromHex","hex","len","ensureBytes","abool","normed","slice","lastByte","bytesToNumberLE","max","ORDER","isXOdd","isLastByteOdd","fromPrivateScalar","BASE","toBytes","numberToBytesLE","length","toRawBytes","toHex","bytesToHex","toString","wNAF","eddsaOpts","hash","adjustScalarBytes","randomBytes","domain","prehash","mapToCurve","cHash","randomBytes_","data","ctx","phflag","modN","modN_LE","getPrivateScalar","key","hashed","head","prefix","getExtendedPublicKey","point","pointBytes","getPublicKey","privKey","hashDomainToScalar","context","Uint8Array","of","msgs","msg","concatBytes","sign","options","r","R","k","s","L","res","verifyOpts","verify","sig","publicKey","undefined","SB","error","RkA","utils","randomPrivateKey","_eddsa_legacy_opts_to_new","c","Field","nBitLength","_eddsa_new_output_to_legacy","legacy","assign","ExtendedPoint","EDDSA"],"sources":["/home/kokoi/typeracer-app/frontend/node_modules/@noble/curves/src/abstract/edwards.ts"],"sourcesContent":["/**\n * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n * For design rationale of types / exports, see weierstrass module documentation.\n * Untwisted Edwards curves exist, but they aren't used in real-world protocols.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  _validateObject,\n  abool,\n  abytes,\n  aInRange,\n  bytesToHex,\n  bytesToNumberLE,\n  concatBytes,\n  ensureBytes,\n  memoized,\n  numberToBytesLE,\n  randomBytes,\n  type FHash,\n  type Hex,\n} from '../utils.ts';\nimport {\n  _createCurveFields,\n  normalizeZ,\n  pippenger,\n  wNAF,\n  type AffinePoint,\n  type BasicCurve,\n  type Group,\n  type GroupConstructor,\n} from './curve.ts';\nimport { Field, type IField, type NLength } from './modular.ts';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\nexport type UVRatio = (u: bigint, v: bigint) => { isValid: boolean; value: bigint };\n\n/** Edwards curves must declare params a & d. */\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes?: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: UVRatio; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\nexport type CurveTypeWithLength = Readonly<CurveType & Partial<NLength>>;\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\n/** Instance of Extended Point with coordinates in X, Y, Z, T. */\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  is0(): boolean;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toBytes(): Uint8Array;\n  /** @deprecated use `toBytes` */\n  toRawBytes(): Uint8Array;\n  toHex(): string;\n  precompute(windowSize?: number, isLazy?: boolean): ExtPointType;\n  /** @deprecated use `p.precompute(windowSize)` */\n  _setWindowSize(windowSize: number): void;\n}\n/** Static methods of Extended Point with coordinates in X, Y, Z, T. */\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  Fp: IField<bigint>;\n  Fn: IField<bigint>;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromBytes(bytes: Uint8Array, zip215?: boolean): ExtPointType;\n  fromHex(hex: Hex, zip215?: boolean): ExtPointType;\n  msm(points: ExtPointType[], scalars: bigint[]): ExtPointType;\n}\n\n/**\n * Twisted Edwards curve options.\n *\n * * a: formula param\n * * d: formula param\n * * p: prime characteristic (order) of finite field, in which arithmetics is done\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * h: cofactor. h*n is group order; n is subgroup order\n * * Gx: x coordinate of generator point a.k.a. base point\n * * Gy: y coordinate of generator point\n */\nexport type EdwardsOpts = Readonly<{\n  a: bigint;\n  d: bigint;\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  Gx: bigint;\n  Gy: bigint;\n}>;\n\n/**\n * Extra curve options for Twisted Edwards.\n *\n * * Fp: redefined Field over curve.p\n * * Fn: redefined Field over curve.n\n * * uvRatio: helper function for decompression, calculating √(u/v)\n */\nexport type EdwardsExtraOpts = Partial<{\n  Fp: IField<bigint>;\n  Fn: IField<bigint>;\n  uvRatio: (u: bigint, v: bigint) => { isValid: boolean; value: bigint };\n}>;\n\n/**\n * EdDSA (Edwards Digital Signature algorithm) options.\n *\n * * hash: hash function used to hash private keys and messages\n * * adjustScalarBytes: clears bits to get valid field element\n * * domain: Used for hashing\n * * mapToCurve: for hash-to-curve standard\n * * prehash: RFC 8032 pre-hashing of messages to sign() / verify()\n * * randomBytes: function generating random bytes, used for randomPrivateKey\n */\nexport type EdDSAOpts = {\n  hash: FHash;\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array;\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array;\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>;\n  prehash?: FHash;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n};\n\n/**\n * EdDSA (Edwards Digital Signature algorithm) interface.\n *\n * Allows to create and verify signatures, create public and private keys.\n */\nexport interface EdDSA {\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  Point: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n    /** @deprecated use `point.precompute()` */\n    precompute: (windowSize?: number, point?: ExtPointType) => ExtPointType;\n  };\n}\n\n// Legacy params. TODO: remove\nexport type CurveFn = {\n  CURVE: CurveType;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  Point: ExtPointConstructor;\n  /** @deprecated use `Point` */\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n    precompute: (windowSize?: number, point?: ExtPointType) => ExtPointType;\n  };\n};\n\nfunction isEdValidXY(Fp: IField<bigint>, CURVE: EdwardsOpts, x: bigint, y: bigint): boolean {\n  const x2 = Fp.sqr(x);\n  const y2 = Fp.sqr(y);\n  const left = Fp.add(Fp.mul(CURVE.a, x2), y2);\n  const right = Fp.add(Fp.ONE, Fp.mul(CURVE.d, Fp.mul(x2, y2)));\n  return Fp.eql(left, right);\n}\n\nexport function edwards(CURVE: EdwardsOpts, curveOpts: EdwardsExtraOpts = {}): ExtPointConstructor {\n  const { Fp, Fn } = _createCurveFields('edwards', CURVE, curveOpts);\n  const { h: cofactor, n: CURVE_ORDER } = CURVE;\n  _validateObject(curveOpts, {}, { uvRatio: 'function' });\n\n  // Important:\n  // There are some places where Fp.BYTES is used instead of nByteLength.\n  // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n  // TODO: test and find curves which behave otherwise.\n  const MASK = _2n << (BigInt(Fn.BYTES * 8) - _1n);\n  const modP = (n: bigint) => Fp.create(n); // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    curveOpts.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(Fp.div(u, v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n\n  // Validate whether the passed curve params are valid.\n  // equation ax² + y² = 1 + dx²y² should work for generator point.\n  if (!isEdValidXY(Fp, CURVE, CURVE.Gx, CURVE.Gy))\n    throw new Error('bad curve params: generator point');\n\n  /**\n   * Asserts coordinate is valid: 0 <= n < MASK.\n   * Coordinates >= Fp.ORDER are allowed for zip215.\n   */\n  function acoord(title: string, n: bigint, banZero = false) {\n    const min = banZero ? _1n : _0n;\n    aInRange('coordinate ' + title, n, min, MASK);\n    return n;\n  }\n\n  function aextpoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Converts Extended point to default (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  const toAffineMemo = memoized((p: Point, iz?: bigint): AffinePoint<bigint> => {\n    const { ex: x, ey: y, ez: z } = p;\n    const is0 = p.is0();\n    if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n    const ax = modP(x * iz);\n    const ay = modP(y * iz);\n    const zz = modP(z * iz);\n    if (is0) return { x: _0n, y: _1n };\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  const assertValidMemo = memoized((p: Point) => {\n    const { a, d } = CURVE;\n    if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n    // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n    // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n    const { ex: X, ey: Y, ez: Z, et: T } = p;\n    const X2 = modP(X * X); // X²\n    const Y2 = modP(Y * Y); // Y²\n    const Z2 = modP(Z * Z); // Z²\n    const Z4 = modP(Z2 * Z2); // Z⁴\n    const aX2 = modP(X2 * a); // aX²\n    const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n    const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n    if (left !== right) throw new Error('bad point: equation left != right (1)');\n    // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n    const XY = modP(X * Y);\n    const ZT = modP(Z * T);\n    if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    return true;\n  });\n\n  // Extended Point works in extended coordinates: (X, Y, Z, T) ∋ (x=X/Z, y=Y/Z, T=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    // base / generator point\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    // zero / infinity / identity point\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    // fields\n    static readonly Fp = Fp;\n    static readonly Fn = Fn;\n\n    readonly ex: bigint;\n    readonly ey: bigint;\n    readonly ez: bigint;\n    readonly et: bigint;\n\n    constructor(ex: bigint, ey: bigint, ez: bigint, et: bigint) {\n      this.ex = acoord('x', ex);\n      this.ey = acoord('y', ey);\n      this.ez = acoord('z', ez, true);\n      this.et = acoord('t', et);\n      Object.freeze(this);\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      acoord('x', x);\n      acoord('y', y);\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      return normalizeZ(Point, 'ez', points);\n    }\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this.precompute(windowSize);\n    }\n    precompute(windowSize: number = 8, isLazy = true) {\n      wnaf.setWindowSize(this, windowSize);\n      if (!isLazy) this.multiply(_2n); // random number\n      return this;\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      aextpoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      aextpoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const n = scalar;\n      aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n      const { p, f } = wnaf.wNAFCached(this, n, Point.normalizeZ);\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n    multiplyUnsafe(scalar: bigint, acc = Point.ZERO): Point {\n      const n = scalar;\n      aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n      if (n === _0n) return Point.ZERO;\n      if (this.is0() || n === _1n) return this;\n      return wnaf.wNAFCachedUnsafe(this, n, Point.normalizeZ, acc);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.wNAFCachedUnsafe(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(invertedZ?: bigint): AffinePoint<bigint> {\n      return toAffineMemo(this, invertedZ);\n    }\n\n    clearCofactor(): Point {\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    static fromBytes(bytes: Uint8Array, zip215 = false): Point {\n      abytes(bytes);\n      return this.fromHex(bytes, zip215);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      abool('zip215', zip215);\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = bytesToNumberLE(normed);\n\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // RFC8032 prohibits >= p, but ZIP215 doesn't\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      const max = zip215 ? MASK : Fp.ORDER;\n      aInRange('pointHex.y', y, _0n, max);\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateScalar(scalar: bigint): Point {\n      return Point.BASE.multiply(scalar);\n    }\n    toBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    /** @deprecated use `toBytes` */\n    toRawBytes(): Uint8Array {\n      return this.toBytes();\n    }\n    toHex(): string {\n      return bytesToHex(this.toBytes());\n    }\n\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n  }\n  const wnaf = wNAF(Point, Fn.BYTES * 8); // Fn.BITS?\n  return Point;\n}\n\n/**\n * Initializes EdDSA signatures over given Edwards curve.\n */\nexport function eddsa(Point: ExtPointConstructor, eddsaOpts: EdDSAOpts): EdDSA {\n  _validateObject(\n    eddsaOpts,\n    {\n      hash: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      randomBytes: 'function',\n      domain: 'function',\n      prehash: 'function',\n      mapToCurve: 'function',\n    }\n  );\n\n  const { prehash, hash: cHash } = eddsaOpts;\n  const { BASE: G, Fp, Fn } = Point;\n  const CURVE_ORDER = Fn.ORDER;\n\n  const randomBytes_ = eddsaOpts.randomBytes || randomBytes;\n  const adjustScalarBytes = eddsaOpts.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    eddsaOpts.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      abool('phflag', phflag);\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n\n  function modN(a: bigint) {\n    return Fn.create(a);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    // Not using Fn.fromBytes: hash can be 2*Fn.BYTES\n    return modN(bytesToNumberLE(hash));\n  }\n\n  // Get the hashed private scalar per RFC8032 5.1.5\n  function getPrivateScalar(key: Hex) {\n    const len = Fp.BYTES;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    return { head, prefix, scalar };\n  }\n\n  // Convenience method that creates public key from scalar. RFC8032 5.1.5\n  function getExtendedPublicKey(key: Hex) {\n    const { head, prefix, scalar } = getPrivateScalar(key);\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toBytes();\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = Uint8Array.of(), ...msgs: Uint8Array[]) {\n    const msg = concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n    const L = Fp.BYTES;\n    const res = concatBytes(R, numberToBytesLE(s, L));\n    return ensureBytes('result', res, L * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n\n  /**\n   * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n   * An extended group equation is checked.\n   */\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    publicKey = ensureBytes('publicKey', publicKey, len);\n    if (zip215 !== undefined) abool('zip215', zip215);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = bytesToNumberLE(sig.slice(len, 2 * len));\n    let A, R, SB;\n    try {\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toBytes(), A.toBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // Extended group equation\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().is0();\n  }\n\n  G.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */\n    randomPrivateKey: (): Uint8Array => randomBytes_!(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point: ExtPointType = Point.BASE): ExtPointType {\n      return point.precompute(windowSize, false);\n    },\n  };\n\n  return { getPublicKey, sign, verify, utils, Point };\n}\n\nexport type EdComposed = {\n  CURVE: EdwardsOpts;\n  curveOpts: EdwardsExtraOpts;\n  eddsaOpts: EdDSAOpts;\n};\nfunction _eddsa_legacy_opts_to_new(c: CurveTypeWithLength): EdComposed {\n  const CURVE: EdwardsOpts = {\n    a: c.a,\n    d: c.d,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy,\n  };\n  const Fp = c.Fp;\n  const Fn = Field(CURVE.n, c.nBitLength, true);\n  const curveOpts: EdwardsExtraOpts = { Fp, Fn, uvRatio: c.uvRatio };\n  const eddsaOpts: EdDSAOpts = {\n    hash: c.hash,\n    randomBytes: c.randomBytes,\n    adjustScalarBytes: c.adjustScalarBytes,\n    domain: c.domain,\n    prehash: c.prehash,\n    mapToCurve: c.mapToCurve,\n  };\n  return { CURVE, curveOpts, eddsaOpts };\n}\nfunction _eddsa_new_output_to_legacy(c: CurveTypeWithLength, eddsa: EdDSA): CurveFn {\n  const legacy = Object.assign({}, eddsa, { ExtendedPoint: eddsa.Point, CURVE: c });\n  return legacy;\n}\n// TODO: remove. Use eddsa\nexport function twistedEdwards(c: CurveTypeWithLength): CurveFn {\n  const { CURVE, curveOpts, eddsaOpts } = _eddsa_legacy_opts_to_new(c);\n  const Point = edwards(CURVE, curveOpts);\n  const EDDSA = eddsa(Point, eddsaOpts);\n  return _eddsa_new_output_to_legacy(c, EDDSA);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}