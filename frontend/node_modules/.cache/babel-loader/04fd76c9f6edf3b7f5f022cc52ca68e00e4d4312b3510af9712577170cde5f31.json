{"ast":null,"code":"// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nfunction getProgram() {\n  const provider = anchor.getProvider();\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Try to look up the real “vault” field on your escrow account.\n * If none of the IDL‐generated fields exist, fall back to the PDA itself.\n */\nasync function fetchEscrowVault(escrowPda) {\n  var _ref, _ref2, _acct$escrowAccount;\n  const program = getProgram();\n  const acct = await program.account.escrow.fetch(escrowPda);\n  console.log(\"⛓️ escrow account data:\", acct);\n\n  // Common IDL field names in older/newer Anchor versions:\n  const vault = (_ref = (_ref2 = (_acct$escrowAccount = acct.escrowAccount) !== null && _acct$escrowAccount !== void 0 ? _acct$escrowAccount :\n  // original name\n  acct.escrowVault) !== null && _ref2 !== void 0 ? _ref2 :\n  // some IDLs use this\n  acct.vault) !== null && _ref !== void 0 ? _ref :\n  // others\n  null;\n  if (vault) {\n    return vault;\n  }\n\n  // If none were present, assume the PDA itself holds the SOL:\n  console.warn(\"No vault field found on escrow account, falling back to escrowPda itself.\");\n  return escrowPda;\n}\nexport async function joinAndDeposit(escrowPda) {\n  const program = getProgram();\n  const vault = await fetchEscrowVault(escrowPda);\n  await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: anchor.getProvider().wallet.publicKey,\n    escrowAccount: vault,\n    systemProgram: SystemProgram.programId\n  }).rpc({\n    skipPreflight: true,\n    preflightCommitment: \"processed\"\n  });\n}\nexport async function cancelEscrow(escrowPda, player1, player2) {\n  const program = getProgram();\n  const vault = await fetchEscrowVault(escrowPda);\n  await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrowAccount: vault,\n    authority: anchor.getProvider().wallet.publicKey\n  }).rpc({\n    skipPreflight: true,\n    preflightCommitment: \"processed\"\n  });\n}\nexport async function resolveEscrow(escrowPda, winner) {\n  const program = getProgram();\n  const vault = await fetchEscrowVault(escrowPda);\n  await program.methods.resolve(winner).accounts({\n    escrow: escrowPda,\n    winner,\n    house: anchor.getProvider().wallet.publicKey,\n    escrowAccount: vault,\n    authority: anchor.getProvider().wallet.publicKey\n  }).rpc({\n    skipPreflight: true,\n    preflightCommitment: \"processed\"\n  });\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","metadata","address","getProgram","provider","getProvider","Program","fetchEscrowVault","escrowPda","_ref","_ref2","_acct$escrowAccount","program","acct","account","escrow","fetch","console","log","vault","escrowAccount","escrowVault","warn","joinAndDeposit","methods","accounts","player2","wallet","publicKey","systemProgram","programId","rpc","skipPreflight","preflightCommitment","cancelEscrow","player1","cancel","authority","resolveEscrow","winner","resolve","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\nfunction getProgram() {\n  const provider = anchor.getProvider();\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Try to look up the real “vault” field on your escrow account.\n * If none of the IDL‐generated fields exist, fall back to the PDA itself.\n */\nasync function fetchEscrowVault(escrowPda) {\n  const program = getProgram();\n  const acct = await program.account.escrow.fetch(escrowPda);\n  console.log(\"⛓️ escrow account data:\", acct);\n\n  // Common IDL field names in older/newer Anchor versions:\n  const vault =\n    acct.escrowAccount ?? // original name\n    acct.escrowVault   ?? // some IDLs use this\n    acct.vault         ?? // others\n    null;\n\n  if (vault) {\n    return vault;\n  }\n\n  // If none were present, assume the PDA itself holds the SOL:\n  console.warn(\n    \"No vault field found on escrow account, falling back to escrowPda itself.\"\n  );\n  return escrowPda;\n}\n\nexport async function joinAndDeposit(escrowPda) {\n  const program = getProgram();\n  const vault = await fetchEscrowVault(escrowPda);\n\n  await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: anchor.getProvider().wallet.publicKey,\n      escrowAccount: vault,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc({ skipPreflight: true, preflightCommitment: \"processed\" });\n}\n\nexport async function cancelEscrow(escrowPda, player1, player2) {\n  const program = getProgram();\n  const vault = await fetchEscrowVault(escrowPda);\n\n  await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: vault,\n      authority: anchor.getProvider().wallet.publicKey,\n    })\n    .rpc({ skipPreflight: true, preflightCommitment: \"processed\" });\n}\n\nexport async function resolveEscrow(escrowPda, winner) {\n  const program = getProgram();\n  const vault = await fetchEscrowVault(escrowPda);\n\n  await program.methods\n    .resolve(winner)\n    .accounts({\n      escrow: escrowPda,\n      winner,\n      house: anchor.getProvider().wallet.publicKey,\n      escrowAccount: vault,\n      authority: anchor.getProvider().wallet.publicKey,\n    })\n    .rpc({ skipPreflight: true, preflightCommitment: \"processed\" });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}