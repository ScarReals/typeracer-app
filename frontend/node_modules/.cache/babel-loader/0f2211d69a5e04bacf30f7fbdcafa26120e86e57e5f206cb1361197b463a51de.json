{"ast":null,"code":"// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** …getProgram() as before… */\n\n/**\n * 1) Initialize + deposit via your Anchor program\n */\nexport async function buildInitializeAndDepositIxns(lamports, initializerPubkey, nonce) {\n  const program = getProgram();\n\n  // derive PDA exactly as in Rust\n  const nonceBuf = Buffer.from(new anchor.BN(nonce).toArray(\"le\", 8));\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), initializerPubkey.toBuffer(), nonceBuf], PROGRAM_ID);\n\n  // 1️⃣ initialize()\n  const ixInit = await program.methods.initialize(new anchor.BN(lamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: initializerPubkey,\n    authority: initializerPubkey,\n    system_program: SystemProgram.programId\n  }).instruction();\n\n  // 2️⃣ deposit()  ← **this is the crucial bit**\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: initializerPubkey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","getProvider","buildInitializeAndDepositIxns","lamports","initializerPubkey","nonce","program","getProgram","nonceBuf","Buffer","from","BN","toArray","escrowPda","findProgramAddress","toBuffer","ixInit","methods","initialize","accounts","escrow","player1","authority","system_program","programId","instruction","ixDeposit","deposit","payer","escrowAccount","systemProgram"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** …getProgram() as before… */\n\n/**\n * 1) Initialize + deposit via your Anchor program\n */\nexport async function buildInitializeAndDepositIxns(\n  lamports,\n  initializerPubkey,\n  nonce\n) {\n  const program = getProgram();\n\n  // derive PDA exactly as in Rust\n  const nonceBuf = Buffer.from(new anchor.BN(nonce).toArray(\"le\", 8));\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [Buffer.from(\"escrow\"), initializerPubkey.toBuffer(), nonceBuf],\n    PROGRAM_ID\n  );\n\n  // 1️⃣ initialize()\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(lamports), new anchor.BN(nonce))\n    .accounts({\n      escrow:         escrowPda,\n      player1:        initializerPubkey,\n      authority:      initializerPubkey,\n      system_program: SystemProgram.programId,\n    })\n    .instruction();\n\n  // 2️⃣ deposit()  ← **this is the crucial bit**\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow:         escrowPda,\n      payer:          initializerPubkey,\n      escrowAccount:  escrowPda,\n      systemProgram:  SystemProgram.programId,\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,SAAS,EAAEC,aAAa,QAAQ,iBAAiB;AAC1D,OAAOC,GAAG,MAAM,6BAA6B;AAC7C,SAASC,UAAU,EAAEC,WAAW,QAAQ,UAAU;;AAElD;;AAEA;AACA;AACA;AACA,OAAO,eAAeC,6BAA6BA,CACjDC,QAAQ,EACRC,iBAAiB,EACjBC,KAAK,EACL;EACA,MAAMC,OAAO,GAAGC,UAAU,CAAC,CAAC;;EAE5B;EACA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAAC,IAAId,MAAM,CAACe,EAAE,CAACN,KAAK,CAAC,CAACO,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;EACnE,MAAM,CAACC,SAAS,CAAC,GAAG,MAAMhB,SAAS,CAACiB,kBAAkB,CACpD,CAACL,MAAM,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAEN,iBAAiB,CAACW,QAAQ,CAAC,CAAC,EAAEP,QAAQ,CAAC,EAC/DR,UACF,CAAC;;EAED;EACA,MAAMgB,MAAM,GAAG,MAAMV,OAAO,CAACW,OAAO,CACjCC,UAAU,CAAC,IAAItB,MAAM,CAACe,EAAE,CAACR,QAAQ,CAAC,EAAE,IAAIP,MAAM,CAACe,EAAE,CAACN,KAAK,CAAC,CAAC,CACzDc,QAAQ,CAAC;IACRC,MAAM,EAAUP,SAAS;IACzBQ,OAAO,EAASjB,iBAAiB;IACjCkB,SAAS,EAAOlB,iBAAiB;IACjCmB,cAAc,EAAEzB,aAAa,CAAC0B;EAChC,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;;EAEhB;EACA,MAAMC,SAAS,GAAG,MAAMpB,OAAO,CAACW,OAAO,CACpCU,OAAO,CAAC,CAAC,CACTR,QAAQ,CAAC;IACRC,MAAM,EAAUP,SAAS;IACzBe,KAAK,EAAWxB,iBAAiB;IACjCyB,aAAa,EAAGhB,SAAS;IACzBiB,aAAa,EAAGhC,aAAa,CAAC0B;EAChC,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;EAEhB,OAAO;IAAET,MAAM;IAAEU,SAAS;IAAEb;EAAU,CAAC;AACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}