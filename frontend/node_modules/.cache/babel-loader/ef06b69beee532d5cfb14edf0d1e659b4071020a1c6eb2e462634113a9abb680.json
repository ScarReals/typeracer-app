{"ast":null,"code":"import * as anchor from \"@coral-xyz/anchor\";\nimport { Connection, clusterApiUrl, PublicKey } from \"@solana/web3.js\";\nimport { AnchorProvider, Program } from \"@coral-xyz/anchor\";\nimport idl from \"./idl/typeracer_escrow.json\";\nlet provider;\nlet program;\n\n/**\n * Setup and return Anchor provider and program instance.\n * Should be called after wallet connection.\n */\nexport function setProvider(wallet) {\n  if (!wallet) throw new Error(\"Wallet not connected\");\n  const network = process.env.REACT_APP_SOLANA_NETWORK || \"mainnet-beta\";\n  const rpcEndpoint = process.env.REACT_APP_SOLANA_RPC || clusterApiUrl(network);\n  const connection = new Connection(rpcEndpoint, \"confirmed\");\n  provider = new AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n\n  // **Use idl.address** here\n  const programId = new PublicKey(idl.address);\n  program = new Program(idl, programId, provider);\n  return program;\n}\n\n/**\n * Returns the current Anchor program instance.\n */\nexport function getProgram() {\n  if (!program) {\n    throw new Error(\"Program not initialized. Call setProvider(wallet) first.\");\n  }\n  return program;\n}\n\n/**\n * Returns current Anchor provider instance.\n */\nexport function getProvider() {\n  if (!provider) {\n    throw new Error(\"Provider not initialized. Call setProvider(wallet) first.\");\n  }\n  return provider;\n}","map":{"version":3,"names":["anchor","Connection","clusterApiUrl","PublicKey","AnchorProvider","Program","idl","provider","program","setProvider","wallet","Error","network","process","env","REACT_APP_SOLANA_NETWORK","rpcEndpoint","REACT_APP_SOLANA_RPC","connection","preflightCommitment","commitment","programId","address","getProgram","getProvider"],"sources":["/home/kokoi/sol-wager-app/frontend/src/solana.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { Connection, clusterApiUrl, PublicKey } from \"@solana/web3.js\";\nimport { AnchorProvider, Program } from \"@coral-xyz/anchor\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\nlet provider;\nlet program;\n\n/**\n * Setup and return Anchor provider and program instance.\n * Should be called after wallet connection.\n */\nexport function setProvider(wallet) {\n  if (!wallet) throw new Error(\"Wallet not connected\");\n\n  const network = process.env.REACT_APP_SOLANA_NETWORK || \"mainnet-beta\";\n  const rpcEndpoint =\n    process.env.REACT_APP_SOLANA_RPC || clusterApiUrl(network);\n\n  const connection = new Connection(rpcEndpoint, \"confirmed\");\n  provider = new AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\",\n  });\n\n  // **Use idl.address** here\n  const programId = new PublicKey(idl.address);\n  program = new Program(idl, programId, provider);\n  return program;\n}\n\n/**\n * Returns the current Anchor program instance.\n */\nexport function getProgram() {\n  if (!program) {\n    throw new Error(\"Program not initialized. Call setProvider(wallet) first.\");\n  }\n  return program;\n}\n\n/**\n * Returns current Anchor provider instance.\n */\nexport function getProvider() {\n  if (!provider) {\n    throw new Error(\"Provider not initialized. Call setProvider(wallet) first.\");\n  }\n  return provider;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,UAAU,EAAEC,aAAa,EAAEC,SAAS,QAAQ,iBAAiB;AACtE,SAASC,cAAc,EAAEC,OAAO,QAAQ,mBAAmB;AAC3D,OAAOC,GAAG,MAAM,6BAA6B;AAE7C,IAAIC,QAAQ;AACZ,IAAIC,OAAO;;AAEX;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAE;EAClC,IAAI,CAACA,MAAM,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EAEpD,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,cAAc;EACtE,MAAMC,WAAW,GACfH,OAAO,CAACC,GAAG,CAACG,oBAAoB,IAAIf,aAAa,CAACU,OAAO,CAAC;EAE5D,MAAMM,UAAU,GAAG,IAAIjB,UAAU,CAACe,WAAW,EAAE,WAAW,CAAC;EAC3DT,QAAQ,GAAG,IAAIH,cAAc,CAACc,UAAU,EAAER,MAAM,EAAE;IAChDS,mBAAmB,EAAE,WAAW;IAChCC,UAAU,EAAE;EACd,CAAC,CAAC;;EAEF;EACA,MAAMC,SAAS,GAAG,IAAIlB,SAAS,CAACG,GAAG,CAACgB,OAAO,CAAC;EAC5Cd,OAAO,GAAG,IAAIH,OAAO,CAACC,GAAG,EAAEe,SAAS,EAAEd,QAAQ,CAAC;EAC/C,OAAOC,OAAO;AAChB;;AAEA;AACA;AACA;AACA,OAAO,SAASe,UAAUA,CAAA,EAAG;EAC3B,IAAI,CAACf,OAAO,EAAE;IACZ,MAAM,IAAIG,KAAK,CAAC,0DAA0D,CAAC;EAC7E;EACA,OAAOH,OAAO;AAChB;;AAEA;AACA;AACA;AACA,OAAO,SAASgB,WAAWA,CAAA,EAAG;EAC5B,IAAI,CAACjB,QAAQ,EAAE;IACb,MAAM,IAAII,KAAK,CAAC,2DAA2D,CAAC;EAC9E;EACA,OAAOJ,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}