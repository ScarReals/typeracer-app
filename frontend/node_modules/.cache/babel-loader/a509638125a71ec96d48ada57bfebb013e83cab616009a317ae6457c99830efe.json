{"ast":null,"code":"// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Use the metadata.address field for Program ID\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nfunction getProgram() {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Call setProvider() first.\");\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\nexport async function buildInitializeAndDepositIxns(wagerLamports) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const nonce = Math.floor(Math.random() * 1000000);\n\n  // derive PDA\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], program.programId);\n  const ixInit = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    system_program: SystemProgram.programId\n  }).instruction();\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: provider.wallet.publicKey,\n    escrow_account: escrowPda,\n    system_program: SystemProgram.programId\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\nexport async function buildJoinAndDepositIxn(escrowId) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const escrowPda = typeof escrowId === \"string\" ? new PublicKey(escrowId) : escrowId;\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: provider.wallet.publicKey,\n    escrow_account: escrowPda,\n    system_program: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\nexport async function buildCancelIxn(escrowId, player1Pubkey, player2Pubkey) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const escrowPda = typeof escrowId === \"string\" ? new PublicKey(escrowId) : escrowId;\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1: new PublicKey(player1Pubkey),\n    player2: new PublicKey(player2Pubkey),\n    escrow_account: escrowPda,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  return ix;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","metadata","address","getProgram","provider","getProvider","Error","Program","buildInitializeAndDepositIxns","wagerLamports","program","nonce","Math","floor","random","escrowPda","findProgramAddress","Buffer","from","wallet","publicKey","toBuffer","BN","toArrayLike","programId","ixInit","methods","initialize","accounts","escrow","player1","authority","system_program","instruction","ixDeposit","deposit","payer","escrow_account","buildJoinAndDepositIxn","escrowId","ix","joinAndDeposit","player2","buildCancelIxn","player1Pubkey","player2Pubkey","cancel"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Use the metadata.address field for Program ID\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\nfunction getProgram() {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Call setProvider() first.\");\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\nexport async function buildInitializeAndDepositIxns(wagerLamports) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const nonce = Math.floor(Math.random() * 1_000_000);\n\n  // derive PDA\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)],\n    program.programId\n  );\n\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,\n      player1: provider.wallet.publicKey,\n      authority: provider.wallet.publicKey,\n      system_program: SystemProgram.programId\n    })\n    .instruction();\n\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: provider.wallet.publicKey,\n      escrow_account: escrowPda,\n      system_program: SystemProgram.programId\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\nexport async function buildJoinAndDepositIxn(escrowId) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const escrowPda = typeof escrowId === \"string\" ? new PublicKey(escrowId) : escrowId;\n\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: provider.wallet.publicKey,\n      escrow_account: escrowPda,\n      system_program: SystemProgram.programId\n    })\n    .instruction();\n\n  return ix;\n}\n\nexport async function buildCancelIxn(escrowId, player1Pubkey, player2Pubkey) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const escrowPda = typeof escrowId === \"string\" ? new PublicKey(escrowId) : escrowId;\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1: new PublicKey(player1Pubkey),\n      player2: new PublicKey(player2Pubkey),\n      escrow_account: escrowPda,\n      authority: provider.wallet.publicKey\n    })\n    .instruction();\n\n  return ix;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}