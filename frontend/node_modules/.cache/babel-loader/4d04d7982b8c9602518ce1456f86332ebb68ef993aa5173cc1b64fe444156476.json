{"ast":null,"code":"import * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nfunction getProgram() {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Call setProvider in App.jsx first.\");\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n// Helper to derive the escrow/vault PDA using creator and nonce\nexport async function deriveEscrowPda(creator, nonce) {\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), new PublicKey(creator).toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], PROGRAM_ID);\n  return escrowPda;\n}\n\n// Build the Initialize + Deposit instructions; App.jsx will sign+send them\nexport async function buildInitializeAndDepositIxns(wagerLamports, creatorPubkey, nonce) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const escrowPda = await deriveEscrowPda(creatorPubkey.toBase58(), nonce);\n  const ixInit = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: provider.wallet.publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\nexport async function buildJoinAndDepositIxn(match) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const escrowPda = await deriveEscrowPda(match.creator, match.nonce);\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: provider.wallet.publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\nexport async function buildCancelIxn(match) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const escrowPda = await deriveEscrowPda(match.creator, match.nonce);\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1: new PublicKey(match.creator),\n    player2: new PublicKey(match.accepter || match.creator),\n    escrowAccount: escrowPda,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  return ix;\n}\nexport async function buildResolveIxn(match, winner) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const escrowPda = await deriveEscrowPda(match.creator, match.nonce);\n  const ix = await program.methods.resolve(winner).accounts({\n    escrow: escrowPda,\n    winner,\n    house: provider.wallet.publicKey,\n    escrowAccount: escrowPda,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  return ix;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","metadata","address","getProgram","provider","getProvider","Error","Program","deriveEscrowPda","creator","nonce","escrowPda","findProgramAddress","Buffer","from","toBuffer","BN","toArrayLike","buildInitializeAndDepositIxns","wagerLamports","creatorPubkey","program","toBase58","ixInit","methods","initialize","accounts","escrow","player1","wallet","publicKey","authority","systemProgram","programId","instruction","ixDeposit","deposit","payer","escrowAccount","buildJoinAndDepositIxn","match","ix","joinAndDeposit","player2","buildCancelIxn","cancel","accepter","buildResolveIxn","winner","resolve","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\nfunction getProgram() {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Call setProvider in App.jsx first.\");\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n// Helper to derive the escrow/vault PDA using creator and nonce\nexport async function deriveEscrowPda(creator, nonce) {\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      new PublicKey(creator).toBuffer(),\n      new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n    ],\n    PROGRAM_ID\n  );\n  return escrowPda;\n}\n\n// Build the Initialize + Deposit instructions; App.jsx will sign+send them\nexport async function buildInitializeAndDepositIxns(wagerLamports, creatorPubkey, nonce) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n\n  const escrowPda = await deriveEscrowPda(creatorPubkey.toBase58(), nonce);\n\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,\n      player1: provider.wallet.publicKey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\nexport async function buildJoinAndDepositIxn(match) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n\n  const escrowPda = await deriveEscrowPda(match.creator, match.nonce);\n\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return ix;\n}\n\nexport async function buildCancelIxn(match) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n\n  const escrowPda = await deriveEscrowPda(match.creator, match.nonce);\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1: new PublicKey(match.creator),\n      player2: new PublicKey(match.accepter || match.creator),\n      escrowAccount: escrowPda,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n\n  return ix;\n}\n\nexport async function buildResolveIxn(match, winner) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n\n  const escrowPda = await deriveEscrowPda(match.creator, match.nonce);\n\n  const ix = await program.methods\n    .resolve(winner)\n    .accounts({\n      escrow: escrowPda,\n      winner,\n      house: provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n\n  return ix;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}