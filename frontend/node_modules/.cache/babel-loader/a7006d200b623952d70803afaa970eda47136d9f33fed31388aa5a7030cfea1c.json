{"ast":null,"code":"// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\n\n// Use the program ID from metadata.address\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\n/**\n * Helper to send & confirm a raw transaction without Anchor's built‑in retries.\n * @param {Transaction} tx \n */\nasync function sendAndConfirm(tx) {\n  const provider = getProvider();\n  const {\n    connection,\n    wallet\n  } = provider;\n\n  // Fetch a recent blockhash\n  const {\n    blockhash,\n    lastValidBlockHeight\n  } = await connection.getLatestBlockhash(\"confirmed\");\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = wallet.publicKey;\n\n  // Have the wallet sign the transaction\n  const signed = await wallet.signTransaction(tx);\n  const raw = signed.serialize();\n\n  // Send and confirm\n  const signature = await connection.sendRawTransaction(raw, {\n    skipPreflight: true,\n    preflightCommitment: \"confirmed\"\n  });\n  await connection.confirmTransaction({\n    signature,\n    blockhash,\n    lastValidBlockHeight\n  }, \"confirmed\");\n  return signature;\n}\n\n/**\n * Initialize a new escrow.\n * @param {number} wagerLamports Amount in lamports.\n * @returns {PublicKey} PDA of the escrow account.\n */\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  // Create a random nonce for uniqueness\n  const nonce = Math.floor(Math.random() * 1000000);\n\n  // Derive the PDA\n  const [escrowPDA] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], program.programId);\n\n  // Build the transaction\n  const tx = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPDA,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).transaction();\n\n  // Send & confirm\n  await sendAndConfirm(tx);\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one atomic transaction.\n * @param {PublicKey} escrowPDA \n */\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  // Fetch the on‑chain escrow account to read the escrowAccount field\n  const {\n    escrowAccount\n  } = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPDA,\n    player2: provider.wallet.publicKey,\n    escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).transaction();\n  await sendAndConfirm(tx);\n}\n\n/**\n * Deposit SOL into an already‑initialized escrow.\n * @param {PublicKey} escrowPDA \n */\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const {\n    escrowAccount\n  } = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.deposit().accounts({\n    escrow: escrowPDA,\n    payer: provider.wallet.publicKey,\n    escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).transaction();\n  await sendAndConfirm(tx);\n}\n\n/**\n * Cancel an escrow and refund both players.\n * @param {PublicKey} escrowPDA \n * @param {PublicKey} player1Pubkey \n * @param {PublicKey} player2Pubkey \n */\nexport async function cancelEscrow(escrowPDA, player1Pubkey, player2Pubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const {\n    escrowAccount\n  } = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.cancel().accounts({\n    escrow: escrowPDA,\n    player1: player1Pubkey,\n    player2: player2Pubkey,\n    escrowAccount,\n    authority: provider.wallet.publicKey\n  }).transaction();\n  await sendAndConfirm(tx);\n}\n\n/**\n * Resolve the escrow by specifying the winner; transfers funds accordingly.\n * @param {PublicKey} escrowPDA \n * @param {PublicKey} winnerPubkey \n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const {\n    escrowAccount\n  } = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPDA,\n    winner: winnerPubkey,\n    house: provider.wallet.publicKey,\n    escrowAccount,\n    authority: provider.wallet.publicKey\n  }).transaction();\n  await sendAndConfirm(tx);\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","getProvider","PROGRAM_ID","metadata","address","sendAndConfirm","tx","provider","connection","wallet","blockhash","lastValidBlockHeight","getLatestBlockhash","recentBlockhash","feePayer","publicKey","signed","signTransaction","raw","serialize","signature","sendRawTransaction","skipPreflight","preflightCommitment","confirmTransaction","initializeEscrow","wagerLamports","program","Program","nonce","Math","floor","random","escrowPDA","findProgramAddress","Buffer","from","toBuffer","BN","toArrayLike","programId","methods","initialize","accounts","escrow","player1","authority","systemProgram","transaction","joinAndDeposit","escrowAccount","account","fetch","player2","depositToEscrow","deposit","payer","cancelEscrow","player1Pubkey","player2Pubkey","cancel","resolveEscrow","winnerPubkey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\n\n// Use the program ID from metadata.address\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\n/**\n * Helper to send & confirm a raw transaction without Anchor's built‑in retries.\n * @param {Transaction} tx \n */\nasync function sendAndConfirm(tx) {\n  const provider = getProvider();\n  const { connection, wallet } = provider;\n\n  // Fetch a recent blockhash\n  const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash(\"confirmed\");\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = wallet.publicKey;\n\n  // Have the wallet sign the transaction\n  const signed = await wallet.signTransaction(tx);\n  const raw = signed.serialize();\n\n  // Send and confirm\n  const signature = await connection.sendRawTransaction(raw, {\n    skipPreflight: true,\n    preflightCommitment: \"confirmed\",\n  });\n  await connection.confirmTransaction(\n    { signature, blockhash, lastValidBlockHeight },\n    \"confirmed\"\n  );\n\n  return signature;\n}\n\n/**\n * Initialize a new escrow.\n * @param {number} wagerLamports Amount in lamports.\n * @returns {PublicKey} PDA of the escrow account.\n */\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  // Create a random nonce for uniqueness\n  const nonce = Math.floor(Math.random() * 1_000_000);\n\n  // Derive the PDA\n  const [escrowPDA] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      provider.wallet.publicKey.toBuffer(),\n      new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  // Build the transaction\n  const tx = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPDA,\n      player1: provider.wallet.publicKey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n\n  // Send & confirm\n  await sendAndConfirm(tx);\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one atomic transaction.\n * @param {PublicKey} escrowPDA \n */\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  // Fetch the on‑chain escrow account to read the escrowAccount field\n  const { escrowAccount } = await program.account.escrow.fetch(escrowPDA);\n\n  const tx = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPDA,\n      player2: provider.wallet.publicKey,\n      escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx);\n}\n\n/**\n * Deposit SOL into an already‑initialized escrow.\n * @param {PublicKey} escrowPDA \n */\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const { escrowAccount } = await program.account.escrow.fetch(escrowPDA);\n\n  const tx = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPDA,\n      payer: provider.wallet.publicKey,\n      escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx);\n}\n\n/**\n * Cancel an escrow and refund both players.\n * @param {PublicKey} escrowPDA \n * @param {PublicKey} player1Pubkey \n * @param {PublicKey} player2Pubkey \n */\nexport async function cancelEscrow(escrowPDA, player1Pubkey, player2Pubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const { escrowAccount } = await program.account.escrow.fetch(escrowPDA);\n\n  const tx = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPDA,\n      player1: player1Pubkey,\n      player2: player2Pubkey,\n      escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx);\n}\n\n/**\n * Resolve the escrow by specifying the winner; transfers funds accordingly.\n * @param {PublicKey} escrowPDA \n * @param {PublicKey} winnerPubkey \n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const { escrowAccount } = await program.account.escrow.fetch(escrowPDA);\n\n  const tx = await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPDA,\n      winner: winnerPubkey,\n      house: provider.wallet.publicKey,\n      escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}