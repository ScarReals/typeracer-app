{"ast":null,"code":"// frontend/src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { getProgram } from \"./solana\";\n\n/**\n * Poll up to 60 s for a tx to reach “processed” commitment.\n */\nasync function waitForProcessed(connection, signature) {\n  const start = Date.now();\n  while (true) {\n    const {\n      value\n    } = await connection.getSignatureStatuses([signature]);\n    const info = value[0];\n    if ((info === null || info === void 0 ? void 0 : info.confirmationStatus) === \"processed\") return info;\n    if (Date.now() - start > 60000) {\n      throw new Error(`Timeout waiting for tx ${signature}`);\n    }\n    await new Promise(r => setTimeout(r, 500));\n  }\n}\n\n/**\n * Signs & sends a Transaction, handling both signTransaction & signAllTransactions.\n */\nasync function signAndSend(tx, provider) {\n  const wallet = provider.wallet;\n  // ensure recent blockhash and feePayer are set before calling this\n  let signed;\n  if (wallet.signTransaction) {\n    signed = await wallet.signTransaction(tx);\n  } else {\n    // fallback for adapters that only implement signAllTransactions\n    const signedTxs = await wallet.signAllTransactions([tx]);\n    signed = signedTxs[0];\n  }\n  const raw = signed.serialize();\n  const signature = await provider.connection.sendRawTransaction(raw, {\n    skipPreflight: false,\n    preflightCommitment: \"processed\"\n  });\n  return signature;\n}\n\n/**\n * Initialize the escrow on‑chain (one instruction) and return its PDA.\n */\nexport async function initializeEscrow(wagerLamports) {\n  console.log(\"▶️ [escrow.js] initializeEscrow\", wagerLamports);\n  const program = getProgram();\n  const provider = program.provider;\n  const connection = provider.connection;\n  const walletPk = provider.wallet.publicKey;\n  const nonce = new anchor.BN(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER), 10, \"le\");\n  const [escrowPda] = await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"escrow\"), walletPk.toBuffer(), nonce.toArrayLike(Buffer, \"le\", 8)], program.programId);\n  console.log(\"   PDA:\", escrowPda.toBase58());\n\n  // Build the initialize instruction\n  const ix = await program.methods.initialize(new anchor.BN(wagerLamports), nonce).accounts({\n    escrow: escrowPda,\n    player1: walletPk,\n    authority: walletPk,\n    systemProgram: anchor.web3.SystemProgram.programId\n  }).instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n  const {\n    blockhash\n  } = await connection.getLatestBlockhash(\"processed\");\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = walletPk;\n\n  // Sign & send\n  console.log(\"   signing & sending initialize tx…\");\n  const sig = await signAndSend(tx, provider);\n  console.log(\"   sent initialize, sig:\", sig);\n\n  // Wait for confirmation\n  await waitForProcessed(connection, sig);\n  console.log(\"   initialize confirmed\");\n  return escrowPda;\n}\n\n/**\n * Deposit into the escrow (one instruction).\n */\nexport async function depositToEscrow(escrowPda) {\n  console.log(\"▶️ [escrow.js] depositToEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const connection = provider.connection;\n  const walletPk = provider.wallet.publicKey;\n  const ix = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: walletPk,\n    escrowAccount: escrowPda,\n    systemProgram: anchor.web3.SystemProgram.programId\n  }).instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n  const {\n    blockhash\n  } = await connection.getLatestBlockhash(\"processed\");\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = walletPk;\n  console.log(\"   signing & sending deposit tx…\");\n  const sig = await signAndSend(tx, provider);\n  console.log(\"   sent deposit, sig:\", sig);\n  await waitForProcessed(connection, sig);\n  console.log(\"   deposit confirmed\");\n  return sig;\n}\n\n/**\n * Join the escrow (one instruction).\n */\nexport async function joinEscrow(escrowPda) {\n  console.log(\"▶️ [escrow.js] joinEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const connection = provider.connection;\n  const walletPk = provider.wallet.publicKey;\n  const ix = await program.methods.join().accounts({\n    escrow: escrowPda,\n    player2: walletPk\n  }).instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n  const {\n    blockhash\n  } = await connection.getLatestBlockhash(\"processed\");\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = walletPk;\n  console.log(\"   signing & sending join tx…\");\n  const sig = await signAndSend(tx, provider);\n  console.log(\"   sent join, sig:\", sig);\n  await waitForProcessed(connection, sig);\n  console.log(\"   join confirmed\");\n  return sig;\n}\n\n/**\n * Resolve the escrow (payout winner+house).\n */\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  console.log(\"▶️ [escrow.js] resolveEscrow\", escrowPda.toBase58(), winnerPubkey.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const connection = provider.connection;\n  const walletPk = provider.wallet.publicKey;\n  const house = new anchor.web3.PublicKey(\"A32Burni3cYyFAqjZM3CvCrStAKRFCfftk196Xfpx9Hs\");\n  const ix = await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPda,\n    winner: winnerPubkey,\n    house,\n    escrowAccount: escrowPda,\n    authority: walletPk\n  }).instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n  const {\n    blockhash\n  } = await connection.getLatestBlockhash(\"processed\");\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = walletPk;\n  console.log(\"   signing & sending resolve tx…\");\n  const sig = await signAndSend(tx, provider);\n  console.log(\"   sent resolve, sig:\", sig);\n  await waitForProcessed(connection, sig);\n  console.log(\"   resolve confirmed\");\n  return sig;\n}\n\n/**\n * Cancel the escrow (refund both players).\n */\nexport async function cancelEscrow(escrowPda, player1, player2) {\n  console.log(\"▶️ [escrow.js] cancelEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const connection = provider.connection;\n  const walletPk = provider.wallet.publicKey;\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrowAccount: escrowPda,\n    authority: walletPk\n  }).instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n  const {\n    blockhash\n  } = await connection.getLatestBlockhash(\"processed\");\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = walletPk;\n  console.log(\"   signing & sending cancel tx…\");\n  const sig = await signAndSend(tx, provider);\n  console.log(\"   sent cancel, sig:\", sig);\n  await waitForProcessed(connection, sig);\n  console.log(\"   cancel confirmed\");\n  return sig;\n}","map":{"version":3,"names":["anchor","getProgram","waitForProcessed","connection","signature","start","Date","now","value","getSignatureStatuses","info","confirmationStatus","Error","Promise","r","setTimeout","signAndSend","tx","provider","wallet","signed","signTransaction","signedTxs","signAllTransactions","raw","serialize","sendRawTransaction","skipPreflight","preflightCommitment","initializeEscrow","wagerLamports","console","log","program","walletPk","publicKey","nonce","BN","Math","floor","random","Number","MAX_SAFE_INTEGER","escrowPda","web3","PublicKey","findProgramAddress","Buffer","from","toBuffer","toArrayLike","programId","toBase58","ix","methods","initialize","accounts","escrow","player1","authority","systemProgram","SystemProgram","instruction","Transaction","add","blockhash","getLatestBlockhash","recentBlockhash","feePayer","sig","depositToEscrow","deposit","payer","escrowAccount","joinEscrow","join","player2","resolveEscrow","winnerPubkey","house","resolve","winner","cancelEscrow","cancel"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { getProgram } from \"./solana\";\n\n/**\n * Poll up to 60 s for a tx to reach “processed” commitment.\n */\nasync function waitForProcessed(connection, signature) {\n  const start = Date.now();\n  while (true) {\n    const { value } = await connection.getSignatureStatuses([signature]);\n    const info = value[0];\n    if (info?.confirmationStatus === \"processed\") return info;\n    if (Date.now() - start > 60_000) {\n      throw new Error(`Timeout waiting for tx ${signature}`);\n    }\n    await new Promise((r) => setTimeout(r, 500));\n  }\n}\n\n/**\n * Signs & sends a Transaction, handling both signTransaction & signAllTransactions.\n */\nasync function signAndSend(tx, provider) {\n  const wallet = provider.wallet;\n  // ensure recent blockhash and feePayer are set before calling this\n  let signed;\n  if (wallet.signTransaction) {\n    signed = await wallet.signTransaction(tx);\n  } else {\n    // fallback for adapters that only implement signAllTransactions\n    const signedTxs = await wallet.signAllTransactions([tx]);\n    signed = signedTxs[0];\n  }\n  const raw = signed.serialize();\n  const signature = await provider.connection.sendRawTransaction(raw, {\n    skipPreflight: false,\n    preflightCommitment: \"processed\",\n  });\n  return signature;\n}\n\n/**\n * Initialize the escrow on‑chain (one instruction) and return its PDA.\n */\nexport async function initializeEscrow(wagerLamports) {\n  console.log(\"▶️ [escrow.js] initializeEscrow\", wagerLamports);\n  const program = getProgram();\n  const provider = program.provider;\n  const connection = provider.connection;\n  const walletPk = provider.wallet.publicKey;\n\n  const nonce = new anchor.BN(\n    Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),\n    10,\n    \"le\"\n  );\n  const [escrowPda] = await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      walletPk.toBuffer(),\n      nonce.toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n  console.log(\"   PDA:\", escrowPda.toBase58());\n\n  // Build the initialize instruction\n  const ix = await program.methods\n    .initialize(new anchor.BN(wagerLamports), nonce)\n    .accounts({\n      escrow: escrowPda,\n      player1: walletPk,\n      authority: walletPk,\n      systemProgram: anchor.web3.SystemProgram.programId,\n    })\n    .instruction();\n\n  const tx = new anchor.web3.Transaction().add(ix);\n  const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = walletPk;\n\n  // Sign & send\n  console.log(\"   signing & sending initialize tx…\");\n  const sig = await signAndSend(tx, provider);\n  console.log(\"   sent initialize, sig:\", sig);\n\n  // Wait for confirmation\n  await waitForProcessed(connection, sig);\n  console.log(\"   initialize confirmed\");\n\n  return escrowPda;\n}\n\n/**\n * Deposit into the escrow (one instruction).\n */\nexport async function depositToEscrow(escrowPda) {\n  console.log(\"▶️ [escrow.js] depositToEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const connection = provider.connection;\n  const walletPk = provider.wallet.publicKey;\n\n  const ix = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: walletPk,\n      escrowAccount: escrowPda,\n      systemProgram: anchor.web3.SystemProgram.programId,\n    })\n    .instruction();\n\n  const tx = new anchor.web3.Transaction().add(ix);\n  const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = walletPk;\n\n  console.log(\"   signing & sending deposit tx…\");\n  const sig = await signAndSend(tx, provider);\n  console.log(\"   sent deposit, sig:\", sig);\n\n  await waitForProcessed(connection, sig);\n  console.log(\"   deposit confirmed\");\n  return sig;\n}\n\n/**\n * Join the escrow (one instruction).\n */\nexport async function joinEscrow(escrowPda) {\n  console.log(\"▶️ [escrow.js] joinEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const connection = provider.connection;\n  const walletPk = provider.wallet.publicKey;\n\n  const ix = await program.methods\n    .join()\n    .accounts({\n      escrow: escrowPda,\n      player2: walletPk,\n    })\n    .instruction();\n\n  const tx = new anchor.web3.Transaction().add(ix);\n  const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = walletPk;\n\n  console.log(\"   signing & sending join tx…\");\n  const sig = await signAndSend(tx, provider);\n  console.log(\"   sent join, sig:\", sig);\n\n  await waitForProcessed(connection, sig);\n  console.log(\"   join confirmed\");\n  return sig;\n}\n\n/**\n * Resolve the escrow (payout winner+house).\n */\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  console.log(\"▶️ [escrow.js] resolveEscrow\", escrowPda.toBase58(), winnerPubkey.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const connection = provider.connection;\n  const walletPk = provider.wallet.publicKey;\n  const house = new anchor.web3.PublicKey(\n    \"A32Burni3cYyFAqjZM3CvCrStAKRFCfftk196Xfpx9Hs\"\n  );\n\n  const ix = await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPda,\n      winner: winnerPubkey,\n      house,\n      escrowAccount: escrowPda,\n      authority: walletPk,\n    })\n    .instruction();\n\n  const tx = new anchor.web3.Transaction().add(ix);\n  const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = walletPk;\n\n  console.log(\"   signing & sending resolve tx…\");\n  const sig = await signAndSend(tx, provider);\n  console.log(\"   sent resolve, sig:\", sig);\n\n  await waitForProcessed(connection, sig);\n  console.log(\"   resolve confirmed\");\n  return sig;\n}\n\n/**\n * Cancel the escrow (refund both players).\n */\nexport async function cancelEscrow(escrowPda, player1, player2) {\n  console.log(\"▶️ [escrow.js] cancelEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const connection = provider.connection;\n  const walletPk = provider.wallet.publicKey;\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: escrowPda,\n      authority: walletPk,\n    })\n    .instruction();\n\n  const tx = new anchor.web3.Transaction().add(ix);\n  const { blockhash } = await connection.getLatestBlockhash(\"processed\");\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = walletPk;\n\n  console.log(\"   signing & sending cancel tx…\");\n  const sig = await signAndSend(tx, provider);\n  console.log(\"   sent cancel, sig:\", sig);\n\n  await waitForProcessed(connection, sig);\n  console.log(\"   cancel confirmed\");\n  return sig;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}