{"ast":null,"code":"import { BN, Program } from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\n\n// **Use idl.address**, not idl.metadata.address**\nconst PROGRAM_ID = new PublicKey(idl.address);\n\n/**\n * Initialize a new escrow (wait for confirmation).\n * @param {number} wagerLamports\n * @returns {Promise<PublicKey>}\n */\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new Program(idl, PROGRAM_ID, provider);\n  const nonce = Math.floor(Math.random() * 1000000);\n  const nonceBn = new BN(nonce);\n  const [escrowPDA] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), nonceBn.toArrayLike(Buffer, \"le\", 8)], program.programId);\n  await program.methods.initialize(new BN(wagerLamports), nonceBn).accounts({\n    escrow: escrowPDA,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).rpc();\n  return escrowPDA;\n}\n\n/**\n * Initialize a new escrow *optimistically* (returns PDA immediately).\n * @param {number} wagerLamports\n * @returns {Promise<PublicKey>}\n */\nexport async function initializeEscrowOptimistic(wagerLamports) {\n  const provider = getProvider();\n  const program = new Program(idl, PROGRAM_ID, provider);\n  const nonce = Math.floor(Math.random() * 1000000);\n  const nonceBn = new BN(nonce);\n  const [escrowPDA] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), nonceBn.toArrayLike(Buffer, \"le\", 8)], program.programId);\n\n  // fire-and-forget with lower commitment\n  program.methods.initialize(new BN(wagerLamports), nonceBn).accounts({\n    escrow: escrowPDA,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).rpc({\n    skipPreflight: true,\n    preflightCommitment: \"processed\"\n  }).catch(err => console.error(\"Optimistic init failed:\", err));\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one go.\n * @param {PublicKey} escrowPDA\n */\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPDA,\n    player2: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).rpc();\n}\n\n/**\n * Deposit to an existing escrow.\n * @param {PublicKey} escrowPDA\n */\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.deposit().accounts({\n    escrow: escrowPDA,\n    payer: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).rpc();\n}\n\n/**\n * Cancel and refund.\n */\nexport async function cancelEscrow(escrowPDA, player1, player2) {\n  const provider = getProvider();\n  const program = new Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.cancel().accounts({\n    escrow: escrowPDA,\n    player1,\n    player2,\n    escrowAccount: escrowAccount.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).rpc();\n}\n\n/**\n * Resolve the escrow with a winner.\n */\nexport async function resolveEscrow(escrowPDA, winner) {\n  const provider = getProvider();\n  const program = new Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.resolve(winner).accounts({\n    escrow: escrowPDA,\n    winner,\n    house: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).rpc();\n}","map":{"version":3,"names":["BN","Program","PublicKey","SystemProgram","idl","getProvider","PROGRAM_ID","address","initializeEscrow","wagerLamports","provider","program","nonce","Math","floor","random","nonceBn","escrowPDA","findProgramAddress","Buffer","from","wallet","publicKey","toBuffer","toArrayLike","programId","methods","initialize","accounts","escrow","player1","authority","systemProgram","rpc","initializeEscrowOptimistic","skipPreflight","preflightCommitment","catch","err","console","error","joinAndDeposit","escrowAccount","account","fetch","player2","depositToEscrow","deposit","payer","cancelEscrow","cancel","resolveEscrow","winner","resolve","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["import { BN, Program } from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\n\n// **Use idl.address**, not idl.metadata.address**\nconst PROGRAM_ID = new PublicKey(idl.address);\n\n/**\n * Initialize a new escrow (wait for confirmation).\n * @param {number} wagerLamports\n * @returns {Promise<PublicKey>}\n */\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new Program(idl, PROGRAM_ID, provider);\n\n  const nonce = Math.floor(Math.random() * 1_000_000);\n  const nonceBn = new BN(nonce);\n\n  const [escrowPDA] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      provider.wallet.publicKey.toBuffer(),\n      nonceBn.toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  await program.methods\n    .initialize(new BN(wagerLamports), nonceBn)\n    .accounts({\n      escrow: escrowPDA,\n      player1: provider.wallet.publicKey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc();\n\n  return escrowPDA;\n}\n\n/**\n * Initialize a new escrow *optimistically* (returns PDA immediately).\n * @param {number} wagerLamports\n * @returns {Promise<PublicKey>}\n */\nexport async function initializeEscrowOptimistic(wagerLamports) {\n  const provider = getProvider();\n  const program = new Program(idl, PROGRAM_ID, provider);\n\n  const nonce = Math.floor(Math.random() * 1_000_000);\n  const nonceBn = new BN(nonce);\n\n  const [escrowPDA] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      provider.wallet.publicKey.toBuffer(),\n      nonceBn.toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  // fire-and-forget with lower commitment\n  program.methods\n    .initialize(new BN(wagerLamports), nonceBn)\n    .accounts({\n      escrow: escrowPDA,\n      player1: provider.wallet.publicKey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc({\n      skipPreflight: true,\n      preflightCommitment: \"processed\",\n    })\n    .catch((err) => console.error(\"Optimistic init failed:\", err));\n\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one go.\n * @param {PublicKey} escrowPDA\n */\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPDA,\n      player2: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc();\n}\n\n/**\n * Deposit to an existing escrow.\n * @param {PublicKey} escrowPDA\n */\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPDA,\n      payer: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc();\n}\n\n/**\n * Cancel and refund.\n */\nexport async function cancelEscrow(escrowPDA, player1, player2) {\n  const provider = getProvider();\n  const program = new Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPDA,\n      player1,\n      player2,\n      escrowAccount: escrowAccount.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .rpc();\n}\n\n/**\n * Resolve the escrow with a winner.\n */\nexport async function resolveEscrow(escrowPDA, winner) {\n  const provider = getProvider();\n  const program = new Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .resolve(winner)\n    .accounts({\n      escrow: escrowPDA,\n      winner,\n      house: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .rpc();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}