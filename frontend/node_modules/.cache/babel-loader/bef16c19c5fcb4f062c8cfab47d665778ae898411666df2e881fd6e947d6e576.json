{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SolanaComposedTransaction = exports.SolanaComposeTransaction = exports.SolanaProgramName = exports.SolanaSignedTransaction = exports.SolanaSignTransaction = exports.SolanaTxAdditionalInfo = exports.SolanaTxTokenAccountInfo = exports.SolanaPublicKey = void 0;\nconst schema_utils_1 = require(\"@trezor/schema-utils\");\nconst params_1 = require(\"../../params\");\nexports.SolanaPublicKey = schema_utils_1.Type.Intersect([params_1.PublicKey, schema_utils_1.Type.Object({\n  publicKey: schema_utils_1.Type.String()\n})]);\nexports.SolanaTxTokenAccountInfo = schema_utils_1.Type.Object({\n  baseAddress: schema_utils_1.Type.String(),\n  tokenProgram: schema_utils_1.Type.String(),\n  tokenMint: schema_utils_1.Type.String(),\n  tokenAccount: schema_utils_1.Type.String(),\n  symbol: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.SolanaTxAdditionalInfo = schema_utils_1.Type.Object({\n  tokenAccountsInfos: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.SolanaTxTokenAccountInfo, {\n    minItems: 1\n  }))\n});\nexports.SolanaSignTransaction = schema_utils_1.Type.Object({\n  path: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Array(schema_utils_1.Type.Number())]),\n  serializedTx: schema_utils_1.Type.String(),\n  additionalInfo: schema_utils_1.Type.Optional(exports.SolanaTxAdditionalInfo),\n  serialize: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n});\nexports.SolanaSignedTransaction = schema_utils_1.Type.Object({\n  signature: schema_utils_1.Type.String(),\n  serializedTx: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.SolanaProgramName = schema_utils_1.Type.Union([schema_utils_1.Type.Literal('spl-token'), schema_utils_1.Type.Literal('spl-token-2022')]);\nexports.SolanaComposeTransaction = schema_utils_1.Type.Object({\n  fromAddress: schema_utils_1.Type.String(),\n  toAddress: schema_utils_1.Type.String(),\n  amount: schema_utils_1.Type.String(),\n  blockHash: schema_utils_1.Type.String(),\n  lastValidBlockHeight: schema_utils_1.Type.Number(),\n  priorityFees: schema_utils_1.Type.Optional(schema_utils_1.Type.Object({\n    computeUnitPrice: schema_utils_1.Type.String(),\n    computeUnitLimit: schema_utils_1.Type.String()\n  })),\n  token: schema_utils_1.Type.Optional(schema_utils_1.Type.Object({\n    mint: schema_utils_1.Type.String(),\n    program: exports.SolanaProgramName,\n    decimals: schema_utils_1.Type.Number(),\n    accounts: schema_utils_1.Type.Array(schema_utils_1.Type.Object({\n      publicKey: schema_utils_1.Type.String(),\n      balance: schema_utils_1.Type.String()\n    }))\n  })),\n  coin: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  identity: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.SolanaComposedTransaction = schema_utils_1.Type.Object({\n  serializedTx: schema_utils_1.Type.String(),\n  additionalInfo: schema_utils_1.Type.Object({\n    newAccountProgramName: schema_utils_1.Type.Optional(exports.SolanaProgramName),\n    tokenAccountInfo: schema_utils_1.Type.Optional(exports.SolanaTxTokenAccountInfo)\n  })\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","SolanaComposedTransaction","SolanaComposeTransaction","SolanaProgramName","SolanaSignedTransaction","SolanaSignTransaction","SolanaTxAdditionalInfo","SolanaTxTokenAccountInfo","SolanaPublicKey","schema_utils_1","require","params_1","Type","Intersect","PublicKey","publicKey","String","baseAddress","tokenProgram","tokenMint","tokenAccount","symbol","Optional","tokenAccountsInfos","Array","minItems","path","Union","Number","serializedTx","additionalInfo","serialize","Boolean","signature","Literal","fromAddress","toAddress","amount","blockHash","lastValidBlockHeight","priorityFees","computeUnitPrice","computeUnitLimit","token","mint","program","decimals","accounts","balance","coin","identity","newAccountProgramName","tokenAccountInfo"],"sources":["/home/kokoi/typeracer-app/frontend/node_modules/@trezor/connect/lib/types/api/solana/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SolanaComposedTransaction = exports.SolanaComposeTransaction = exports.SolanaProgramName = exports.SolanaSignedTransaction = exports.SolanaSignTransaction = exports.SolanaTxAdditionalInfo = exports.SolanaTxTokenAccountInfo = exports.SolanaPublicKey = void 0;\nconst schema_utils_1 = require(\"@trezor/schema-utils\");\nconst params_1 = require(\"../../params\");\nexports.SolanaPublicKey = schema_utils_1.Type.Intersect([\n    params_1.PublicKey,\n    schema_utils_1.Type.Object({\n        publicKey: schema_utils_1.Type.String(),\n    }),\n]);\nexports.SolanaTxTokenAccountInfo = schema_utils_1.Type.Object({\n    baseAddress: schema_utils_1.Type.String(),\n    tokenProgram: schema_utils_1.Type.String(),\n    tokenMint: schema_utils_1.Type.String(),\n    tokenAccount: schema_utils_1.Type.String(),\n    symbol: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n});\nexports.SolanaTxAdditionalInfo = schema_utils_1.Type.Object({\n    tokenAccountsInfos: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.SolanaTxTokenAccountInfo, { minItems: 1 })),\n});\nexports.SolanaSignTransaction = schema_utils_1.Type.Object({\n    path: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Array(schema_utils_1.Type.Number())]),\n    serializedTx: schema_utils_1.Type.String(),\n    additionalInfo: schema_utils_1.Type.Optional(exports.SolanaTxAdditionalInfo),\n    serialize: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n});\nexports.SolanaSignedTransaction = schema_utils_1.Type.Object({\n    signature: schema_utils_1.Type.String(),\n    serializedTx: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n});\nexports.SolanaProgramName = schema_utils_1.Type.Union([\n    schema_utils_1.Type.Literal('spl-token'),\n    schema_utils_1.Type.Literal('spl-token-2022'),\n]);\nexports.SolanaComposeTransaction = schema_utils_1.Type.Object({\n    fromAddress: schema_utils_1.Type.String(),\n    toAddress: schema_utils_1.Type.String(),\n    amount: schema_utils_1.Type.String(),\n    blockHash: schema_utils_1.Type.String(),\n    lastValidBlockHeight: schema_utils_1.Type.Number(),\n    priorityFees: schema_utils_1.Type.Optional(schema_utils_1.Type.Object({ computeUnitPrice: schema_utils_1.Type.String(), computeUnitLimit: schema_utils_1.Type.String() })),\n    token: schema_utils_1.Type.Optional(schema_utils_1.Type.Object({\n        mint: schema_utils_1.Type.String(),\n        program: exports.SolanaProgramName,\n        decimals: schema_utils_1.Type.Number(),\n        accounts: schema_utils_1.Type.Array(schema_utils_1.Type.Object({ publicKey: schema_utils_1.Type.String(), balance: schema_utils_1.Type.String() })),\n    })),\n    coin: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n    identity: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n});\nexports.SolanaComposedTransaction = schema_utils_1.Type.Object({\n    serializedTx: schema_utils_1.Type.String(),\n    additionalInfo: schema_utils_1.Type.Object({\n        newAccountProgramName: schema_utils_1.Type.Optional(exports.SolanaProgramName),\n        tokenAccountInfo: schema_utils_1.Type.Optional(exports.SolanaTxTokenAccountInfo),\n    }),\n});\n//# sourceMappingURL=index.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}