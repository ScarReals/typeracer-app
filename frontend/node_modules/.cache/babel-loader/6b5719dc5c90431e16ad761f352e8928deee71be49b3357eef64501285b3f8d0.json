{"ast":null,"code":"// frontend/src/solana.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// ── Program ID from your IDL ────────────────────────────────────────────────\nconst PROGRAM_ID = new PublicKey(\n// Anchor puts it either top‑level or in metadata.address\nidl.address || idl.metadata && idl.metadata.address);\n\n// ── setProvider: call in your App.jsx after wallet connects ─────────────────\nexport function setProvider(wallet) {\n  if (!(wallet !== null && wallet !== void 0 && wallet.publicKey)) throw new Error(\"Wallet not connected\");\n  const network = process.env.REACT_APP_SOLANA_NETWORK || \"mainnet-beta\";\n  const rpc = process.env.REACT_APP_SOLANA_RPC || clusterApiUrl(network);\n  const connection = new Connection(rpc, \"confirmed\");\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n  anchor.setProvider(provider);\n}\n\n// ── getProvider: for escrow.js to grab the AnchorProvider you set ───────────\nexport function getProvider() {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Call setProvider(wallet) first.\");\n  return provider;\n}\nexport { PROGRAM_ID };","map":{"version":3,"names":["anchor","Connection","PublicKey","clusterApiUrl","idl","PROGRAM_ID","address","metadata","setProvider","wallet","publicKey","Error","network","process","env","REACT_APP_SOLANA_NETWORK","rpc","REACT_APP_SOLANA_RPC","connection","provider","AnchorProvider","preflightCommitment","commitment","getProvider"],"sources":["/home/kokoi/sol-wager-app/frontend/src/solana.js"],"sourcesContent":["// frontend/src/solana.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// ── Program ID from your IDL ────────────────────────────────────────────────\nconst PROGRAM_ID = new PublicKey(\n  // Anchor puts it either top‑level or in metadata.address\n  idl.address || (idl.metadata && idl.metadata.address)\n);\n\n// ── setProvider: call in your App.jsx after wallet connects ─────────────────\nexport function setProvider(wallet) {\n  if (!wallet?.publicKey) throw new Error(\"Wallet not connected\");\n  const network = process.env.REACT_APP_SOLANA_NETWORK || \"mainnet-beta\";\n  const rpc = process.env.REACT_APP_SOLANA_RPC || clusterApiUrl(network);\n  const connection = new Connection(rpc, \"confirmed\");\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\",\n  });\n  anchor.setProvider(provider);\n}\n\n// ── getProvider: for escrow.js to grab the AnchorProvider you set ───────────\nexport function getProvider() {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Call setProvider(wallet) first.\");\n  return provider;\n}\n\nexport { PROGRAM_ID };\n"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,UAAU,EAAEC,SAAS,EAAEC,aAAa,QAAQ,iBAAiB;AACtE,OAAOC,GAAG,MAAM,6BAA6B;;AAE7C;AACA,MAAMC,UAAU,GAAG,IAAIH,SAAS;AAC9B;AACAE,GAAG,CAACE,OAAO,IAAKF,GAAG,CAACG,QAAQ,IAAIH,GAAG,CAACG,QAAQ,CAACD,OAC/C,CAAC;;AAED;AACA,OAAO,SAASE,WAAWA,CAACC,MAAM,EAAE;EAClC,IAAI,EAACA,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEC,SAAS,GAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EAC/D,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,cAAc;EACtE,MAAMC,GAAG,GAAGH,OAAO,CAACC,GAAG,CAACG,oBAAoB,IAAId,aAAa,CAACS,OAAO,CAAC;EACtE,MAAMM,UAAU,GAAG,IAAIjB,UAAU,CAACe,GAAG,EAAE,WAAW,CAAC;EACnD,MAAMG,QAAQ,GAAG,IAAInB,MAAM,CAACoB,cAAc,CAACF,UAAU,EAAET,MAAM,EAAE;IAC7DY,mBAAmB,EAAE,WAAW;IAChCC,UAAU,EAAE;EACd,CAAC,CAAC;EACFtB,MAAM,CAACQ,WAAW,CAACW,QAAQ,CAAC;AAC9B;;AAEA;AACA,OAAO,SAASI,WAAWA,CAAA,EAAG;EAC5B,MAAMJ,QAAQ,GAAGnB,MAAM,CAACuB,WAAW,CAAC,CAAC;EACrC,IAAI,CAACJ,QAAQ,EAAE,MAAM,IAAIR,KAAK,CAAC,mDAAmD,CAAC;EACnF,OAAOQ,QAAQ;AACjB;AAEA,SAASd,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}