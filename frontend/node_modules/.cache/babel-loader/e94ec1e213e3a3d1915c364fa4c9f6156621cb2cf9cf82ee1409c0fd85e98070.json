{"ast":null,"code":"import * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nexport async function depositToEscrow(escrowPDA, provider) {\n  const program = new Program(idl, PROGRAM_ID, provider);\n\n  // fetch the escrow account so we know which sub-account holds the lamports\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  // build the deposit transaction\n  const tx = await program.methods.deposit().accounts({\n    escrow: escrowPDA,\n    payer: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).transaction();\n\n  // set fee payer + recent blockhash\n  tx.feePayer = provider.wallet.publicKey;\n  const {\n    blockhash,\n    lastValidBlockHeight\n  } = await provider.connection.getLatestBlockhash(\"finalized\");\n  tx.recentBlockhash = blockhash;\n\n  // **this** call will open the wallet UI for you to approve\n  const signedTx = await provider.wallet.signTransaction(tx);\n\n  // send & confirm\n  const txid = await provider.connection.sendRawTransaction(signedTx.serialize());\n  await provider.connection.confirmTransaction({\n    signature: txid,\n    blockhash,\n    lastValidBlockHeight\n  }, \"confirmed\");\n  return txid;\n}","map":{"version":3,"names":["anchor","Program","PublicKey","SystemProgram","idl","PROGRAM_ID","metadata","address","depositToEscrow","escrowPDA","provider","program","escrowAccount","account","escrow","fetch","tx","methods","deposit","accounts","payer","wallet","publicKey","systemProgram","programId","transaction","feePayer","blockhash","lastValidBlockHeight","connection","getLatestBlockhash","recentBlockhash","signedTx","signTransaction","txid","sendRawTransaction","serialize","confirmTransaction","signature"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\nexport async function depositToEscrow(escrowPDA, provider) {\n  const program = new Program(idl, PROGRAM_ID, provider);\n\n  // fetch the escrow account so we know which sub-account holds the lamports\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  // build the deposit transaction\n  const tx = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPDA,\n      payer: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n\n  // set fee payer + recent blockhash\n  tx.feePayer = provider.wallet.publicKey;\n  const {\n    blockhash,\n    lastValidBlockHeight,\n  } = await provider.connection.getLatestBlockhash(\"finalized\");\n  tx.recentBlockhash = blockhash;\n\n  // **this** call will open the wallet UI for you to approve\n  const signedTx = await provider.wallet.signTransaction(tx);\n\n  // send & confirm\n  const txid = await provider.connection.sendRawTransaction(\n    signedTx.serialize()\n  );\n  await provider.connection.confirmTransaction(\n    { signature: txid, blockhash, lastValidBlockHeight },\n    \"confirmed\"\n  );\n\n  return txid;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,SAAS,EAAEC,aAAa,QAAQ,iBAAiB;AAC1D,OAAOC,GAAG,MAAM,6BAA6B;AAE7C,MAAMC,UAAU,GAAG,IAAIH,SAAS,CAACE,GAAG,CAACE,QAAQ,CAACC,OAAO,CAAC;AAEtD,OAAO,eAAeC,eAAeA,CAACC,SAAS,EAAEC,QAAQ,EAAE;EACzD,MAAMC,OAAO,GAAG,IAAIV,OAAO,CAACG,GAAG,EAAEC,UAAU,EAAEK,QAAQ,CAAC;;EAEtD;EACA,MAAME,aAAa,GAAG,MAAMD,OAAO,CAACE,OAAO,CAACC,MAAM,CAACC,KAAK,CAACN,SAAS,CAAC;;EAEnE;EACA,MAAMO,EAAE,GAAG,MAAML,OAAO,CAACM,OAAO,CAC7BC,OAAO,CAAC,CAAC,CACTC,QAAQ,CAAC;IACRL,MAAM,EAAEL,SAAS;IACjBW,KAAK,EAAEV,QAAQ,CAACW,MAAM,CAACC,SAAS;IAChCV,aAAa,EAAEA,aAAa,CAACA,aAAa;IAC1CW,aAAa,EAAEpB,aAAa,CAACqB;EAC/B,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;;EAEhB;EACAT,EAAE,CAACU,QAAQ,GAAGhB,QAAQ,CAACW,MAAM,CAACC,SAAS;EACvC,MAAM;IACJK,SAAS;IACTC;EACF,CAAC,GAAG,MAAMlB,QAAQ,CAACmB,UAAU,CAACC,kBAAkB,CAAC,WAAW,CAAC;EAC7Dd,EAAE,CAACe,eAAe,GAAGJ,SAAS;;EAE9B;EACA,MAAMK,QAAQ,GAAG,MAAMtB,QAAQ,CAACW,MAAM,CAACY,eAAe,CAACjB,EAAE,CAAC;;EAE1D;EACA,MAAMkB,IAAI,GAAG,MAAMxB,QAAQ,CAACmB,UAAU,CAACM,kBAAkB,CACvDH,QAAQ,CAACI,SAAS,CAAC,CACrB,CAAC;EACD,MAAM1B,QAAQ,CAACmB,UAAU,CAACQ,kBAAkB,CAC1C;IAAEC,SAAS,EAAEJ,IAAI;IAAEP,SAAS;IAAEC;EAAqB,CAAC,EACpD,WACF,CAAC;EAED,OAAOM,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}