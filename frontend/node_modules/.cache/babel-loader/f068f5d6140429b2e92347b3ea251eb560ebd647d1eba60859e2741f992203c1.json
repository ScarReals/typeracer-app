{"ast":null,"code":"// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID } from \"./solana\";\n\n// Anchor program client\nconst program = new anchor.Program(idl, PROGRAM_ID);\n\n/**\n * Build the initialize & deposit instructions for a new escrow match\n */\nexport async function buildInitializeAndDepositIxns(lamports, initializerPubkey, nonce) {\n  // Derive the escrow PDA\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), initializerPubkey.toBuffer(), Buffer.from(nonce.toString())], PROGRAM_ID);\n\n  // 1) Initialize escrow account on-chain\n  const ixInit = await program.methods.initialize(new anchor.BN(nonce)).accounts({\n    initializer: initializerPubkey,\n    escrowAccount: escrowPda,\n    system_program: SystemProgram.programId // <— snake_case here\n  }).instruction();\n\n  // 2) Deposit SOL into the PDA vault\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports\n  });\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * Build instruction to join an existing escrow and deposit\n */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  return program.methods.accept().accounts({\n    accepter: anchor.getProvider().publicKey,\n    escrowAccount: escrowPda,\n    system_program: SystemProgram.programId // <— snake_case\n  }).instruction();\n}\n\n/**\n * Build instruction to cancel an escrow\n */\nexport async function buildCancelIxn(escrowPda, initializerPubkey, accepterPubkey) {\n  return program.methods.cancel().accounts({\n    initializer: initializerPubkey,\n    accepter: accepterPubkey,\n    escrowAccount: escrowPda,\n    system_program: SystemProgram.programId // <— snake_case\n  }).instruction();\n}\n\n/**\n * Build instruction to resolve (return payouts)\n */\nexport async function buildResolveIxn(escrowPda, resolverPubkey) {\n  return program.methods.resolve().accounts({\n    resolver: resolverPubkey,\n    escrowAccount: escrowPda,\n    system_program: SystemProgram.programId // <— snake_case\n  }).instruction();\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","program","Program","buildInitializeAndDepositIxns","lamports","initializerPubkey","nonce","escrowPda","findProgramAddress","Buffer","from","toBuffer","toString","ixInit","methods","initialize","BN","accounts","initializer","escrowAccount","system_program","programId","instruction","ixDeposit","transfer","fromPubkey","toPubkey","buildJoinAndDepositIxn","accept","accepter","getProvider","publicKey","buildCancelIxn","accepterPubkey","cancel","buildResolveIxn","resolverPubkey","resolve","resolver"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID } from \"./solana\";\n\n// Anchor program client\nconst program = new anchor.Program(idl, PROGRAM_ID);\n\n/**\n * Build the initialize & deposit instructions for a new escrow match\n */\nexport async function buildInitializeAndDepositIxns(\n  lamports,\n  initializerPubkey,\n  nonce\n) {\n  // Derive the escrow PDA\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [Buffer.from(\"escrow\"), initializerPubkey.toBuffer(), Buffer.from(nonce.toString())],\n    PROGRAM_ID\n  );\n\n  // 1) Initialize escrow account on-chain\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(nonce))\n    .accounts({\n      initializer: initializerPubkey,\n      escrowAccount: escrowPda,\n      system_program: SystemProgram.programId,    // <— snake_case here\n    })\n    .instruction();\n\n  // 2) Deposit SOL into the PDA vault\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports,\n  });\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * Build instruction to join an existing escrow and deposit\n */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  return program.methods\n    .accept()\n    .accounts({\n      accepter: anchor.getProvider().publicKey,\n      escrowAccount: escrowPda,\n      system_program: SystemProgram.programId,    // <— snake_case\n    })\n    .instruction();\n}\n\n/**\n * Build instruction to cancel an escrow\n */\nexport async function buildCancelIxn(\n  escrowPda,\n  initializerPubkey,\n  accepterPubkey\n) {\n  return program.methods\n    .cancel()\n    .accounts({\n      initializer: initializerPubkey,\n      accepter: accepterPubkey,\n      escrowAccount: escrowPda,\n      system_program: SystemProgram.programId,    // <— snake_case\n    })\n    .instruction();\n}\n\n/**\n * Build instruction to resolve (return payouts)\n */\nexport async function buildResolveIxn(escrowPda, resolverPubkey) {\n  return program.methods\n    .resolve()\n    .accounts({\n      resolver: resolverPubkey,\n      escrowAccount: escrowPda,\n      system_program: SystemProgram.programId,    // <— snake_case\n    })\n    .instruction();\n}\n"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,SAAS,EAAEC,aAAa,QAAQ,iBAAiB;AAC1D,OAAOC,GAAG,MAAM,6BAA6B;AAC7C,SAASC,UAAU,QAAQ,UAAU;;AAErC;AACA,MAAMC,OAAO,GAAG,IAAIL,MAAM,CAACM,OAAO,CAACH,GAAG,EAAEC,UAAU,CAAC;;AAEnD;AACA;AACA;AACA,OAAO,eAAeG,6BAA6BA,CACjDC,QAAQ,EACRC,iBAAiB,EACjBC,KAAK,EACL;EACA;EACA,MAAM,CAACC,SAAS,CAAC,GAAG,MAAMV,SAAS,CAACW,kBAAkB,CACpD,CAACC,MAAM,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAEL,iBAAiB,CAACM,QAAQ,CAAC,CAAC,EAAEF,MAAM,CAACC,IAAI,CAACJ,KAAK,CAACM,QAAQ,CAAC,CAAC,CAAC,CAAC,EACpFZ,UACF,CAAC;;EAED;EACA,MAAMa,MAAM,GAAG,MAAMZ,OAAO,CAACa,OAAO,CACjCC,UAAU,CAAC,IAAInB,MAAM,CAACoB,EAAE,CAACV,KAAK,CAAC,CAAC,CAChCW,QAAQ,CAAC;IACRC,WAAW,EAAEb,iBAAiB;IAC9Bc,aAAa,EAAEZ,SAAS;IACxBa,cAAc,EAAEtB,aAAa,CAACuB,SAAS,CAAK;EAC9C,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;;EAEhB;EACA,MAAMC,SAAS,GAAGzB,aAAa,CAAC0B,QAAQ,CAAC;IACvCC,UAAU,EAAEpB,iBAAiB;IAC7BqB,QAAQ,EAAEnB,SAAS;IACnBH;EACF,CAAC,CAAC;EAEF,OAAO;IAAES,MAAM;IAAEU,SAAS;IAAEhB;EAAU,CAAC;AACzC;;AAEA;AACA;AACA;AACA,OAAO,eAAeoB,sBAAsBA,CAACpB,SAAS,EAAE;EACtD,OAAON,OAAO,CAACa,OAAO,CACnBc,MAAM,CAAC,CAAC,CACRX,QAAQ,CAAC;IACRY,QAAQ,EAAEjC,MAAM,CAACkC,WAAW,CAAC,CAAC,CAACC,SAAS;IACxCZ,aAAa,EAAEZ,SAAS;IACxBa,cAAc,EAAEtB,aAAa,CAACuB,SAAS,CAAK;EAC9C,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;AAClB;;AAEA;AACA;AACA;AACA,OAAO,eAAeU,cAAcA,CAClCzB,SAAS,EACTF,iBAAiB,EACjB4B,cAAc,EACd;EACA,OAAOhC,OAAO,CAACa,OAAO,CACnBoB,MAAM,CAAC,CAAC,CACRjB,QAAQ,CAAC;IACRC,WAAW,EAAEb,iBAAiB;IAC9BwB,QAAQ,EAAEI,cAAc;IACxBd,aAAa,EAAEZ,SAAS;IACxBa,cAAc,EAAEtB,aAAa,CAACuB,SAAS,CAAK;EAC9C,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;AAClB;;AAEA;AACA;AACA;AACA,OAAO,eAAea,eAAeA,CAAC5B,SAAS,EAAE6B,cAAc,EAAE;EAC/D,OAAOnC,OAAO,CAACa,OAAO,CACnBuB,OAAO,CAAC,CAAC,CACTpB,QAAQ,CAAC;IACRqB,QAAQ,EAAEF,cAAc;IACxBjB,aAAa,EAAEZ,SAAS;IACxBa,cAAc,EAAEtB,aAAa,CAACuB,SAAS,CAAK;EAC9C,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}