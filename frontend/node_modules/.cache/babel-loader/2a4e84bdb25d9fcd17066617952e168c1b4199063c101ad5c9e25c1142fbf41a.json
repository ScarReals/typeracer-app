{"ast":null,"code":"// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, connection } from \"./solana\";\n\n// Helper: Returns the current Anchor program and provider using the wallet instance.\n// This avoids \"stale provider\" errors on hot reloads.\nexport function getProgram(wallet) {\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n  anchor.setProvider(provider);\n  return {\n    program: new anchor.Program(idl, PROGRAM_ID, provider),\n    provider\n  };\n}\n\n/**\n * Initialize & deposit (unchanged from yours, but always uses .publicKey)\n */\nexport async function buildInitializeAndDepositIxns(wagerLamports, walletPublicKey, nonce) {\n  // Compute escrow PDA using player1 pubkey + nonce\n  const escrowPda = (await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), walletPublicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], PROGRAM_ID))[0];\n\n  // Build instructions\n  const {\n    program,\n    provider\n  } = getProgram({\n    publicKey: walletPublicKey,\n    signTransaction: async () => {},\n    // Dummy for compatibility\n    signAllTransactions: async () => {}\n  });\n  const ixInit = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: walletPublicKey,\n    authority: walletPublicKey,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: walletPublicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * Join & deposit\n */\nexport async function buildJoinAndDepositIxn(escrowPda, wallet) {\n  const {\n    program,\n    provider\n  } = getProgram(wallet);\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: wallet.publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\n\n/**\n * Cancel\n */\nexport async function buildCancelIxn(escrowPda, player1, player2, wallet) {\n  const {\n    program,\n    provider\n  } = getProgram(wallet);\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrowAccount: escrowPda,\n    authority: wallet.publicKey\n  }).instruction();\n  return ix;\n}\n\n/**\n * NEW: resolve signed by your house wallet\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey, wallet) {\n  const {\n    program,\n    provider\n  } = getProgram(wallet);\n  const ix = await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPda,\n    winner: winnerPubkey,\n    house: wallet.publicKey,\n    escrowAccount: escrowPda\n  }).instruction();\n  return ix;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","connection","getProgram","wallet","provider","AnchorProvider","preflightCommitment","commitment","setProvider","program","Program","buildInitializeAndDepositIxns","wagerLamports","walletPublicKey","nonce","escrowPda","findProgramAddress","Buffer","from","toBuffer","BN","toArrayLike","publicKey","signTransaction","signAllTransactions","ixInit","methods","initialize","accounts","escrow","player1","authority","systemProgram","programId","instruction","ixDeposit","deposit","payer","escrowAccount","buildJoinAndDepositIxn","ix","joinAndDeposit","player2","buildCancelIxn","cancel","buildResolveIxn","winnerPubkey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, connection } from \"./solana\";\n\n// Helper: Returns the current Anchor program and provider using the wallet instance.\n// This avoids \"stale provider\" errors on hot reloads.\nexport function getProgram(wallet) {\n  const provider = new anchor.AnchorProvider(\n    connection,\n    wallet,\n    { preflightCommitment: \"confirmed\", commitment: \"confirmed\" }\n  );\n  anchor.setProvider(provider);\n  return {\n    program: new anchor.Program(idl, PROGRAM_ID, provider),\n    provider,\n  };\n}\n\n/**\n * Initialize & deposit (unchanged from yours, but always uses .publicKey)\n */\nexport async function buildInitializeAndDepositIxns(\n  wagerLamports,\n  walletPublicKey,\n  nonce\n) {\n  // Compute escrow PDA using player1 pubkey + nonce\n  const escrowPda = (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"escrow\"),\n        walletPublicKey.toBuffer(),\n        new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n      ],\n      PROGRAM_ID\n    )\n  )[0];\n\n  // Build instructions\n  const { program, provider } = getProgram({\n    publicKey: walletPublicKey,\n    signTransaction: async () => {}, // Dummy for compatibility\n    signAllTransactions: async () => {},\n  });\n\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,\n      player1: walletPublicKey,\n      authority: walletPublicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: walletPublicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * Join & deposit\n */\nexport async function buildJoinAndDepositIxn(escrowPda, wallet) {\n  const { program, provider } = getProgram(wallet);\n\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  return ix;\n}\n\n/**\n * Cancel\n */\nexport async function buildCancelIxn(escrowPda, player1, player2, wallet) {\n  const { program, provider } = getProgram(wallet);\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: escrowPda,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  return ix;\n}\n\n/**\n * NEW: resolve signed by your house wallet\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey, wallet) {\n  const { program, provider } = getProgram(wallet);\n\n  const ix = await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPda,\n      winner: winnerPubkey,\n      house: wallet.publicKey,\n      escrowAccount: escrowPda,\n    })\n    .instruction();\n  return ix;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}