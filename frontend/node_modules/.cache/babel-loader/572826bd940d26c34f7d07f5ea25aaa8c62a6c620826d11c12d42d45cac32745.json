{"ast":null,"code":"// src/solana.js\n\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as anchor from \"@coral-xyz/anchor\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// ── RPC endpoint ───────────────────────────────────────────\nconst RPC_URL = process.env.REACT_APP_SOLANA_RPC;\nif (!RPC_URL) {\n  throw new Error(\"Missing REACT_APP_SOLANA_RPC in your .env\");\n}\nexport const connection = new Connection(RPC_URL, \"confirmed\");\n\n// ── Program ID ────────────────────────────────────────────\n// anchor-generated IDL puts the on‑chain address at the top level\nif (!idl.address) {\n  throw new Error(\"IDL is missing top‑level `address` field\");\n}\nexport const PROGRAM_ID = new PublicKey(idl.address);\n\n// ── Anchor Provider Setup ─────────────────────────────────\nlet provider;\n\n/**\n * Initialize and set the Anchor provider using the connected wallet.\n * @param {import('@solana/wallet-adapter-base').Wallet} wallet  \n */\nexport function setProvider(wallet) {\n  provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n  anchor.setProvider(provider);\n}\n\n// Optionally expose the provider if needed elsewhere\nexport function getProvider() {\n  return provider;\n}","map":{"version":3,"names":["Connection","PublicKey","anchor","idl","RPC_URL","process","env","REACT_APP_SOLANA_RPC","Error","connection","address","PROGRAM_ID","provider","setProvider","wallet","AnchorProvider","preflightCommitment","commitment","getProvider"],"sources":["/home/kokoi/sol-wager-app/frontend/src/solana.js"],"sourcesContent":["// src/solana.js\n\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as anchor from \"@coral-xyz/anchor\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// ── RPC endpoint ───────────────────────────────────────────\nconst RPC_URL = process.env.REACT_APP_SOLANA_RPC;\nif (!RPC_URL) {\n  throw new Error(\"Missing REACT_APP_SOLANA_RPC in your .env\");\n}\nexport const connection = new Connection(RPC_URL, \"confirmed\");\n\n// ── Program ID ────────────────────────────────────────────\n// anchor-generated IDL puts the on‑chain address at the top level\nif (!idl.address) {\n  throw new Error(\"IDL is missing top‑level `address` field\");\n}\nexport const PROGRAM_ID = new PublicKey(idl.address);\n\n// ── Anchor Provider Setup ─────────────────────────────────\nlet provider;\n\n/**\n * Initialize and set the Anchor provider using the connected wallet.\n * @param {import('@solana/wallet-adapter-base').Wallet} wallet  \n */\nexport function setProvider(wallet) {\n  provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\",\n  });\n  anchor.setProvider(provider);\n}\n\n// Optionally expose the provider if needed elsewhere\nexport function getProvider() {\n  return provider;\n}\n"],"mappings":"AAAA;;AAEA,SAASA,UAAU,EAAEC,SAAS,QAAQ,iBAAiB;AACvD,OAAO,KAAKC,MAAM,MAAM,mBAAmB;AAC3C,OAAOC,GAAG,MAAM,6BAA6B;;AAE7C;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB;AAChD,IAAI,CAACH,OAAO,EAAE;EACZ,MAAM,IAAII,KAAK,CAAC,2CAA2C,CAAC;AAC9D;AACA,OAAO,MAAMC,UAAU,GAAG,IAAIT,UAAU,CAACI,OAAO,EAAE,WAAW,CAAC;;AAE9D;AACA;AACA,IAAI,CAACD,GAAG,CAACO,OAAO,EAAE;EAChB,MAAM,IAAIF,KAAK,CAAC,0CAA0C,CAAC;AAC7D;AACA,OAAO,MAAMG,UAAU,GAAG,IAAIV,SAAS,CAACE,GAAG,CAACO,OAAO,CAAC;;AAEpD;AACA,IAAIE,QAAQ;;AAEZ;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAE;EAClCF,QAAQ,GAAG,IAAIV,MAAM,CAACa,cAAc,CAACN,UAAU,EAAEK,MAAM,EAAE;IACvDE,mBAAmB,EAAE,WAAW;IAChCC,UAAU,EAAE;EACd,CAAC,CAAC;EACFf,MAAM,CAACW,WAAW,CAACD,QAAQ,CAAC;AAC9B;;AAEA;AACA,OAAO,SAASM,WAAWA,CAAA,EAAG;EAC5B,OAAON,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}