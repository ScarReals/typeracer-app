{"ast":null,"code":"// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID } from \"./solana\";\n\n// Each helper takes the user's wallet + connection from the React context\n\n/** Initialize & deposit */\nexport async function buildInitializeAndDepositIxns(wagerLamports, wallet, connection) {\n  const nonce = Math.floor(Math.random() * 1000000);\n  const escrowPda = (await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], PROGRAM_ID))[0];\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const ixInit = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: wallet.publicKey,\n    authority: wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: wallet.publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/** Join & deposit */\nexport async function buildJoinAndDepositIxn(escrowPda, wallet, connection) {\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: wallet.publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\n\n/** Cancel */\nexport async function buildCancelIxn(escrowPda, player1, player2, wallet, connection) {\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrowAccount: escrowPda,\n    authority: wallet.publicKey\n  }).instruction();\n  return ix;\n}\n\n/** ── NEW: resolve signed by your house wallet ───────────── */\nexport async function buildResolveIxn(escrowPda, winnerPubkey, wallet, connection) {\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const winnerKey = new PublicKey(winnerPubkey);\n  const ix = await program.methods.resolve(winnerKey).accounts({\n    escrow: escrowPda,\n    winner: winnerKey,\n    house: wallet.publicKey,\n    escrowAccount: escrowPda\n  }).instruction();\n  return ix;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","buildInitializeAndDepositIxns","wagerLamports","wallet","connection","nonce","Math","floor","random","escrowPda","findProgramAddress","Buffer","from","publicKey","toBuffer","BN","toArrayLike","provider","AnchorProvider","preflightCommitment","commitment","program","Program","ixInit","methods","initialize","accounts","escrow","player1","authority","systemProgram","programId","instruction","ixDeposit","deposit","payer","escrowAccount","buildJoinAndDepositIxn","ix","joinAndDeposit","player2","buildCancelIxn","cancel","buildResolveIxn","winnerPubkey","winnerKey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID } from \"./solana\";\n\n// Each helper takes the user's wallet + connection from the React context\n\n/** Initialize & deposit */\nexport async function buildInitializeAndDepositIxns(wagerLamports, wallet, connection) {\n  const nonce = Math.floor(Math.random() * 1_000_000);\n  const escrowPda = (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"escrow\"),\n        wallet.publicKey.toBuffer(),\n        new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n      ],\n      PROGRAM_ID\n    )\n  )[0];\n\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,\n      player1: wallet.publicKey,\n      authority: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/** Join & deposit */\nexport async function buildJoinAndDepositIxn(escrowPda, wallet, connection) {\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  return ix;\n}\n\n/** Cancel */\nexport async function buildCancelIxn(escrowPda, player1, player2, wallet, connection) {\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: escrowPda,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  return ix;\n}\n\n/** ── NEW: resolve signed by your house wallet ───────────── */\nexport async function buildResolveIxn(escrowPda, winnerPubkey, wallet, connection) {\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const winnerKey = new PublicKey(winnerPubkey);\n  const ix = await program.methods\n    .resolve(winnerKey)\n    .accounts({\n      escrow: escrowPda,\n      winner: winnerKey,\n      house: wallet.publicKey,\n      escrowAccount: escrowPda,\n    })\n    .instruction();\n  return ix;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}