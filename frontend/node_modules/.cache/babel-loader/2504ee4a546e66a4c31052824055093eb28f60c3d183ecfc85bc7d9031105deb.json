{"ast":null,"code":"// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nconst BN = anchor.BN; // explicitly get BN class\n\n/**\n * Build initialize and deposit instructions.\n * @param {anchor.Program} program - Anchor program instance.\n * @param {number} wagerLamports - Amount in lamports.\n * @param {PublicKey} publicKey - Player 1's public key.\n * @param {number} nonce - Unique nonce for PDA.\n */\nexport async function buildInitializeAndDepositIxns(program, wagerLamports, publicKey, nonce) {\n  const nonceBN = new BN(nonce); // create BN instance explicitly\n  const wagerBN = new BN(wagerLamports);\n  const escrowPdaSeeds = [Buffer.from(\"escrow\"), publicKey.toBuffer(), nonceBN.toArrayLike(Buffer, \"le\", 8)];\n  const [escrowPda] = await PublicKey.findProgramAddress(escrowPdaSeeds, PROGRAM_ID);\n  const ixInit = await program.methods.initialize(wagerBN, nonceBN).accounts({\n    escrow: escrowPda,\n    player1: publicKey,\n    authority: publicKey,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * Build join and deposit instruction.\n * @param {anchor.Program} program - Anchor program instance.\n * @param {PublicKey} publicKey - Player 2's public key.\n * @param {PublicKey} escrowPda - Escrow PDA public key.\n */\nexport async function buildJoinAndDepositIxn(program, publicKey, escrowPda) {\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\n\n/**\n * Build cancel instruction.\n * @param {anchor.Program} program - Anchor program instance.\n * @param {PublicKey} escrowPda - Escrow PDA.\n * @param {PublicKey} player1 - Player1's public key.\n * @param {PublicKey} player2 - Player2's public key.\n * @param {PublicKey} authority - Authority's public key (signer).\n */\nexport async function buildCancelIxn(program, escrowPda, player1, player2, authority) {\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrowAccount: escrowPda,\n    authority\n  }).instruction();\n  return ix;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","metadata","address","BN","buildInitializeAndDepositIxns","program","wagerLamports","publicKey","nonce","nonceBN","wagerBN","escrowPdaSeeds","Buffer","from","toBuffer","toArrayLike","escrowPda","findProgramAddress","ixInit","methods","initialize","accounts","escrow","player1","authority","systemProgram","programId","instruction","ixDeposit","deposit","payer","escrowAccount","buildJoinAndDepositIxn","ix","joinAndDeposit","player2","buildCancelIxn","cancel"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nconst BN = anchor.BN; // explicitly get BN class\n\n/**\n * Build initialize and deposit instructions.\n * @param {anchor.Program} program - Anchor program instance.\n * @param {number} wagerLamports - Amount in lamports.\n * @param {PublicKey} publicKey - Player 1's public key.\n * @param {number} nonce - Unique nonce for PDA.\n */\nexport async function buildInitializeAndDepositIxns(program, wagerLamports, publicKey, nonce) {\n  const nonceBN = new BN(nonce); // create BN instance explicitly\n  const wagerBN = new BN(wagerLamports);\n\n  const escrowPdaSeeds = [\n    Buffer.from(\"escrow\"),\n    publicKey.toBuffer(),\n    nonceBN.toArrayLike(Buffer, \"le\", 8),\n  ];\n  const [escrowPda] = await PublicKey.findProgramAddress(escrowPdaSeeds, PROGRAM_ID);\n\n  const ixInit = await program.methods\n    .initialize(wagerBN, nonceBN)\n    .accounts({\n      escrow: escrowPda,\n      player1: publicKey,\n      authority: publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * Build join and deposit instruction.\n * @param {anchor.Program} program - Anchor program instance.\n * @param {PublicKey} publicKey - Player 2's public key.\n * @param {PublicKey} escrowPda - Escrow PDA public key.\n */\nexport async function buildJoinAndDepositIxn(program, publicKey, escrowPda) {\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  return ix;\n}\n\n/**\n * Build cancel instruction.\n * @param {anchor.Program} program - Anchor program instance.\n * @param {PublicKey} escrowPda - Escrow PDA.\n * @param {PublicKey} player1 - Player1's public key.\n * @param {PublicKey} player2 - Player2's public key.\n * @param {PublicKey} authority - Authority's public key (signer).\n */\nexport async function buildCancelIxn(program, escrowPda, player1, player2, authority) {\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: escrowPda,\n      authority,\n    })\n    .instruction();\n  return ix;\n}\n"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,SAAS,EAAEC,aAAa,QAAQ,iBAAiB;AAC1D,OAAOC,GAAG,MAAM,6BAA6B;AAE7C,MAAMC,UAAU,GAAG,IAAIH,SAAS,CAACE,GAAG,CAACE,QAAQ,CAACC,OAAO,CAAC;AACtD,MAAMC,EAAE,GAAGP,MAAM,CAACO,EAAE,CAAC,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,6BAA6BA,CAACC,OAAO,EAAEC,aAAa,EAAEC,SAAS,EAAEC,KAAK,EAAE;EAC5F,MAAMC,OAAO,GAAG,IAAIN,EAAE,CAACK,KAAK,CAAC,CAAC,CAAC;EAC/B,MAAME,OAAO,GAAG,IAAIP,EAAE,CAACG,aAAa,CAAC;EAErC,MAAMK,cAAc,GAAG,CACrBC,MAAM,CAACC,IAAI,CAAC,QAAQ,CAAC,EACrBN,SAAS,CAACO,QAAQ,CAAC,CAAC,EACpBL,OAAO,CAACM,WAAW,CAACH,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CACrC;EACD,MAAM,CAACI,SAAS,CAAC,GAAG,MAAMnB,SAAS,CAACoB,kBAAkB,CAACN,cAAc,EAAEX,UAAU,CAAC;EAElF,MAAMkB,MAAM,GAAG,MAAMb,OAAO,CAACc,OAAO,CACjCC,UAAU,CAACV,OAAO,EAAED,OAAO,CAAC,CAC5BY,QAAQ,CAAC;IACRC,MAAM,EAAEN,SAAS;IACjBO,OAAO,EAAEhB,SAAS;IAClBiB,SAAS,EAAEjB,SAAS;IACpBkB,aAAa,EAAE3B,aAAa,CAAC4B;EAC/B,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;EAEhB,MAAMC,SAAS,GAAG,MAAMvB,OAAO,CAACc,OAAO,CACpCU,OAAO,CAAC,CAAC,CACTR,QAAQ,CAAC;IACRC,MAAM,EAAEN,SAAS;IACjBc,KAAK,EAAEvB,SAAS;IAChBwB,aAAa,EAAEf,SAAS;IACxBS,aAAa,EAAE3B,aAAa,CAAC4B;EAC/B,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;EAEhB,OAAO;IAAET,MAAM;IAAEU,SAAS;IAAEZ;EAAU,CAAC;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAegB,sBAAsBA,CAAC3B,OAAO,EAAEE,SAAS,EAAES,SAAS,EAAE;EAC1E,MAAMiB,EAAE,GAAG,MAAM5B,OAAO,CAACc,OAAO,CAC7Be,cAAc,CAAC,CAAC,CAChBb,QAAQ,CAAC;IACRC,MAAM,EAAEN,SAAS;IACjBmB,OAAO,EAAE5B,SAAS;IAClBwB,aAAa,EAAEf,SAAS;IACxBS,aAAa,EAAE3B,aAAa,CAAC4B;EAC/B,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;EAChB,OAAOM,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeG,cAAcA,CAAC/B,OAAO,EAAEW,SAAS,EAAEO,OAAO,EAAEY,OAAO,EAAEX,SAAS,EAAE;EACpF,MAAMS,EAAE,GAAG,MAAM5B,OAAO,CAACc,OAAO,CAC7BkB,MAAM,CAAC,CAAC,CACRhB,QAAQ,CAAC;IACRC,MAAM,EAAEN,SAAS;IACjBO,OAAO;IACPY,OAAO;IACPJ,aAAa,EAAEf,SAAS;IACxBQ;EACF,CAAC,CAAC,CACDG,WAAW,CAAC,CAAC;EAChB,OAAOM,EAAE;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}