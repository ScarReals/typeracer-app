{"ast":null,"code":"// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Correctly parse program id from the IDL (works for both address and metadata.address)\nexport const PROGRAM_ID = new PublicKey(idl.address || idl.metadata && idl.metadata.address);\n\n// Dynamically get the program with the current wallet provider\nfunction getProgram() {\n  const provider = anchor.getProvider();\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n// Helper for system_program naming in your IDL\nconst SYS_PROGRAM = SystemProgram.programId;\n\n// -------- Existing functions ---------\n\nexport async function buildInitializeAndDepositIxns(wagerLamports, playerPubkey, nonce) {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Connect your wallet.\");\n  const program = getProgram();\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), playerPubkey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], PROGRAM_ID);\n  const ixInit = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: playerPubkey,\n    authority: playerPubkey,\n    system_program: SYS_PROGRAM\n  }).instruction();\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: playerPubkey,\n    escrow_account: escrowPda,\n    system_program: SYS_PROGRAM\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Connect your wallet.\");\n  const program = getProgram();\n  const playerPubkey = provider.wallet.publicKey;\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: playerPubkey,\n    escrow_account: escrowPda,\n    system_program: SYS_PROGRAM\n  }).instruction();\n  return ix;\n}\nexport async function buildCancelIxn(escrowPda, player1, player2) {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Connect your wallet.\");\n  const program = getProgram();\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrow_account: escrowPda,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  return ix;\n}\n\n// --------- THE ONLY CHANGE: RESOLVE INSTRUCTION ---------\n// This matches your IDL: resolve(winner: pubkey) { escrow, winner, house, escrow_account, authority }\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Connect your wallet.\");\n  const program = getProgram();\n\n  // Use the provider wallet as \"house\" and \"authority\" (see your IDL)\n  const house = provider.wallet.publicKey;\n  const ix = await program.methods.resolve(new PublicKey(winnerPubkey)).accounts({\n    escrow: escrowPda,\n    winner: new PublicKey(winnerPubkey),\n    house: house,\n    escrow_account: escrowPda,\n    authority: house\n  }).instruction();\n  return ix;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","address","metadata","getProgram","provider","getProvider","Program","SYS_PROGRAM","programId","buildInitializeAndDepositIxns","wagerLamports","playerPubkey","nonce","Error","program","escrowPda","findProgramAddress","Buffer","from","toBuffer","BN","toArrayLike","ixInit","methods","initialize","accounts","escrow","player1","authority","system_program","instruction","ixDeposit","deposit","payer","escrow_account","buildJoinAndDepositIxn","wallet","publicKey","ix","joinAndDeposit","player2","buildCancelIxn","cancel","buildResolveIxn","winnerPubkey","house","resolve","winner"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Correctly parse program id from the IDL (works for both address and metadata.address)\nexport const PROGRAM_ID = new PublicKey(\n  idl.address || (idl.metadata && idl.metadata.address)\n);\n\n// Dynamically get the program with the current wallet provider\nfunction getProgram() {\n  const provider = anchor.getProvider();\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n// Helper for system_program naming in your IDL\nconst SYS_PROGRAM = SystemProgram.programId;\n\n// -------- Existing functions ---------\n\nexport async function buildInitializeAndDepositIxns(wagerLamports, playerPubkey, nonce) {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Connect your wallet.\");\n  const program = getProgram();\n\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      playerPubkey.toBuffer(),\n      new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)\n    ],\n    PROGRAM_ID\n  );\n\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,\n      player1: playerPubkey,\n      authority: playerPubkey,\n      system_program: SYS_PROGRAM,\n    })\n    .instruction();\n\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: playerPubkey,\n      escrow_account: escrowPda,\n      system_program: SYS_PROGRAM,\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Connect your wallet.\");\n  const program = getProgram();\n\n  const playerPubkey = provider.wallet.publicKey;\n\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: playerPubkey,\n      escrow_account: escrowPda,\n      system_program: SYS_PROGRAM,\n    })\n    .instruction();\n\n  return ix;\n}\n\nexport async function buildCancelIxn(escrowPda, player1, player2) {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Connect your wallet.\");\n  const program = getProgram();\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrow_account: escrowPda,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n\n  return ix;\n}\n\n// --------- THE ONLY CHANGE: RESOLVE INSTRUCTION ---------\n// This matches your IDL: resolve(winner: pubkey) { escrow, winner, house, escrow_account, authority }\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Connect your wallet.\");\n  const program = getProgram();\n\n  // Use the provider wallet as \"house\" and \"authority\" (see your IDL)\n  const house = provider.wallet.publicKey;\n\n  const ix = await program.methods\n    .resolve(new PublicKey(winnerPubkey))\n    .accounts({\n      escrow: escrowPda,\n      winner: new PublicKey(winnerPubkey),\n      house: house,\n      escrow_account: escrowPda,\n      authority: house,\n    })\n    .instruction();\n\n  return ix;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}