{"ast":null,"code":"import * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nconst BN = anchor.BN; // explicitly grab BN\n\n/**\n * Build initialize and deposit instructions.\n * @param {number} wagerLamports - Amount in lamports.\n * @param {PublicKey} publicKey - Player 1's public key.\n * @param {number} nonce - Unique nonce for PDA.\n */\nexport async function buildInitializeAndDepositIxns(wagerLamports, publicKey, nonce) {\n  const nonceBN = new BN(nonce);\n  const wagerBN = new BN(wagerLamports);\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), publicKey.toBuffer(), nonceBN.toArrayLike(Buffer, \"le\", 8)], PROGRAM_ID);\n  const program = anchor.workspace.typeracer_escrow;\n  const ixInit = await program.methods.initialize(wagerBN, nonceBN).accounts({\n    escrow: escrowPda,\n    player1: publicKey,\n    authority: publicKey,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * Build join and deposit instruction.\n * @param {PublicKey} escrowPda - Escrow PDA public key.\n */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const program = anchor.workspace.typeracer_escrow;\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: anchor.getProvider().wallet.publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\n\n/**\n * Build cancel instruction.\n * @param {PublicKey} escrowPda - Escrow PDA.\n * @param {PublicKey} player1 - Player1's public key.\n * @param {PublicKey} player2 - Player2's public key.\n */\nexport async function buildCancelIxn(escrowPda, player1, player2) {\n  const program = anchor.workspace.typeracer_escrow;\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrowAccount: escrowPda,\n    authority: anchor.getProvider().wallet.publicKey\n  }).instruction();\n  return ix;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","metadata","address","BN","buildInitializeAndDepositIxns","wagerLamports","publicKey","nonce","nonceBN","wagerBN","escrowPda","findProgramAddress","Buffer","from","toBuffer","toArrayLike","program","workspace","typeracer_escrow","ixInit","methods","initialize","accounts","escrow","player1","authority","systemProgram","programId","instruction","ixDeposit","deposit","payer","escrowAccount","buildJoinAndDepositIxn","ix","joinAndDeposit","player2","getProvider","wallet","buildCancelIxn","cancel"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nconst BN = anchor.BN; // explicitly grab BN\n\n/**\n * Build initialize and deposit instructions.\n * @param {number} wagerLamports - Amount in lamports.\n * @param {PublicKey} publicKey - Player 1's public key.\n * @param {number} nonce - Unique nonce for PDA.\n */\nexport async function buildInitializeAndDepositIxns(\n  wagerLamports,\n  publicKey,\n  nonce\n) {\n  const nonceBN = new BN(nonce);\n  const wagerBN = new BN(wagerLamports);\n\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      publicKey.toBuffer(),\n      nonceBN.toArrayLike(Buffer, \"le\", 8),\n    ],\n    PROGRAM_ID\n  );\n\n  const program = anchor.workspace.typeracer_escrow;\n\n  const ixInit = await program.methods\n    .initialize(wagerBN, nonceBN)\n    .accounts({\n      escrow: escrowPda,\n      player1: publicKey,\n      authority: publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * Build join and deposit instruction.\n * @param {PublicKey} escrowPda - Escrow PDA public key.\n */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const program = anchor.workspace.typeracer_escrow;\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: anchor.getProvider().wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  return ix;\n}\n\n/**\n * Build cancel instruction.\n * @param {PublicKey} escrowPda - Escrow PDA.\n * @param {PublicKey} player1 - Player1's public key.\n * @param {PublicKey} player2 - Player2's public key.\n */\nexport async function buildCancelIxn(\n  escrowPda,\n  player1,\n  player2\n) {\n  const program = anchor.workspace.typeracer_escrow;\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: escrowPda,\n      authority: anchor.getProvider().wallet.publicKey,\n    })\n    .instruction();\n  return ix;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,SAAS,EAAEC,aAAa,QAAQ,iBAAiB;AAC1D,OAAOC,GAAG,MAAM,6BAA6B;AAE7C,MAAMC,UAAU,GAAG,IAAIH,SAAS,CAACE,GAAG,CAACE,QAAQ,CAACC,OAAO,CAAC;AACtD,MAAMC,EAAE,GAAGP,MAAM,CAACO,EAAE,CAAC,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,6BAA6BA,CACjDC,aAAa,EACbC,SAAS,EACTC,KAAK,EACL;EACA,MAAMC,OAAO,GAAG,IAAIL,EAAE,CAACI,KAAK,CAAC;EAC7B,MAAME,OAAO,GAAG,IAAIN,EAAE,CAACE,aAAa,CAAC;EAErC,MAAM,CAACK,SAAS,CAAC,GAAG,MAAMb,SAAS,CAACc,kBAAkB,CACpD,CACEC,MAAM,CAACC,IAAI,CAAC,QAAQ,CAAC,EACrBP,SAAS,CAACQ,QAAQ,CAAC,CAAC,EACpBN,OAAO,CAACO,WAAW,CAACH,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CACrC,EACDZ,UACF,CAAC;EAED,MAAMgB,OAAO,GAAGpB,MAAM,CAACqB,SAAS,CAACC,gBAAgB;EAEjD,MAAMC,MAAM,GAAG,MAAMH,OAAO,CAACI,OAAO,CACjCC,UAAU,CAACZ,OAAO,EAAED,OAAO,CAAC,CAC5Bc,QAAQ,CAAC;IACRC,MAAM,EAAEb,SAAS;IACjBc,OAAO,EAAElB,SAAS;IAClBmB,SAAS,EAAEnB,SAAS;IACpBoB,aAAa,EAAE5B,aAAa,CAAC6B;EAC/B,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;EAEhB,MAAMC,SAAS,GAAG,MAAMb,OAAO,CAACI,OAAO,CACpCU,OAAO,CAAC,CAAC,CACTR,QAAQ,CAAC;IACRC,MAAM,EAAEb,SAAS;IACjBqB,KAAK,EAAEzB,SAAS;IAChB0B,aAAa,EAAEtB,SAAS;IACxBgB,aAAa,EAAE5B,aAAa,CAAC6B;EAC/B,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;EAEhB,OAAO;IAAET,MAAM;IAAEU,SAAS;IAAEnB;EAAU,CAAC;AACzC;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAeuB,sBAAsBA,CAACvB,SAAS,EAAE;EACtD,MAAMM,OAAO,GAAGpB,MAAM,CAACqB,SAAS,CAACC,gBAAgB;EACjD,MAAMgB,EAAE,GAAG,MAAMlB,OAAO,CAACI,OAAO,CAC7Be,cAAc,CAAC,CAAC,CAChBb,QAAQ,CAAC;IACRC,MAAM,EAAEb,SAAS;IACjB0B,OAAO,EAAExC,MAAM,CAACyC,WAAW,CAAC,CAAC,CAACC,MAAM,CAAChC,SAAS;IAC9C0B,aAAa,EAAEtB,SAAS;IACxBgB,aAAa,EAAE5B,aAAa,CAAC6B;EAC/B,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;EAChB,OAAOM,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeK,cAAcA,CAClC7B,SAAS,EACTc,OAAO,EACPY,OAAO,EACP;EACA,MAAMpB,OAAO,GAAGpB,MAAM,CAACqB,SAAS,CAACC,gBAAgB;EACjD,MAAMgB,EAAE,GAAG,MAAMlB,OAAO,CAACI,OAAO,CAC7BoB,MAAM,CAAC,CAAC,CACRlB,QAAQ,CAAC;IACRC,MAAM,EAAEb,SAAS;IACjBc,OAAO;IACPY,OAAO;IACPJ,aAAa,EAAEtB,SAAS;IACxBe,SAAS,EAAE7B,MAAM,CAACyC,WAAW,CAAC,CAAC,CAACC,MAAM,CAAChC;EACzC,CAAC,CAAC,CACDsB,WAAW,CAAC,CAAC;EAChB,OAAOM,EAAE;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}