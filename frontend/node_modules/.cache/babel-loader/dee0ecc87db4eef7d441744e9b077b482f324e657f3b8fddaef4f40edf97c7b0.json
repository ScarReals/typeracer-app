{"ast":null,"code":"// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Your program ID (from your IDL or .env)\nexport const PROGRAM_ID = new PublicKey(idl.address || idl.metadata && idl.metadata.address);\n\n/**\n * Helper to get an Anchor program client using a custom wallet.\n * Pass in the wallet (from useWallet()).\n */\nfunction getProgram(connection, wallet) {\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n  anchor.setProvider(provider);\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Initialize & deposit (player1)\n * @param {number} wagerLamports\n * @param {PublicKey} walletPublicKey\n * @param {number} nonce\n * @param {object} connection\n * @param {object} wallet\n */\nexport async function buildInitializeAndDepositIxns(wagerLamports, walletPublicKey, nonce, connection, wallet) {\n  const program = getProgram(connection, wallet);\n  const escrowSeed = [Buffer.from(\"escrow\"), walletPublicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)];\n  const [escrowPda] = await PublicKey.findProgramAddress(escrowSeed, PROGRAM_ID);\n  const ixInit = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: walletPublicKey,\n    authority: walletPublicKey,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: walletPublicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * Join & deposit (player2)\n * @param {PublicKey} escrowPda\n * @param {PublicKey} walletPublicKey\n * @param {object} connection\n * @param {object} wallet\n */\nexport async function buildJoinAndDepositIxn(escrowPda, walletPublicKey, connection, wallet) {\n  const program = getProgram(connection, wallet);\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: walletPublicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\n\n/**\n * Cancel\n * @param {PublicKey} escrowPda\n * @param {PublicKey} player1\n * @param {PublicKey} player2\n * @param {object} connection\n * @param {object} wallet\n */\nexport async function buildCancelIxn(escrowPda, player1, player2, connection, wallet) {\n  const program = getProgram(connection, wallet);\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrowAccount: escrowPda,\n    authority: wallet.publicKey\n  }).instruction();\n  return ix;\n}\n\n/**\n * Resolve (signed by \"house\" wallet)\n * @param {PublicKey} escrowPda\n * @param {PublicKey} winnerPubkey\n * @param {object} connection\n * @param {object} wallet\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey, connection, wallet) {\n  const program = getProgram(connection, wallet);\n  const ix = await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPda,\n    winner: winnerPubkey,\n    house: wallet.publicKey,\n    escrowAccount: escrowPda\n  }).instruction();\n  return ix;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","address","metadata","getProgram","connection","wallet","provider","AnchorProvider","preflightCommitment","commitment","setProvider","Program","buildInitializeAndDepositIxns","wagerLamports","walletPublicKey","nonce","program","escrowSeed","Buffer","from","toBuffer","BN","toArrayLike","escrowPda","findProgramAddress","ixInit","methods","initialize","accounts","escrow","player1","authority","systemProgram","programId","instruction","ixDeposit","deposit","payer","escrowAccount","buildJoinAndDepositIxn","ix","joinAndDeposit","player2","buildCancelIxn","cancel","publicKey","buildResolveIxn","winnerPubkey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Your program ID (from your IDL or .env)\nexport const PROGRAM_ID = new PublicKey(\n  idl.address || (idl.metadata && idl.metadata.address)\n);\n\n/**\n * Helper to get an Anchor program client using a custom wallet.\n * Pass in the wallet (from useWallet()).\n */\nfunction getProgram(connection, wallet) {\n  const provider = new anchor.AnchorProvider(\n    connection,\n    wallet,\n    { preflightCommitment: \"confirmed\", commitment: \"confirmed\" }\n  );\n  anchor.setProvider(provider);\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Initialize & deposit (player1)\n * @param {number} wagerLamports\n * @param {PublicKey} walletPublicKey\n * @param {number} nonce\n * @param {object} connection\n * @param {object} wallet\n */\nexport async function buildInitializeAndDepositIxns(\n  wagerLamports,\n  walletPublicKey,\n  nonce,\n  connection,\n  wallet\n) {\n  const program = getProgram(connection, wallet);\n  const escrowSeed = [\n    Buffer.from(\"escrow\"),\n    walletPublicKey.toBuffer(),\n    new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n  ];\n  const [escrowPda] = await PublicKey.findProgramAddress(escrowSeed, PROGRAM_ID);\n\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,\n      player1: walletPublicKey,\n      authority: walletPublicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: walletPublicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * Join & deposit (player2)\n * @param {PublicKey} escrowPda\n * @param {PublicKey} walletPublicKey\n * @param {object} connection\n * @param {object} wallet\n */\nexport async function buildJoinAndDepositIxn(\n  escrowPda,\n  walletPublicKey,\n  connection,\n  wallet\n) {\n  const program = getProgram(connection, wallet);\n\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: walletPublicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  return ix;\n}\n\n/**\n * Cancel\n * @param {PublicKey} escrowPda\n * @param {PublicKey} player1\n * @param {PublicKey} player2\n * @param {object} connection\n * @param {object} wallet\n */\nexport async function buildCancelIxn(\n  escrowPda,\n  player1,\n  player2,\n  connection,\n  wallet\n) {\n  const program = getProgram(connection, wallet);\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: escrowPda,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  return ix;\n}\n\n/**\n * Resolve (signed by \"house\" wallet)\n * @param {PublicKey} escrowPda\n * @param {PublicKey} winnerPubkey\n * @param {object} connection\n * @param {object} wallet\n */\nexport async function buildResolveIxn(\n  escrowPda,\n  winnerPubkey,\n  connection,\n  wallet\n) {\n  const program = getProgram(connection, wallet);\n\n  const ix = await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPda,\n      winner: winnerPubkey,\n      house: wallet.publicKey,\n      escrowAccount: escrowPda,\n    })\n    .instruction();\n  return ix;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}