{"ast":null,"code":"// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram, Transaction } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { provider, program } from \"./solana\";\n\n// Program ID from your IDL\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\n/** Initialize & deposit (unchanged from yours) */\nexport async function buildInitializeAndDepositIxns(wagerLamports) {\n  const nonce = Math.floor(Math.random() * 1000000);\n  const escrowPda = (await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], PROGRAM_ID))[0];\n  const ixInit = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: provider.wallet.publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/** Join & deposit (unchanged) */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: provider.wallet.publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\n\n/** Cancel (unchanged) */\nexport async function buildCancelIxn(escrowPda, player1, player2) {\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrowAccount: escrowPda,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  return ix;\n}\n\n/** ── NEW: resolve signed by your house wallet ───────────────────────────── */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const winnerKey = new PublicKey(winnerPubkey);\n  const ix = await program.methods.resolve(winnerKey).accounts({\n    escrow: escrowPda,\n    winner: winnerKey,\n    house: provider.wallet.publicKey,\n    escrowAccount: escrowPda\n  }).instruction();\n  return ix;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","Transaction","idl","provider","program","PROGRAM_ID","metadata","address","buildInitializeAndDepositIxns","wagerLamports","nonce","Math","floor","random","escrowPda","findProgramAddress","Buffer","from","wallet","publicKey","toBuffer","BN","toArrayLike","ixInit","methods","initialize","accounts","escrow","player1","authority","systemProgram","programId","instruction","ixDeposit","deposit","payer","escrowAccount","buildJoinAndDepositIxn","ix","joinAndDeposit","player2","buildCancelIxn","cancel","buildResolveIxn","winnerPubkey","winnerKey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram, Transaction } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { provider, program } from \"./solana\";\n\n// Program ID from your IDL\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\n/** Initialize & deposit (unchanged from yours) */\nexport async function buildInitializeAndDepositIxns(wagerLamports) {\n  const nonce = Math.floor(Math.random() * 1_000_000);\n  const escrowPda = (\n    await PublicKey.findProgramAddress(\n      [Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)],\n      PROGRAM_ID\n    )\n  )[0];\n\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow:         escrowPda,\n      player1:        provider.wallet.publicKey,\n      authority:      provider.wallet.publicKey,\n      systemProgram:  SystemProgram.programId,\n    })\n    .instruction();\n\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow:        escrowPda,\n      payer:         provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/** Join & deposit (unchanged) */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow:        escrowPda,\n      player2:       provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  return ix;\n}\n\n/** Cancel (unchanged) */\nexport async function buildCancelIxn(escrowPda, player1, player2) {\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow:        escrowPda,\n      player1,\n      player2,\n      escrowAccount: escrowPda,\n      authority:     provider.wallet.publicKey,\n    })\n    .instruction();\n  return ix;\n}\n\n/** ── NEW: resolve signed by your house wallet ───────────────────────────── */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const winnerKey = new PublicKey(winnerPubkey);\n  const ix = await program.methods\n    .resolve(winnerKey)\n    .accounts({\n      escrow:        escrowPda,\n      winner:        winnerKey,\n      house:         provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n    })\n    .instruction();\n  return ix;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}