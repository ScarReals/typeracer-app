{"ast":null,"code":"import * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Use idl.address here as well\nconst PROGRAM_ID = new PublicKey(idl.address);\nfunction getProgram() {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Call setProvider in App.jsx first.\");\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Build the Initialize + Deposit instructions;\n * Now takes (wagerLamports, player1Pubkey, nonce).\n */\nexport async function buildInitializeAndDepositIxns(wagerLamports, player1Pubkey, nonce) {\n  const program = getProgram();\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), player1Pubkey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], program.programId);\n  const ixInit = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: player1Pubkey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: provider.wallet.publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * Build the JoinAndDeposit instruction.\n */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  var _ref, _ref2, _acct$escrowAccount;\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const acct = await program.account.escrow.fetch(escrowPda);\n  const vault = (_ref = (_ref2 = (_acct$escrowAccount = acct.escrowAccount) !== null && _acct$escrowAccount !== void 0 ? _acct$escrowAccount : acct.escrowVault) !== null && _ref2 !== void 0 ? _ref2 : acct.vault) !== null && _ref !== void 0 ? _ref : escrowPda;\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: provider.wallet.publicKey,\n    escrowAccount: vault,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\n\n/**\n * Build the Cancel instruction.\n */\nexport async function buildCancelIxn(escrowPda, player1, player2) {\n  var _ref3, _ref4, _acct$escrowAccount2;\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const acct = await program.account.escrow.fetch(escrowPda);\n  const vault = (_ref3 = (_ref4 = (_acct$escrowAccount2 = acct.escrowAccount) !== null && _acct$escrowAccount2 !== void 0 ? _acct$escrowAccount2 : acct.escrowVault) !== null && _ref4 !== void 0 ? _ref4 : acct.vault) !== null && _ref3 !== void 0 ? _ref3 : escrowPda;\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrowAccount: vault,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  return ix;\n}\n\n/**\n * Build the Resolve instruction.\n */\nexport async function buildResolveIxn(escrowPda, winner) {\n  var _ref5, _ref6, _acct$escrowAccount3;\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const acct = await program.account.escrow.fetch(escrowPda);\n  const vault = (_ref5 = (_ref6 = (_acct$escrowAccount3 = acct.escrowAccount) !== null && _acct$escrowAccount3 !== void 0 ? _acct$escrowAccount3 : acct.escrowVault) !== null && _ref6 !== void 0 ? _ref6 : acct.vault) !== null && _ref5 !== void 0 ? _ref5 : escrowPda;\n  const ix = await program.methods.resolve(winner).accounts({\n    escrow: escrowPda,\n    winner,\n    house: provider.wallet.publicKey,\n    escrowAccount: vault,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  return ix;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","address","getProgram","provider","getProvider","Error","Program","buildInitializeAndDepositIxns","wagerLamports","player1Pubkey","nonce","program","escrowPda","findProgramAddress","Buffer","from","toBuffer","BN","toArrayLike","programId","ixInit","methods","initialize","accounts","escrow","player1","authority","wallet","publicKey","systemProgram","instruction","ixDeposit","deposit","payer","escrowAccount","buildJoinAndDepositIxn","_ref","_ref2","_acct$escrowAccount","acct","account","fetch","vault","escrowVault","ix","joinAndDeposit","player2","buildCancelIxn","_ref3","_ref4","_acct$escrowAccount2","cancel","buildResolveIxn","winner","_ref5","_ref6","_acct$escrowAccount3","resolve","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Use idl.address here as well\nconst PROGRAM_ID = new PublicKey(idl.address);\n\nfunction getProgram() {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Call setProvider in App.jsx first.\");\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Build the Initialize + Deposit instructions;\n * Now takes (wagerLamports, player1Pubkey, nonce).\n */\nexport async function buildInitializeAndDepositIxns(\n  wagerLamports,\n  player1Pubkey,\n  nonce\n) {\n  const program = getProgram();\n\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      player1Pubkey.toBuffer(),\n      new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,\n      player1: player1Pubkey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * Build the JoinAndDeposit instruction.\n */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const acct = await program.account.escrow.fetch(escrowPda);\n  const vault = acct.escrowAccount ?? acct.escrowVault ?? acct.vault ?? escrowPda;\n\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: provider.wallet.publicKey,\n      escrowAccount: vault,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return ix;\n}\n\n/**\n * Build the Cancel instruction.\n */\nexport async function buildCancelIxn(escrowPda, player1, player2) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const acct = await program.account.escrow.fetch(escrowPda);\n  const vault = acct.escrowAccount ?? acct.escrowVault ?? acct.vault ?? escrowPda;\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: vault,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n\n  return ix;\n}\n\n/**\n * Build the Resolve instruction.\n */\nexport async function buildResolveIxn(escrowPda, winner) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n  const acct = await program.account.escrow.fetch(escrowPda);\n  const vault = acct.escrowAccount ?? acct.escrowVault ?? acct.vault ?? escrowPda;\n\n  const ix = await program.methods\n    .resolve(winner)\n    .accounts({\n      escrow: escrowPda,\n      winner,\n      house: provider.wallet.publicKey,\n      escrowAccount: vault,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n\n  return ix;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}