{"ast":null,"code":"import * as anchor from \"@coral-xyz/anchor\";\nimport { Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { AnchorProvider, Program } from \"@coral-xyz/anchor\";\nimport idl from \"./idl/typeracer_escrow.json\";\nlet provider;\nlet program;\n\n/**\n * Setup and return Anchor provider and program instance.\n * Should be called after wallet connection.\n */\nexport function setProvider(wallet) {\n  var _idl$metadata, _idl$metadata2;\n  if (!wallet) throw new Error(\"Wallet not connected\");\n  const network = process.env.REACT_APP_SOLANA_NETWORK || \"mainnet-beta\";\n  const rpcEndpoint = process.env.REACT_APP_SOLANA_RPC || clusterApiUrl(network);\n  const connection = new Connection(rpcEndpoint, \"confirmed\");\n  provider = new AnchorProvider(connection, wallet, {\n    commitment: \"processed\",\n    skipPreflight: true,\n    maxRetries: 0,\n    // don’t retry\n    preflightCommitment: \"processed\"\n  });\n  console.log(\"IDL address:\", idl.address);\n  console.log(\"IDL metadata.address:\", (_idl$metadata = idl.metadata) === null || _idl$metadata === void 0 ? void 0 : _idl$metadata.address);\n  program = new Program(idl, ((_idl$metadata2 = idl.metadata) === null || _idl$metadata2 === void 0 ? void 0 : _idl$metadata2.address) || idl.address, provider);\n  return program;\n}\n\n/**\n * Returns the current Anchor program instance.\n * Throws if provider/program not initialized.\n */\nexport function getProgram() {\n  if (!program) {\n    throw new Error(\"Program not initialized. Call setProvider(wallet) first.\");\n  }\n  return program;\n}\n\n/**\n * Returns current Anchor provider instance.\n */\nexport function getProvider() {\n  if (!provider) {\n    throw new Error(\"Provider not initialized. Call setProvider(wallet) first.\");\n  }\n  return provider;\n}","map":{"version":3,"names":["anchor","Connection","clusterApiUrl","AnchorProvider","Program","idl","provider","program","setProvider","wallet","_idl$metadata","_idl$metadata2","Error","network","process","env","REACT_APP_SOLANA_NETWORK","rpcEndpoint","REACT_APP_SOLANA_RPC","connection","commitment","skipPreflight","maxRetries","preflightCommitment","console","log","address","metadata","getProgram","getProvider"],"sources":["/home/kokoi/sol-wager-app/frontend/src/solana.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { AnchorProvider, Program } from \"@coral-xyz/anchor\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\nlet provider;\nlet program;\n\n/**\n * Setup and return Anchor provider and program instance.\n * Should be called after wallet connection.\n */\nexport function setProvider(wallet) {\n  if (!wallet) throw new Error(\"Wallet not connected\");\n\n  const network = process.env.REACT_APP_SOLANA_NETWORK || \"mainnet-beta\";\n  const rpcEndpoint = process.env.REACT_APP_SOLANA_RPC || clusterApiUrl(network);\n\n  const connection = new Connection(rpcEndpoint, \"confirmed\");\n  provider = new AnchorProvider(connection, wallet, {\n  commitment: \"processed\",\n  skipPreflight: true,\n  maxRetries: 0,            // don’t retry\n  preflightCommitment: \"processed\",\n});\n\nconsole.log(\"IDL address:\", idl.address);\nconsole.log(\"IDL metadata.address:\", idl.metadata?.address);\nprogram = new Program(idl, idl.metadata?.address || idl.address, provider);\n  return program;\n}\n\n/**\n * Returns the current Anchor program instance.\n * Throws if provider/program not initialized.\n */\nexport function getProgram() {\n  if (!program) {\n    throw new Error(\"Program not initialized. Call setProvider(wallet) first.\");\n  }\n  return program;\n}\n\n/**\n * Returns current Anchor provider instance.\n */\nexport function getProvider() {\n  if (!provider) {\n    throw new Error(\"Provider not initialized. Call setProvider(wallet) first.\");\n  }\n  return provider;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,UAAU,EAAEC,aAAa,QAAQ,iBAAiB;AAC3D,SAASC,cAAc,EAAEC,OAAO,QAAQ,mBAAmB;AAC3D,OAAOC,GAAG,MAAM,6BAA6B;AAE7C,IAAIC,QAAQ;AACZ,IAAIC,OAAO;;AAEX;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAE;EAAA,IAAAC,aAAA,EAAAC,cAAA;EAClC,IAAI,CAACF,MAAM,EAAE,MAAM,IAAIG,KAAK,CAAC,sBAAsB,CAAC;EAEpD,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,cAAc;EACtE,MAAMC,WAAW,GAAGH,OAAO,CAACC,GAAG,CAACG,oBAAoB,IAAIhB,aAAa,CAACW,OAAO,CAAC;EAE9E,MAAMM,UAAU,GAAG,IAAIlB,UAAU,CAACgB,WAAW,EAAE,WAAW,CAAC;EAC3DX,QAAQ,GAAG,IAAIH,cAAc,CAACgB,UAAU,EAAEV,MAAM,EAAE;IAClDW,UAAU,EAAE,WAAW;IACvBC,aAAa,EAAE,IAAI;IACnBC,UAAU,EAAE,CAAC;IAAa;IAC1BC,mBAAmB,EAAE;EACvB,CAAC,CAAC;EAEFC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEpB,GAAG,CAACqB,OAAO,CAAC;EACxCF,OAAO,CAACC,GAAG,CAAC,uBAAuB,GAAAf,aAAA,GAAEL,GAAG,CAACsB,QAAQ,cAAAjB,aAAA,uBAAZA,aAAA,CAAcgB,OAAO,CAAC;EAC3DnB,OAAO,GAAG,IAAIH,OAAO,CAACC,GAAG,EAAE,EAAAM,cAAA,GAAAN,GAAG,CAACsB,QAAQ,cAAAhB,cAAA,uBAAZA,cAAA,CAAce,OAAO,KAAIrB,GAAG,CAACqB,OAAO,EAAEpB,QAAQ,CAAC;EACxE,OAAOC,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASqB,UAAUA,CAAA,EAAG;EAC3B,IAAI,CAACrB,OAAO,EAAE;IACZ,MAAM,IAAIK,KAAK,CAAC,0DAA0D,CAAC;EAC7E;EACA,OAAOL,OAAO;AAChB;;AAEA;AACA;AACA;AACA,OAAO,SAASsB,WAAWA,CAAA,EAAG;EAC5B,IAAI,CAACvB,QAAQ,EAAE;IACb,MAAM,IAAIM,KAAK,CAAC,2DAA2D,CAAC;EAC9E;EACA,OAAON,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}