{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SOLANA_CHAINS = exports.SOLANA_LOCALNET_CHAIN = exports.SOLANA_TESTNET_CHAIN = exports.SOLANA_DEVNET_CHAIN = exports.SOLANA_MAINNET_CHAIN = void 0;\nexports.isSolanaChain = isSolanaChain;\n/** Solana Mainnet (beta) cluster, e.g. https://api.mainnet-beta.solana.com */\nexports.SOLANA_MAINNET_CHAIN = 'solana:mainnet';\n/** Solana Devnet cluster, e.g. https://api.devnet.solana.com */\nexports.SOLANA_DEVNET_CHAIN = 'solana:devnet';\n/** Solana Testnet cluster, e.g. https://api.testnet.solana.com */\nexports.SOLANA_TESTNET_CHAIN = 'solana:testnet';\n/** Solana Localnet cluster, e.g. http://localhost:8899 */\nexports.SOLANA_LOCALNET_CHAIN = 'solana:localnet';\n/** Array of all Solana clusters */\nexports.SOLANA_CHAINS = [exports.SOLANA_MAINNET_CHAIN, exports.SOLANA_DEVNET_CHAIN, exports.SOLANA_TESTNET_CHAIN, exports.SOLANA_LOCALNET_CHAIN];\n/**\n * Check if a chain corresponds with one of the Solana clusters.\n */\nfunction isSolanaChain(chain) {\n  return exports.SOLANA_CHAINS.includes(chain);\n}","map":{"version":3,"names":["exports","isSolanaChain","SOLANA_MAINNET_CHAIN","SOLANA_DEVNET_CHAIN","SOLANA_TESTNET_CHAIN","SOLANA_LOCALNET_CHAIN","SOLANA_CHAINS","chain","includes"],"sources":["/home/kokoi/typeracer-app/frontend/node_modules/@solana/wallet-standard-chains/src/index.ts"],"sourcesContent":["import type { IdentifierString } from '@wallet-standard/base';\n\n/** Solana Mainnet (beta) cluster, e.g. https://api.mainnet-beta.solana.com */\nexport const SOLANA_MAINNET_CHAIN = 'solana:mainnet';\n\n/** Solana Devnet cluster, e.g. https://api.devnet.solana.com */\nexport const SOLANA_DEVNET_CHAIN = 'solana:devnet';\n\n/** Solana Testnet cluster, e.g. https://api.testnet.solana.com */\nexport const SOLANA_TESTNET_CHAIN = 'solana:testnet';\n\n/** Solana Localnet cluster, e.g. http://localhost:8899 */\nexport const SOLANA_LOCALNET_CHAIN = 'solana:localnet';\n\n/** Array of all Solana clusters */\nexport const SOLANA_CHAINS = [\n    SOLANA_MAINNET_CHAIN,\n    SOLANA_DEVNET_CHAIN,\n    SOLANA_TESTNET_CHAIN,\n    SOLANA_LOCALNET_CHAIN,\n] as const;\n\n/** Type of all Solana clusters */\nexport type SolanaChain = (typeof SOLANA_CHAINS)[number];\n\n/**\n * Check if a chain corresponds with one of the Solana clusters.\n */\nexport function isSolanaChain(chain: IdentifierString): chain is SolanaChain {\n    return SOLANA_CHAINS.includes(chain as SolanaChain);\n}\n"],"mappings":";;;;;;AA4BAA,OAAA,CAAAC,aAAA,GAAAA,aAAA;AA1BA;AACaD,OAAA,CAAAE,oBAAoB,GAAG,gBAAgB;AAEpD;AACaF,OAAA,CAAAG,mBAAmB,GAAG,eAAe;AAElD;AACaH,OAAA,CAAAI,oBAAoB,GAAG,gBAAgB;AAEpD;AACaJ,OAAA,CAAAK,qBAAqB,GAAG,iBAAiB;AAEtD;AACaL,OAAA,CAAAM,aAAa,GAAG,CACzBN,OAAA,CAAAE,oBAAoB,EACpBF,OAAA,CAAAG,mBAAmB,EACnBH,OAAA,CAAAI,oBAAoB,EACpBJ,OAAA,CAAAK,qBAAqB,CACf;AAKV;;;AAGA,SAAgBJ,aAAaA,CAACM,KAAuB;EACjD,OAAOP,OAAA,CAAAM,aAAa,CAACE,QAAQ,CAACD,KAAoB,CAAC;AACvD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}