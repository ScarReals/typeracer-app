{"ast":null,"code":"// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily grab your Anchor Program; must have called setProvider(wallet) first */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\"Provider not set: call setProvider(wallet) in App.jsx before using escrow.js\");\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * 1) Initialize + deposit via the Anchor program\n */\nexport async function buildInitializeAndDepositIxns(lamports, initializerPubkey, nonce) {\n  const program = getProgram();\n\n  // pack nonce into 8‑byte LE buffer\n  const nonceBuf = Buffer.from(new anchor.BN(nonce).toArray(\"le\", 8));\n\n  // derive PDA exactly as in Rust\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), initializerPubkey.toBuffer(), nonceBuf], PROGRAM_ID);\n\n  // (a) initialize(): sets up the escrow account and state\n  const ixInit = await program.methods.initialize(new anchor.BN(lamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: initializerPubkey,\n    authority: initializerPubkey,\n    system_program: SystemProgram.programId // snake_case\n  }).instruction();\n\n  // (b) deposit(): transfers your wager AND flips p1_deposited = true on‑chain\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: initializerPubkey,\n    escrow_account: escrowPda,\n    // snake_case\n    system_program: SystemProgram.programId // snake_case\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * 2) Join & deposit in one go\n */\nexport async function buildJoinAndDepositIxn(escrowPda, wager) {\n  const program = getProgram();\n  return program.methods.joinAndDeposit(new anchor.BN(wager)).accounts({\n    escrow: escrowPda,\n    player2: program.provider.wallet.publicKey,\n    escrow_account: escrowPda,\n    // snake_case\n    system_program: SystemProgram.programId // snake_case\n  }).instruction();\n}\n\n/**\n * 3) Cancel an escrow (manual TransactionInstruction)\n */\nexport function buildCancelIxn(escrowPda, initializerPubkey, accepterPubkey) {\n  // get the 8-byte discriminator for `cancel`\n  const cancelIx = idl.instructions.find(ix => ix.name === \"cancel\");\n  if (!cancelIx) throw new Error(\"IDL is missing the `cancel` instruction\");\n  const data = Buffer.from(cancelIx.discriminator);\n\n  // exactly the five AccountMetas your Rust Cancel<'info> expects:\n  const keys = [{\n    pubkey: escrowPda,\n    isSigner: false,\n    isWritable: true\n  },\n  // escrow\n  {\n    pubkey: initializerPubkey,\n    isSigner: false,\n    isWritable: true\n  },\n  // player1\n  {\n    pubkey: accepterPubkey,\n    isSigner: false,\n    isWritable: true\n  },\n  // player2\n  {\n    pubkey: escrowPda,\n    isSigner: false,\n    isWritable: true\n  },\n  // escrow_account\n  {\n    pubkey: initializerPubkey,\n    isSigner: true,\n    isWritable: true\n  } // authority\n  ];\n  console.log(\"Cancel ix metas:\", keys);\n  return new TransactionInstruction({\n    programId: PROGRAM_ID,\n    keys,\n    data\n  });\n}\n\n/**\n * 4) Resolve/payout\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const winnerKey = typeof winnerPubkey === \"string\" ? new PublicKey(winnerPubkey) : winnerPubkey;\n  return program.methods.resolve(winnerKey).accounts({\n    escrow: escrowPda,\n    winner: winnerKey,\n    house: program.provider.wallet.publicKey,\n    escrow_account: escrowPda // snake_case\n  }).instruction();\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","TransactionInstruction","idl","PROGRAM_ID","getProvider","getProgram","provider","Error","Program","buildInitializeAndDepositIxns","lamports","initializerPubkey","nonce","program","nonceBuf","Buffer","from","BN","toArray","escrowPda","findProgramAddress","toBuffer","ixInit","methods","initialize","accounts","escrow","player1","authority","system_program","programId","instruction","ixDeposit","deposit","payer","escrow_account","buildJoinAndDepositIxn","wager","joinAndDeposit","player2","wallet","publicKey","buildCancelIxn","accepterPubkey","cancelIx","instructions","find","ix","name","data","discriminator","keys","pubkey","isSigner","isWritable","console","log","buildResolveIxn","winnerPubkey","winnerKey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport {\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily grab your Anchor Program; must have called setProvider(wallet) first */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\n      \"Provider not set: call setProvider(wallet) in App.jsx before using escrow.js\"\n    );\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * 1) Initialize + deposit via the Anchor program\n */\nexport async function buildInitializeAndDepositIxns(\n  lamports,\n  initializerPubkey,\n  nonce\n) {\n  const program = getProgram();\n\n  // pack nonce into 8‑byte LE buffer\n  const nonceBuf = Buffer.from(new anchor.BN(nonce).toArray(\"le\", 8));\n\n  // derive PDA exactly as in Rust\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [Buffer.from(\"escrow\"), initializerPubkey.toBuffer(), nonceBuf],\n    PROGRAM_ID\n  );\n\n  // (a) initialize(): sets up the escrow account and state\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(lamports), new anchor.BN(nonce))\n    .accounts({\n      escrow:         escrowPda,\n      player1:        initializerPubkey,\n      authority:      initializerPubkey,\n      system_program: SystemProgram.programId,  // snake_case\n    })\n    .instruction();\n\n  // (b) deposit(): transfers your wager AND flips p1_deposited = true on‑chain\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow:          escrowPda,\n      payer:           initializerPubkey,\n      escrow_account:  escrowPda,               // snake_case\n      system_program:  SystemProgram.programId, // snake_case\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * 2) Join & deposit in one go\n */\nexport async function buildJoinAndDepositIxn(escrowPda, wager) {\n  const program = getProgram();\n  return program.methods\n    .joinAndDeposit(new anchor.BN(wager))\n    .accounts({\n      escrow:          escrowPda,\n      player2:         program.provider.wallet.publicKey,\n      escrow_account:  escrowPda,               // snake_case\n      system_program:  SystemProgram.programId, // snake_case\n    })\n    .instruction();\n}\n\n/**\n * 3) Cancel an escrow (manual TransactionInstruction)\n */\nexport function buildCancelIxn(\n  escrowPda,\n  initializerPubkey,\n  accepterPubkey\n) {\n  // get the 8-byte discriminator for `cancel`\n  const cancelIx = idl.instructions.find((ix) => ix.name === \"cancel\");\n  if (!cancelIx) throw new Error(\"IDL is missing the `cancel` instruction\");\n  const data = Buffer.from(cancelIx.discriminator);\n\n  // exactly the five AccountMetas your Rust Cancel<'info> expects:\n  const keys = [\n    { pubkey: escrowPda,         isSigner: false, isWritable: true  }, // escrow\n    { pubkey: initializerPubkey, isSigner: false, isWritable: true  }, // player1\n    { pubkey: accepterPubkey,    isSigner: false, isWritable: true  }, // player2\n    { pubkey: escrowPda,         isSigner: false, isWritable: true  }, // escrow_account\n    { pubkey: initializerPubkey, isSigner: true,  isWritable: true  }, // authority\n  ];\n\n  console.log(\"Cancel ix metas:\", keys);\n\n  return new TransactionInstruction({\n    programId: PROGRAM_ID,\n    keys,\n    data,\n  });\n}\n\n/**\n * 4) Resolve/payout\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const winnerKey =\n    typeof winnerPubkey === \"string\"\n      ? new PublicKey(winnerPubkey)\n      : winnerPubkey;\n\n  return program.methods\n    .resolve(winnerKey)\n    .accounts({\n      escrow:          escrowPda,\n      winner:          winnerKey,\n      house:           program.provider.wallet.publicKey,\n      escrow_account:  escrowPda, // snake_case\n    })\n    .instruction();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}