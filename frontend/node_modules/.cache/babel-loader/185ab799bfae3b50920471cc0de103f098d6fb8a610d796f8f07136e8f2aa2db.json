{"ast":null,"code":"// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Grab the programId from the IDL's metadata.address field\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\n/**\n * Initialize a new escrow\n * @param {number} wagerLamports Amount in lamports\n * @param {anchor.AnchorProvider} provider Anchor provider instance\n * @returns {Promise<PublicKey>} PDA of the escrow account\n */\nexport async function initializeEscrow(wagerLamports, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  // nonce for uniqueness\n  const nonce = Math.floor(Math.random() * 1000000);\n\n  // derive PDA\n  const [escrowPDA] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], program.programId);\n\n  // send the transaction\n  await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPDA,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).rpc({\n    preflightCommitment: \"confirmed\"\n  });\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one go\n * @param {PublicKey} escrowPDA\n * @param {anchor.AnchorProvider} provider\n */\nexport async function joinAndDeposit(escrowPDA, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPDA,\n    player2: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).rpc({\n    preflightCommitment: \"confirmed\"\n  });\n}\n\n/**\n * Deposit additional funds into escrow (for creator or others)\n * @param {PublicKey} escrowPDA\n * @param {anchor.AnchorProvider} provider\n */\nexport async function depositToEscrow(escrowPDA, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.deposit().accounts({\n    escrow: escrowPDA,\n    payer: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).rpc({\n    preflightCommitment: \"confirmed\"\n  });\n}\n\n/**\n * Cancel an escrow and refund both sides\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} player1Pubkey\n * @param {PublicKey} player2Pubkey\n * @param {anchor.AnchorProvider} provider\n */\nexport async function cancelEscrow(escrowPDA, player1Pubkey, player2Pubkey, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.cancel().accounts({\n    escrow: escrowPDA,\n    player1: player1Pubkey,\n    player2: player2Pubkey,\n    escrowAccount: escrowAccount.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).rpc({\n    preflightCommitment: \"confirmed\"\n  });\n}\n\n/**\n * Resolve escrow by sending all funds to the winner\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} winnerPubkey\n * @param {anchor.AnchorProvider} provider\n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPDA,\n    winner: winnerPubkey,\n    house: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).rpc({\n    preflightCommitment: \"confirmed\"\n  });\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","metadata","address","initializeEscrow","wagerLamports","provider","program","Program","nonce","Math","floor","random","escrowPDA","findProgramAddress","Buffer","from","wallet","publicKey","toBuffer","BN","toArrayLike","programId","methods","initialize","accounts","escrow","player1","authority","systemProgram","rpc","preflightCommitment","joinAndDeposit","escrowAccount","account","fetch","player2","depositToEscrow","deposit","payer","cancelEscrow","player1Pubkey","player2Pubkey","cancel","resolveEscrow","winnerPubkey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Grab the programId from the IDL's metadata.address field\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\n/**\n * Initialize a new escrow\n * @param {number} wagerLamports Amount in lamports\n * @param {anchor.AnchorProvider} provider Anchor provider instance\n * @returns {Promise<PublicKey>} PDA of the escrow account\n */\nexport async function initializeEscrow(wagerLamports, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  // nonce for uniqueness\n  const nonce = Math.floor(Math.random() * 1_000_000);\n\n  // derive PDA\n  const [escrowPDA] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      provider.wallet.publicKey.toBuffer(),\n      new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  // send the transaction\n  await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPDA,\n      player1: provider.wallet.publicKey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc({\n      preflightCommitment: \"confirmed\",\n    });\n\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one go\n * @param {PublicKey} escrowPDA\n * @param {anchor.AnchorProvider} provider\n */\nexport async function joinAndDeposit(escrowPDA, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPDA,\n      player2: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc({\n      preflightCommitment: \"confirmed\",\n    });\n}\n\n/**\n * Deposit additional funds into escrow (for creator or others)\n * @param {PublicKey} escrowPDA\n * @param {anchor.AnchorProvider} provider\n */\nexport async function depositToEscrow(escrowPDA, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPDA,\n      payer: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc({\n      preflightCommitment: \"confirmed\",\n    });\n}\n\n/**\n * Cancel an escrow and refund both sides\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} player1Pubkey\n * @param {PublicKey} player2Pubkey\n * @param {anchor.AnchorProvider} provider\n */\nexport async function cancelEscrow(\n  escrowPDA,\n  player1Pubkey,\n  player2Pubkey,\n  provider\n) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPDA,\n      player1: player1Pubkey,\n      player2: player2Pubkey,\n      escrowAccount: escrowAccount.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .rpc({\n      preflightCommitment: \"confirmed\",\n    });\n}\n\n/**\n * Resolve escrow by sending all funds to the winner\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} winnerPubkey\n * @param {anchor.AnchorProvider} provider\n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPDA,\n      winner: winnerPubkey,\n      house: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .rpc({\n      preflightCommitment: \"confirmed\",\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}