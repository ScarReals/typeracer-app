{"ast":null,"code":"// src/solana.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Keypair, Connection, PublicKey } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nconst RPC_URL = process.env.REACT_APP_SOLANA_RPC;\nconst HOUSE_KEYPAIR_PATH = process.env.REACT_APP_HOUSE_KEYPAIR_PATH;\n\n// Load house secret key\nconst secret = Uint8Array.from(require(HOUSE_KEYPAIR_PATH));\nconst houseKeypair = Keypair.fromSecretKey(secret);\n\n// Setup provider and program\nconst connection = new Connection(RPC_URL, \"confirmed\");\nconst provider = new anchor.AnchorProvider(connection, new anchor.Wallet(houseKeypair), {\n  preflightCommitment: \"confirmed\",\n  commitment: \"confirmed\"\n});\nanchor.setProvider(provider);\nconst PROGRAM_ID = new PublicKey(idl.address || idl.metadata && idl.metadata.address);\nconst program = new anchor.Program(idl, PROGRAM_ID, provider);\nexport { PROGRAM_ID, connection, provider, program };","map":{"version":3,"names":["anchor","Keypair","Connection","PublicKey","idl","RPC_URL","process","env","REACT_APP_SOLANA_RPC","HOUSE_KEYPAIR_PATH","REACT_APP_HOUSE_KEYPAIR_PATH","secret","Uint8Array","from","require","houseKeypair","fromSecretKey","connection","provider","AnchorProvider","Wallet","preflightCommitment","commitment","setProvider","PROGRAM_ID","address","metadata","program","Program"],"sources":["/home/kokoi/sol-wager-app/frontend/src/solana.js"],"sourcesContent":["// src/solana.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Keypair, Connection, PublicKey } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\nconst RPC_URL = process.env.REACT_APP_SOLANA_RPC;\nconst HOUSE_KEYPAIR_PATH = process.env.REACT_APP_HOUSE_KEYPAIR_PATH;\n\n// Load house secret key\nconst secret = Uint8Array.from(require(HOUSE_KEYPAIR_PATH));\nconst houseKeypair = Keypair.fromSecretKey(secret);\n\n// Setup provider and program\nconst connection = new Connection(RPC_URL, \"confirmed\");\nconst provider = new anchor.AnchorProvider(\n  connection,\n  new anchor.Wallet(houseKeypair),\n  { preflightCommitment: \"confirmed\", commitment: \"confirmed\" }\n);\nanchor.setProvider(provider);\n\nconst PROGRAM_ID = new PublicKey(idl.address || (idl.metadata && idl.metadata.address));\nconst program = new anchor.Program(idl, PROGRAM_ID, provider);\n\nexport { PROGRAM_ID, connection, provider, program };\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,OAAO,EAAEC,UAAU,EAAEC,SAAS,QAAQ,iBAAiB;AAChE,OAAOC,GAAG,MAAM,6BAA6B;AAE7C,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB;AAChD,MAAMC,kBAAkB,GAAGH,OAAO,CAACC,GAAG,CAACG,4BAA4B;;AAEnE;AACA,MAAMC,MAAM,GAAGC,UAAU,CAACC,IAAI,CAACC,OAAO,CAACL,kBAAkB,CAAC,CAAC;AAC3D,MAAMM,YAAY,GAAGd,OAAO,CAACe,aAAa,CAACL,MAAM,CAAC;;AAElD;AACA,MAAMM,UAAU,GAAG,IAAIf,UAAU,CAACG,OAAO,EAAE,WAAW,CAAC;AACvD,MAAMa,QAAQ,GAAG,IAAIlB,MAAM,CAACmB,cAAc,CACxCF,UAAU,EACV,IAAIjB,MAAM,CAACoB,MAAM,CAACL,YAAY,CAAC,EAC/B;EAAEM,mBAAmB,EAAE,WAAW;EAAEC,UAAU,EAAE;AAAY,CAC9D,CAAC;AACDtB,MAAM,CAACuB,WAAW,CAACL,QAAQ,CAAC;AAE5B,MAAMM,UAAU,GAAG,IAAIrB,SAAS,CAACC,GAAG,CAACqB,OAAO,IAAKrB,GAAG,CAACsB,QAAQ,IAAItB,GAAG,CAACsB,QAAQ,CAACD,OAAQ,CAAC;AACvF,MAAME,OAAO,GAAG,IAAI3B,MAAM,CAAC4B,OAAO,CAACxB,GAAG,EAAEoB,UAAU,EAAEN,QAAQ,CAAC;AAE7D,SAASM,UAAU,EAAEP,UAAU,EAAEC,QAAQ,EAAES,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}