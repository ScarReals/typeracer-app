{"ast":null,"code":"// src/solana.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Keypair, Connection, PublicKey, Wallet } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// ── load your “house” secret keypair from env ───────────────────────────────\nconst RPC_URL = process.env.REACT_APP_SOLANA_RPC_URL;\nconst HOUSE_PATH = process.env.REACT_APP_HOUSE_KEYPAIR_PATH;\nconst secret = Uint8Array.from(require(HOUSE_PATH));\nconst houseKeypair = Keypair.fromSecretKey(secret);\nconst wallet = new Wallet(houseKeypair);\n\n// ── build an Anchor provider with that house wallet ────────────────────────\nconst connection = new Connection(RPC_URL, \"confirmed\");\nconst provider = new anchor.AnchorProvider(connection, wallet, {\n  preflightCommitment: \"confirmed\",\n  commitment: \"confirmed\"\n});\nanchor.setProvider(provider);\n\n// ── typed Program client ───────────────────────────────────────────────────\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nconst program = new anchor.Program(idl, PROGRAM_ID, provider);\nexport { connection, provider, program };","map":{"version":3,"names":["anchor","Keypair","Connection","PublicKey","Wallet","idl","RPC_URL","process","env","REACT_APP_SOLANA_RPC_URL","HOUSE_PATH","REACT_APP_HOUSE_KEYPAIR_PATH","secret","Uint8Array","from","require","houseKeypair","fromSecretKey","wallet","connection","provider","AnchorProvider","preflightCommitment","commitment","setProvider","PROGRAM_ID","metadata","address","program","Program"],"sources":["/home/kokoi/sol-wager-app/frontend/src/solana.js"],"sourcesContent":["// src/solana.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Keypair, Connection, PublicKey, Wallet } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// ── load your “house” secret keypair from env ───────────────────────────────\nconst RPC_URL       = process.env.REACT_APP_SOLANA_RPC_URL;\nconst HOUSE_PATH    = process.env.REACT_APP_HOUSE_KEYPAIR_PATH;\nconst secret        = Uint8Array.from(require(HOUSE_PATH));\nconst houseKeypair  = Keypair.fromSecretKey(secret);\nconst wallet        = new Wallet(houseKeypair);\n\n// ── build an Anchor provider with that house wallet ────────────────────────\nconst connection = new Connection(RPC_URL, \"confirmed\");\nconst provider   = new anchor.AnchorProvider(\n  connection,\n  wallet,\n  { preflightCommitment: \"confirmed\", commitment: \"confirmed\" }\n);\nanchor.setProvider(provider);\n\n// ── typed Program client ───────────────────────────────────────────────────\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nconst program    = new anchor.Program(idl, PROGRAM_ID, provider);\n\nexport { connection, provider, program };\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,OAAO,EAAEC,UAAU,EAAEC,SAAS,EAAEC,MAAM,QAAQ,iBAAiB;AACxE,OAAOC,GAAG,MAAM,6BAA6B;;AAE7C;AACA,MAAMC,OAAO,GAASC,OAAO,CAACC,GAAG,CAACC,wBAAwB;AAC1D,MAAMC,UAAU,GAAMH,OAAO,CAACC,GAAG,CAACG,4BAA4B;AAC9D,MAAMC,MAAM,GAAUC,UAAU,CAACC,IAAI,CAACC,OAAO,CAACL,UAAU,CAAC,CAAC;AAC1D,MAAMM,YAAY,GAAIf,OAAO,CAACgB,aAAa,CAACL,MAAM,CAAC;AACnD,MAAMM,MAAM,GAAU,IAAId,MAAM,CAACY,YAAY,CAAC;;AAE9C;AACA,MAAMG,UAAU,GAAG,IAAIjB,UAAU,CAACI,OAAO,EAAE,WAAW,CAAC;AACvD,MAAMc,QAAQ,GAAK,IAAIpB,MAAM,CAACqB,cAAc,CAC1CF,UAAU,EACVD,MAAM,EACN;EAAEI,mBAAmB,EAAE,WAAW;EAAEC,UAAU,EAAE;AAAY,CAC9D,CAAC;AACDvB,MAAM,CAACwB,WAAW,CAACJ,QAAQ,CAAC;;AAE5B;AACA,MAAMK,UAAU,GAAG,IAAItB,SAAS,CAACE,GAAG,CAACqB,QAAQ,CAACC,OAAO,CAAC;AACtD,MAAMC,OAAO,GAAM,IAAI5B,MAAM,CAAC6B,OAAO,CAACxB,GAAG,EAAEoB,UAAU,EAAEL,QAAQ,CAAC;AAEhE,SAASD,UAAU,EAAEC,QAAQ,EAAEQ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}