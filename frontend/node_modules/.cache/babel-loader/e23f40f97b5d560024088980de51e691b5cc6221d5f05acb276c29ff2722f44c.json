{"ast":null,"code":"var _jsxFileName = \"/home/kokoi/sol-wager-app/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport sentences from \"./sentences\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletMultiButton } from \"@solana/wallet-adapter-react-ui\";\nimport { LAMPORTS_PER_SOL, PublicKey, Transaction } from \"@solana/web3.js\";\nimport socket from \"./socket\";\nimport * as anchor from \"@coral-xyz/anchor\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { setProvider } from \"./solana\";\nimport { buildInitializeAndDepositIxns, buildJoinAndDepositIxn, buildCancelIxn, buildResolveIxn } from \"./escrow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // ─ Wallet + Anchor provider\n  const {\n    connection\n  } = useConnection();\n  const wallet = useWallet();\n  const {\n    publicKey,\n    connected\n  } = wallet;\n  const walletAddress = (publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58()) || \"\";\n  useEffect(() => {\n    if (connected && connection) {\n      const prov = new anchor.AnchorProvider(connection, wallet, {\n        preflightCommitment: \"confirmed\",\n        commitment: \"confirmed\"\n      });\n      anchor.setProvider(prov);\n      setProvider(wallet);\n    }\n  }, [connected, connection, wallet]);\n\n  // ─ State: Balance, matchmaking, race, typing\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [wager, setWager] = useState(1);\n  const [openMatches, setOpenMatches] = useState([]);\n  const [currentMatch, setCurrentMatch] = useState(null);\n  const [matchStatus, setMatchStatus] = useState(\"waiting\");\n  const [sentence, setSentence] = useState(\"\");\n  const [inputValue, setInputValue] = useState(\"\");\n  const [playerProgress, setPlayerProgress] = useState(0);\n  const [opponentProgress, setOpponentProgress] = useState(0);\n  const [countdown, setCountdown] = useState(3);\n  const [raceResult, setRaceResult] = useState(null);\n  const [isInputDisabled, setIsInputDisabled] = useState(false);\n  const [isAccepting, setIsAccepting] = useState(false);\n  const [opponentWallet, setOpponentWallet] = useState(null);\n  const [hasError, setHasError] = useState(false);\n  const inputRef = useRef(null);\n  const walletRef = useRef(walletAddress);\n  useEffect(() => {\n    walletRef.current = walletAddress;\n  }, [walletAddress]);\n  const API = process.env.REACT_APP_API_URL;\n  const MAX_CPS = 20;\n  const [lastProgTime, setLastProgTime] = useState(Date.now());\n  const [lastProg, setLastProg] = useState(0);\n\n  // ─ Fetch wallet balance\n  useEffect(() => {\n    if (connection && publicKey) {\n      connection.getBalance(publicKey).then(lamports => {\n        setWalletBalance(lamports / LAMPORTS_PER_SOL);\n      });\n    }\n  }, [connection, publicKey]);\n\n  // ─ Helpers\n  const chooseSentence = id => sentences[Array.from(id).reduce((a, c) => a + c.charCodeAt(0), 0) % sentences.length];\n  const fetchOpenMatches = async () => {\n    try {\n      const res = await fetch(`${API}/wagers`);\n      setOpenMatches(await res.json());\n    } catch {}\n  };\n  const resetGame = () => {\n    setCurrentMatch(null);\n    setMatchStatus(\"waiting\");\n    setSentence(\"\");\n    setInputValue(\"\");\n    setPlayerProgress(0);\n    setOpponentProgress(0);\n    setCountdown(3);\n    setRaceResult(null);\n    setIsInputDisabled(false);\n    setOpponentWallet(null);\n    setHasError(false);\n    setLastProg(0);\n    setLastProgTime(Date.now());\n    fetchOpenMatches();\n  };\n\n  // ─ Socket listeners\n  useEffect(() => {\n    socket.connect();\n    socket.on(\"openMatches\", setOpenMatches);\n    socket.on(\"newMatch\", m => setOpenMatches(os => [...os, m]));\n    socket.on(\"removeMatch\", id => setOpenMatches(os => os.filter(m => m.id !== id)));\n    socket.on(\"startMatch\", ({\n      id,\n      players\n    }) => {\n      setCurrentMatch({\n        id,\n        amount: (currentMatch === null || currentMatch === void 0 ? void 0 : currentMatch.amount) || 0,\n        creator: players[0],\n        accepter: players[1],\n        nonce: currentMatch === null || currentMatch === void 0 ? void 0 : currentMatch.nonce\n      });\n      setMatchStatus(\"ready\");\n      setSentence(chooseSentence(id));\n      setCountdown(3);\n      setOpponentWallet(players.find(w => w !== walletRef.current));\n    });\n    socket.on(\"opponentProgress\", ({\n      wallet: w,\n      progress\n    }) => {\n      if (w !== walletRef.current) setOpponentProgress(progress);\n    });\n    socket.on(\"raceEnd\", ({\n      winner,\n      progressMap\n    }) => {\n      setMatchStatus(\"finished\");\n      setIsInputDisabled(true);\n      setRaceResult({\n        result: winner === walletRef.current ? \"win\" : \"lose\"\n      });\n      if (progressMap) {\n        var _progressMap$walletRe, _progressMap$opponent;\n        setPlayerProgress((_progressMap$walletRe = progressMap[walletRef.current]) !== null && _progressMap$walletRe !== void 0 ? _progressMap$walletRe : 0);\n        setOpponentProgress((_progressMap$opponent = progressMap[opponentWallet]) !== null && _progressMap$opponent !== void 0 ? _progressMap$opponent : 0);\n      }\n    });\n    socket.on(\"opponentLeft\", resetGame);\n    fetchOpenMatches();\n    return () => {\n      socket.removeAllListeners();\n      socket.disconnect();\n    };\n  }, []);\n\n  // ─ Countdown to race\n  useEffect(() => {\n    if (matchStatus === \"ready\" && countdown > 0) {\n      const t = setTimeout(() => setCountdown(c => c - 1), 1000);\n      return () => clearTimeout(t);\n    } else if (matchStatus === \"ready\" && countdown === 0) {\n      var _inputRef$current;\n      setMatchStatus(\"racing\");\n      setIsInputDisabled(false);\n      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n    }\n  }, [countdown, matchStatus]);\n\n  // ─ Handle typing & errors\n  function handleInput(e) {\n    if (isInputDisabled) return;\n    if (e.type === \"paste\") {\n      e.preventDefault();\n      return;\n    }\n    const now = Date.now();\n    const val = e.target.value;\n\n    // error if not matching prefix\n    if (!sentence.startsWith(val)) {\n      setHasError(true);\n      return;\n    }\n    setHasError(false);\n    const rawProg = Math.min(1, val.length / sentence.length);\n    const deltaProg = rawProg - lastProg;\n    const deltaTime = (now - lastProgTime) / 1000;\n    const chars = deltaProg * sentence.length;\n    const cps = deltaTime > 0 ? chars / deltaTime : 0;\n    if (cps > MAX_CPS) return;\n    setLastProg(rawProg);\n    setLastProgTime(now);\n    setInputValue(val);\n    setPlayerProgress(rawProg);\n    socket.emit(\"progress\", {\n      matchId: currentMatch.id,\n      wallet: walletRef.current,\n      progress: rawProg\n    });\n    if (val === sentence) {\n      fetch(`${API}/wagers/${currentMatch.id}/complete`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          winner: walletRef.current\n        })\n      });\n      setMatchStatus(\"finished\");\n      setIsInputDisabled(true);\n      setRaceResult({\n        result: \"win\"\n      });\n    }\n  }\n\n  // ─ Matchmaking actions\n  async function createMatch() {\n    if (!connected) return wallet.connect();\n    try {\n      const lamports = Math.floor(wager * LAMPORTS_PER_SOL);\n      const nonce = Math.floor(Math.random() * 1000000);\n      const {\n        ixInit,\n        ixDeposit,\n        escrowPda\n      } = await buildInitializeAndDepositIxns(lamports, publicKey, nonce);\n      const tx = new Transaction().add(ixInit, ixDeposit);\n      await wallet.sendTransaction(tx, connection);\n      const id = escrowPda.toBase58();\n      setCurrentMatch({\n        id,\n        amount: wager,\n        creator: walletRef.current,\n        nonce\n      });\n      socket.emit(\"joinMatch\", id);\n      setMatchStatus(\"waiting\");\n    } catch (e) {\n      console.error(\"Create error:\", e);\n      alert(\"Create match failed:\\n\" + e.message);\n    }\n  }\n  async function acceptMatch(m) {\n    if (!connected) return wallet.connect();\n    setIsAccepting(true);\n    try {\n      const ix = await buildJoinAndDepositIxn(new PublicKey(m.id), m.amount);\n      await wallet.sendTransaction(new Transaction().add(ix), connection);\n      setMatchStatus(\"ready\");\n      setSentence(chooseSentence(m.id));\n      setCountdown(3);\n      await fetch(`${API}/wagers/${m.id}/accept`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          accepter: walletRef.current\n        })\n      });\n      setCurrentMatch({\n        ...m,\n        accepter: walletRef.current\n      });\n      socket.emit(\"joinMatch\", m.id);\n    } catch (e) {\n      console.error(\"Accept error:\", e);\n      alert(\"Accept error:\\n\" + e.message);\n      setCurrentMatch(null);\n    } finally {\n      setIsAccepting(false);\n    }\n  }\n  async function cancelMatch(m) {\n    try {\n      const ix = await buildCancelIxn(new PublicKey(m.id), new PublicKey(m.creator), new PublicKey(m.accepter || m.creator));\n      await wallet.sendTransaction(new Transaction().add(ix), connection);\n      await fetch(`${API}/wagers/${m.id}/cancel`, {\n        method: \"POST\"\n      });\n      resetGame();\n    } catch (e) {\n      console.error(\"Cancel error:\", e);\n      alert(\"Cancel error:\\n\" + e.message);\n    }\n  }\n  async function claimWinnings() {\n    try {\n      await fetch(`${API}/wagers/${currentMatch.id}/resolve`, {\n        method: \"POST\"\n      });\n      resetGame();\n    } catch (e) {\n      console.error(\"Claim error:\", e);\n      alert(\"Claim error:\\n\" + e.message);\n    }\n  }\n\n  // ─ Render helpers ────────────────────────────────────────\n  const renderMatchmaking = () => /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"matchmaking\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create a Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Wager (SOL):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      min: \"0.01\",\n      step: \"0.01\",\n      value: wager,\n      onChange: e => setWager(Number(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createMatch,\n      disabled: !wager || wager <= 0,\n      children: \"Create Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Open Matches\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [openMatches.length === 0 && /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No open matches\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 38\n      }, this), openMatches.map(m => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [m.id.slice(0, 6), \"\\u2026 \\u2014 \", m.amount, \" SOL\", m.creator === walletRef.current ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => cancelMatch(m),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => acceptMatch(m),\n          disabled: !!currentMatch || isAccepting,\n          children: isAccepting ? \"…\" : \"Join\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 15\n        }, this)]\n      }, m.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 294,\n    columnNumber: 5\n  }, this);\n  const renderWaiting = () => /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"waiting\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Waiting for opponent\\u2026\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => cancelMatch(currentMatch),\n      children: \"Cancel Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 5\n  }, this);\n  const renderRace = () => /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"race-container\",\n    children: [matchStatus === \"ready\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"countdown\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"track\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"car lane1\",\n        style: {\n          left: `${playerProgress * 100}%`\n        },\n        children: \"\\uD83D\\uDE97\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"car lane2\",\n        style: {\n          left: `${opponentProgress * 100}%`\n        },\n        children: \"\\uD83C\\uDFCE\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sentence-display\",\n      children: sentence\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"text\",\n      value: inputValue,\n      onChange: handleInput,\n      onPaste: handleInput,\n      disabled: isInputDisabled,\n      className: hasError ? \"error\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), matchStatus === \"finished\" && (raceResult === null || raceResult === void 0 ? void 0 : raceResult.result) === \"win\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results results-win\",\n      children: [\"\\uD83C\\uDFC6 You Won!\", \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: claimWinnings,\n        children: \"Claim Winnings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 11\n    }, this), matchStatus === \"finished\" && (raceResult === null || raceResult === void 0 ? void 0 : raceResult.result) === \"lose\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results results-lose\",\n      children: [\"\\uD83D\\uDE14 You Lost!\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Back to Matches\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 5\n  }, this);\n\n  // ─ Final JSX ────────────────────────────────────────────\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Type Racer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wallet-info\",\n        children: [walletRef.current.slice(0, 6), \"\\u2026 (\", walletBalance.toFixed(2), \" SOL)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(WalletMultiButton, {\n        className: \"wallet-btn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this), !connected && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"prompt\",\n      children: \"Please connect your wallet to play.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 9\n    }, this), connected && !currentMatch && renderMatchmaking(), connected && currentMatch && matchStatus === \"waiting\" && renderWaiting(), connected && currentMatch && [\"ready\", \"racing\", \"finished\"].includes(matchStatus) && renderRace()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 396,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"U5PkGrV37QJQ66fDSG1Zg63MEPU=\", false, function () {\n  return [useConnection, useWallet];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","sentences","useConnection","useWallet","WalletMultiButton","LAMPORTS_PER_SOL","PublicKey","Transaction","socket","anchor","idl","setProvider","buildInitializeAndDepositIxns","buildJoinAndDepositIxn","buildCancelIxn","buildResolveIxn","jsxDEV","_jsxDEV","App","_s","connection","wallet","publicKey","connected","walletAddress","toBase58","prov","AnchorProvider","preflightCommitment","commitment","walletBalance","setWalletBalance","wager","setWager","openMatches","setOpenMatches","currentMatch","setCurrentMatch","matchStatus","setMatchStatus","sentence","setSentence","inputValue","setInputValue","playerProgress","setPlayerProgress","opponentProgress","setOpponentProgress","countdown","setCountdown","raceResult","setRaceResult","isInputDisabled","setIsInputDisabled","isAccepting","setIsAccepting","opponentWallet","setOpponentWallet","hasError","setHasError","inputRef","walletRef","current","API","process","env","REACT_APP_API_URL","MAX_CPS","lastProgTime","setLastProgTime","Date","now","lastProg","setLastProg","getBalance","then","lamports","chooseSentence","id","Array","from","reduce","a","c","charCodeAt","length","fetchOpenMatches","res","fetch","json","resetGame","connect","on","m","os","filter","players","amount","creator","accepter","nonce","find","w","progress","winner","progressMap","result","_progressMap$walletRe","_progressMap$opponent","removeAllListeners","disconnect","t","setTimeout","clearTimeout","_inputRef$current","focus","handleInput","e","type","preventDefault","val","target","value","startsWith","rawProg","Math","min","deltaProg","deltaTime","chars","cps","emit","matchId","method","headers","body","JSON","stringify","createMatch","floor","random","ixInit","ixDeposit","escrowPda","tx","add","sendTransaction","console","error","alert","message","acceptMatch","ix","cancelMatch","claimWinnings","renderMatchmaking","className","children","fileName","_jsxFileName","lineNumber","columnNumber","step","onChange","Number","onClick","disabled","map","slice","renderWaiting","renderRace","style","left","ref","onPaste","toFixed","includes","_c","$RefreshReg$"],"sources":["/home/kokoi/sol-wager-app/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport sentences from \"./sentences\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletMultiButton } from \"@solana/wallet-adapter-react-ui\";\nimport { LAMPORTS_PER_SOL, PublicKey, Transaction } from \"@solana/web3.js\";\nimport socket from \"./socket\";\nimport * as anchor from \"@coral-xyz/anchor\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { setProvider } from \"./solana\";\nimport {\n  buildInitializeAndDepositIxns,\n  buildJoinAndDepositIxn,\n  buildCancelIxn,\n  buildResolveIxn,\n} from \"./escrow\";\n\nexport default function App() {\n  // ─ Wallet + Anchor provider\n  const { connection } = useConnection();\n  const wallet = useWallet();\n  const { publicKey, connected } = wallet;\n  const walletAddress = publicKey?.toBase58() || \"\";\n  useEffect(() => {\n    if (connected && connection) {\n      const prov = new anchor.AnchorProvider(connection, wallet, {\n        preflightCommitment: \"confirmed\",\n        commitment: \"confirmed\",\n      });\n      anchor.setProvider(prov);\n      setProvider(wallet);\n    }\n  }, [connected, connection, wallet]);\n\n  // ─ State: Balance, matchmaking, race, typing\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [wager, setWager] = useState(1);\n  const [openMatches, setOpenMatches] = useState([]);\n  const [currentMatch, setCurrentMatch] = useState(null);\n  const [matchStatus, setMatchStatus] = useState(\"waiting\");\n\n  const [sentence, setSentence] = useState(\"\");\n  const [inputValue, setInputValue] = useState(\"\");\n  const [playerProgress, setPlayerProgress] = useState(0);\n  const [opponentProgress, setOpponentProgress] = useState(0);\n  const [countdown, setCountdown] = useState(3);\n  const [raceResult, setRaceResult] = useState(null);\n  const [isInputDisabled, setIsInputDisabled] = useState(false);\n  const [isAccepting, setIsAccepting] = useState(false);\n  const [opponentWallet, setOpponentWallet] = useState(null);\n  const [hasError, setHasError] = useState(false);\n\n  const inputRef = useRef(null);\n  const walletRef = useRef(walletAddress);\n  useEffect(() => {\n    walletRef.current = walletAddress;\n  }, [walletAddress]);\n\n  const API = process.env.REACT_APP_API_URL;\n  const MAX_CPS = 20;\n  const [lastProgTime, setLastProgTime] = useState(Date.now());\n  const [lastProg, setLastProg] = useState(0);\n\n  // ─ Fetch wallet balance\n  useEffect(() => {\n    if (connection && publicKey) {\n      connection.getBalance(publicKey).then((lamports) => {\n        setWalletBalance(lamports / LAMPORTS_PER_SOL);\n      });\n    }\n  }, [connection, publicKey]);\n\n  // ─ Helpers\n  const chooseSentence = (id) =>\n    sentences[\n      Array.from(id).reduce((a, c) => a + c.charCodeAt(0), 0) %\n        sentences.length\n    ];\n\n  const fetchOpenMatches = async () => {\n    try {\n      const res = await fetch(`${API}/wagers`);\n      setOpenMatches(await res.json());\n    } catch {}\n  };\n\n  const resetGame = () => {\n    setCurrentMatch(null);\n    setMatchStatus(\"waiting\");\n    setSentence(\"\");\n    setInputValue(\"\");\n    setPlayerProgress(0);\n    setOpponentProgress(0);\n    setCountdown(3);\n    setRaceResult(null);\n    setIsInputDisabled(false);\n    setOpponentWallet(null);\n    setHasError(false);\n    setLastProg(0);\n    setLastProgTime(Date.now());\n    fetchOpenMatches();\n  };\n\n  // ─ Socket listeners\n  useEffect(() => {\n    socket.connect();\n    socket.on(\"openMatches\", setOpenMatches);\n    socket.on(\"newMatch\", (m) => setOpenMatches((os) => [...os, m]));\n    socket.on(\"removeMatch\", (id) =>\n      setOpenMatches((os) => os.filter((m) => m.id !== id))\n    );\n    socket.on(\"startMatch\", ({ id, players }) => {\n      setCurrentMatch({\n        id,\n        amount: currentMatch?.amount || 0,\n        creator: players[0],\n        accepter: players[1],\n        nonce: currentMatch?.nonce,\n      });\n      setMatchStatus(\"ready\");\n      setSentence(chooseSentence(id));\n      setCountdown(3);\n      setOpponentWallet(players.find((w) => w !== walletRef.current));\n    });\n    socket.on(\"opponentProgress\", ({ wallet: w, progress }) => {\n      if (w !== walletRef.current) setOpponentProgress(progress);\n    });\n    socket.on(\"raceEnd\", ({ winner, progressMap }) => {\n      setMatchStatus(\"finished\");\n      setIsInputDisabled(true);\n      setRaceResult({\n        result: winner === walletRef.current ? \"win\" : \"lose\",\n      });\n      if (progressMap) {\n        setPlayerProgress(progressMap[walletRef.current] ?? 0);\n        setOpponentProgress(progressMap[opponentWallet] ?? 0);\n      }\n    });\n    socket.on(\"opponentLeft\", resetGame);\n\n    fetchOpenMatches();\n    return () => {\n      socket.removeAllListeners();\n      socket.disconnect();\n    };\n  }, []);\n\n  // ─ Countdown to race\n  useEffect(() => {\n    if (matchStatus === \"ready\" && countdown > 0) {\n      const t = setTimeout(() => setCountdown((c) => c - 1), 1000);\n      return () => clearTimeout(t);\n    } else if (matchStatus === \"ready\" && countdown === 0) {\n      setMatchStatus(\"racing\");\n      setIsInputDisabled(false);\n      inputRef.current?.focus();\n    }\n  }, [countdown, matchStatus]);\n\n  // ─ Handle typing & errors\n  function handleInput(e) {\n    if (isInputDisabled) return;\n    if (e.type === \"paste\") {\n      e.preventDefault();\n      return;\n    }\n    const now = Date.now();\n    const val = e.target.value;\n\n    // error if not matching prefix\n    if (!sentence.startsWith(val)) {\n      setHasError(true);\n      return;\n    }\n    setHasError(false);\n\n    const rawProg = Math.min(1, val.length / sentence.length);\n    const deltaProg = rawProg - lastProg;\n    const deltaTime = (now - lastProgTime) / 1000;\n    const chars = deltaProg * sentence.length;\n    const cps = deltaTime > 0 ? chars / deltaTime : 0;\n    if (cps > MAX_CPS) return;\n\n    setLastProg(rawProg);\n    setLastProgTime(now);\n    setInputValue(val);\n    setPlayerProgress(rawProg);\n    socket.emit(\"progress\", {\n      matchId: currentMatch.id,\n      wallet: walletRef.current,\n      progress: rawProg,\n    });\n\n    if (val === sentence) {\n      fetch(`${API}/wagers/${currentMatch.id}/complete`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ winner: walletRef.current }),\n      });\n      setMatchStatus(\"finished\");\n      setIsInputDisabled(true);\n      setRaceResult({ result: \"win\" });\n    }\n  }\n\n  // ─ Matchmaking actions\n  async function createMatch() {\n    if (!connected) return wallet.connect();\n    try {\n      const lamports = Math.floor(wager * LAMPORTS_PER_SOL);\n      const nonce = Math.floor(Math.random() * 1_000_000);\n      const { ixInit, ixDeposit, escrowPda } =\n        await buildInitializeAndDepositIxns(\n          lamports,\n          publicKey,\n          nonce\n        );\n      const tx = new Transaction().add(ixInit, ixDeposit);\n      await wallet.sendTransaction(tx, connection);\n      const id = escrowPda.toBase58();\n      setCurrentMatch({ id, amount: wager, creator: walletRef.current, nonce });\n      socket.emit(\"joinMatch\", id);\n      setMatchStatus(\"waiting\");\n    } catch (e) {\n      console.error(\"Create error:\", e);\n      alert(\"Create match failed:\\n\" + e.message);\n    }\n  }\n\n  async function acceptMatch(m) {\n    if (!connected) return wallet.connect();\n    setIsAccepting(true);\n    try {\n      const ix = await buildJoinAndDepositIxn(\n        new PublicKey(m.id),\n        m.amount\n      );\n      await wallet.sendTransaction(\n        new Transaction().add(ix),\n        connection\n      );\n      setMatchStatus(\"ready\");\n      setSentence(chooseSentence(m.id));\n      setCountdown(3);\n      await fetch(`${API}/wagers/${m.id}/accept`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ accepter: walletRef.current }),\n      });\n      setCurrentMatch({ ...m, accepter: walletRef.current });\n      socket.emit(\"joinMatch\", m.id);\n    } catch (e) {\n      console.error(\"Accept error:\", e);\n      alert(\"Accept error:\\n\" + e.message);\n      setCurrentMatch(null);\n    } finally {\n      setIsAccepting(false);\n    }\n  }\n\n  async function cancelMatch(m) {\n    try {\n      const ix = await buildCancelIxn(\n        new PublicKey(m.id),\n        new PublicKey(m.creator),\n        new PublicKey(m.accepter || m.creator)\n      );\n      await wallet.sendTransaction(\n        new Transaction().add(ix),\n        connection\n      );\n      await fetch(`${API}/wagers/${m.id}/cancel`, { method: \"POST\" });\n      resetGame();\n    } catch (e) {\n      console.error(\"Cancel error:\", e);\n      alert(\"Cancel error:\\n\" + e.message);\n    }\n  }\n\n  async function claimWinnings() {\n    try {\n      await fetch(`${API}/wagers/${currentMatch.id}/resolve`, {\n        method: \"POST\",\n      });\n      resetGame();\n    } catch (e) {\n      console.error(\"Claim error:\", e);\n      alert(\"Claim error:\\n\" + e.message);\n    }\n  }\n\n  // ─ Render helpers ────────────────────────────────────────\n  const renderMatchmaking = () => (\n    <section className=\"matchmaking\">\n      <h2>Create a Match</h2>\n      <label>Wager (SOL):</label>\n      <input\n        type=\"number\"\n        min=\"0.01\"\n        step=\"0.01\"\n        value={wager}\n        onChange={(e) => setWager(Number(e.target.value))}\n      />\n      <button\n        onClick={createMatch}\n        disabled={!wager || wager <= 0}\n      >\n        Create Match\n      </button>\n\n      <h2>Open Matches</h2>\n      <ul>\n        {openMatches.length === 0 && <li>No open matches</li>}\n        {openMatches.map((m) => (\n          <li key={m.id}>\n            {m.id.slice(0, 6)}… — {m.amount} SOL\n            {m.creator === walletRef.current ? (\n              <button onClick={() => cancelMatch(m)}>Cancel</button>\n            ) : (\n              <button\n                onClick={() => acceptMatch(m)}\n                disabled={!!currentMatch || isAccepting}\n              >\n                {isAccepting ? \"…\" : \"Join\"}\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n\n  const renderWaiting = () => (\n    <section className=\"waiting\">\n      <h2>Waiting for opponent…</h2>\n      <button onClick={() => cancelMatch(currentMatch)}>\n        Cancel Match\n      </button>\n    </section>\n  );\n\n  const renderRace = () => (\n    <section className=\"race-container\">\n      {matchStatus === \"ready\" && (\n        <div className=\"countdown\">\n          <h2>{countdown}</h2>\n        </div>\n      )}\n      <div className=\"track\">\n        <div\n          className=\"car lane1\"\n          style={{ left: `${playerProgress * 100}%` }}\n        >\n          🚗\n        </div>\n        <div\n          className=\"car lane2\"\n          style={{ left: `${opponentProgress * 100}%` }}\n        >\n          🏎️\n        </div>\n      </div>\n      <div className=\"sentence-display\">{sentence}</div>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInput}\n        onPaste={handleInput}\n        disabled={isInputDisabled}\n        className={hasError ? \"error\" : \"\"}\n      />\n      {matchStatus === \"finished\" &&\n        raceResult?.result === \"win\" && (\n          <div className=\"results results-win\">\n            🏆 You Won!{\" \"}\n            <button onClick={claimWinnings}>\n              Claim Winnings\n            </button>\n          </div>\n        )}\n      {matchStatus === \"finished\" &&\n        raceResult?.result === \"lose\" && (\n          <div className=\"results results-lose\">\n            😔 You Lost!\n            <button onClick={resetGame}>\n              Back to Matches\n            </button>\n          </div>\n        )}\n    </section>\n  );\n\n  // ─ Final JSX ────────────────────────────────────────────\n  return (\n    <div className=\"app\">\n      <header>\n        <h1>Type Racer</h1>\n        {connected ? (\n          <div className=\"wallet-info\">\n            {walletRef.current.slice(0, 6)}… (\n            {walletBalance.toFixed(2)} SOL)\n          </div>\n        ) : (\n          <WalletMultiButton className=\"wallet-btn\" />\n        )}\n      </header>\n\n      {!connected && (\n        <p className=\"prompt\">\n          Please connect your wallet to play.\n        </p>\n      )}\n      {connected && !currentMatch && renderMatchmaking()}\n      {connected &&\n        currentMatch &&\n        matchStatus === \"waiting\" &&\n        renderWaiting()}\n      {connected &&\n        currentMatch &&\n        [\"ready\", \"racing\", \"finished\"].includes(\n          matchStatus\n        ) &&\n        renderRace()}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}