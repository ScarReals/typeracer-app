{"ast":null,"code":"// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily grab your Anchor Program; must call setProvider(wallet) first */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\"Provider not set: call setProvider(wallet) in App.jsx before using escrow.js\");\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * 1) Initialize + deposit\n */\nexport async function buildInitializeAndDepositIxns(lamports, initializerPubkey, nonce) {\n  const program = getProgram();\n\n  // pack nonce into 8‑byte LE buffer\n  const nonceBuf = Buffer.from(new anchor.BN(nonce).toArray(\"le\", 8));\n\n  // derive PDA\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), initializerPubkey.toBuffer(), nonceBuf], PROGRAM_ID);\n\n  // (a) initialize on‑chain state\n  const ixInit = await program.methods.initialize(new anchor.BN(lamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: initializerPubkey,\n    authority: initializerPubkey,\n    system_program: SystemProgram.programId\n  }).instruction();\n\n  // (b) raw transfer of SOL into the PDA (your original working code)\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports\n  });\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * 2) Join & deposit in one go\n *\n * NOTE: joinAndDeposit has NO args and expects snake_case names\n */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const program = getProgram();\n\n  // debug: confirm IDL account names\n  console.log(\"IDL joinAndDeposit accounts:\", program.idl.instructions.find(ix => ix.name === \"joinAndDeposit\").accounts);\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: program.provider.wallet.publicKey,\n    escrow_account: escrowPda,\n    // snake_case per IDL\n    system_program: SystemProgram.programId // snake_case per IDL\n  }).instruction();\n\n  // debug: inspect the metas\n  console.log(\"Built joinAndDeposit ix metas:\", ix.keys.map(k => ({\n    pubkey: k.pubkey.toBase58(),\n    isSigner: k.isSigner,\n    isWritable: k.isWritable\n  })));\n  return ix;\n}\n\n/**\n * 3) Cancel an escrow (manual instruction + debug logs)\n */\nexport function buildCancelIxn(escrowPda, initializerPubkey, accepterPubkey) {\n  console.log(\"IDL cancel accounts:\", idl.instructions.find(ix => ix.name === \"cancel\").accounts);\n  const cancelIx = idl.instructions.find(ix => ix.name === \"cancel\");\n  const data = Buffer.from(cancelIx.discriminator);\n  const keys = [{\n    pubkey: escrowPda,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: initializerPubkey,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: accepterPubkey,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: escrowPda,\n    isSigner: false,\n    isWritable: true\n  },\n  // escrow_account\n  {\n    pubkey: initializerPubkey,\n    isSigner: true,\n    isWritable: true\n  } // authority\n  ];\n  console.log(\"Built Cancel ix metas:\", keys);\n  return new TransactionInstruction({\n    programId: PROGRAM_ID,\n    keys,\n    data\n  });\n}\n\n/**\n * 4) Resolve/payout\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const winnerKey = typeof winnerPubkey === \"string\" ? new PublicKey(winnerPubkey) : winnerPubkey;\n  return program.methods.resolve(winnerKey).accounts({\n    escrow: escrowPda,\n    winner: winnerKey,\n    house: program.provider.wallet.publicKey,\n    escrow_account: escrowPda // snake_case\n  }).instruction();\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","TransactionInstruction","idl","PROGRAM_ID","getProvider","getProgram","provider","Error","Program","buildInitializeAndDepositIxns","lamports","initializerPubkey","nonce","program","nonceBuf","Buffer","from","BN","toArray","escrowPda","findProgramAddress","toBuffer","ixInit","methods","initialize","accounts","escrow","player1","authority","system_program","programId","instruction","ixDeposit","transfer","fromPubkey","toPubkey","buildJoinAndDepositIxn","console","log","instructions","find","ix","name","joinAndDeposit","player2","wallet","publicKey","escrow_account","keys","map","k","pubkey","toBase58","isSigner","isWritable","buildCancelIxn","accepterPubkey","cancelIx","data","discriminator","buildResolveIxn","winnerPubkey","winnerKey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport {\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily grab your Anchor Program; must call setProvider(wallet) first */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\n      \"Provider not set: call setProvider(wallet) in App.jsx before using escrow.js\"\n    );\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * 1) Initialize + deposit\n */\nexport async function buildInitializeAndDepositIxns(\n  lamports,\n  initializerPubkey,\n  nonce\n) {\n  const program = getProgram();\n\n  // pack nonce into 8‑byte LE buffer\n  const nonceBuf = Buffer.from(new anchor.BN(nonce).toArray(\"le\", 8));\n\n  // derive PDA\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      initializerPubkey.toBuffer(),\n      nonceBuf,\n    ],\n    PROGRAM_ID\n  );\n\n  // (a) initialize on‑chain state\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(lamports), new anchor.BN(nonce))\n    .accounts({\n      escrow:         escrowPda,\n      player1:        initializerPubkey,\n      authority:      initializerPubkey,\n      system_program: SystemProgram.programId,\n    })\n    .instruction();\n\n  // (b) raw transfer of SOL into the PDA (your original working code)\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports,\n  });\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * 2) Join & deposit in one go\n *\n * NOTE: joinAndDeposit has NO args and expects snake_case names\n */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const program = getProgram();\n\n  // debug: confirm IDL account names\n  console.log(\n    \"IDL joinAndDeposit accounts:\",\n    program.idl.instructions.find((ix) => ix.name === \"joinAndDeposit\").accounts\n  );\n\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow:          escrowPda,\n      player2:         program.provider.wallet.publicKey,\n      escrow_account:  escrowPda,               // snake_case per IDL\n      system_program:  SystemProgram.programId, // snake_case per IDL\n    })\n    .instruction();\n\n  // debug: inspect the metas\n  console.log(\n    \"Built joinAndDeposit ix metas:\",\n    ix.keys.map((k) => ({\n      pubkey:    k.pubkey.toBase58(),\n      isSigner:  k.isSigner,\n      isWritable:k.isWritable,\n    }))\n  );\n\n  return ix;\n}\n\n/**\n * 3) Cancel an escrow (manual instruction + debug logs)\n */\nexport function buildCancelIxn(\n  escrowPda,\n  initializerPubkey,\n  accepterPubkey\n) {\n  console.log(\n    \"IDL cancel accounts:\",\n    idl.instructions.find((ix) => ix.name === \"cancel\").accounts\n  );\n\n  const cancelIx = idl.instructions.find((ix) => ix.name === \"cancel\");\n  const data = Buffer.from(cancelIx.discriminator);\n\n  const keys = [\n    { pubkey: escrowPda,         isSigner: false, isWritable: true },\n    { pubkey: initializerPubkey, isSigner: false, isWritable: true },\n    { pubkey: accepterPubkey,    isSigner: false, isWritable: true },\n    { pubkey: escrowPda,         isSigner: false, isWritable: true }, // escrow_account\n    { pubkey: initializerPubkey, isSigner: true,  isWritable: true }, // authority\n  ];\n\n  console.log(\"Built Cancel ix metas:\", keys);\n\n  return new TransactionInstruction({\n    programId: PROGRAM_ID,\n    keys,\n    data,\n  });\n}\n\n/**\n * 4) Resolve/payout\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const winnerKey = typeof winnerPubkey === \"string\"\n    ? new PublicKey(winnerPubkey)\n    : winnerPubkey;\n\n  return program.methods\n    .resolve(winnerKey)\n    .accounts({\n      escrow:          escrowPda,\n      winner:          winnerKey,\n      house:           program.provider.wallet.publicKey,\n      escrow_account:  escrowPda, // snake_case\n    })\n    .instruction();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}