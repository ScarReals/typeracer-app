{"ast":null,"code":"// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\nconst PROGRAM_ID = new PublicKey(idl.address);\n\n/**\n * Populate blockhash & feePayer, have wallet sign, send + confirm.\n */\nasync function sendAndConfirm(tx) {\n  const provider = getProvider();\n  const connection = provider.connection;\n\n  // fetch a fresh blockhash\n  const {\n    blockhash\n  } = await connection.getLatestBlockhash(\"confirmed\");\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = provider.wallet.publicKey;\n\n  // have the wallet sign\n  const signed = await provider.wallet.signTransaction(tx);\n\n  // send it\n  const raw = signed.serialize();\n  const sig = await connection.sendRawTransaction(raw, {\n    skipPreflight: true,\n    preflightCommitment: \"confirmed\"\n  });\n\n  // wait for confirmation\n  await connection.confirmTransaction(sig, \"confirmed\");\n  return sig;\n}\n\n/**\n * Initialize a new escrow\n * @param {number} wagerLamports amount in lamports\n * @returns {PublicKey} PDA of escrow\n */\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  // generate a nonce\n  const nonce = Math.floor(Math.random() * 1000000);\n\n  // derive the PDA\n  const [escrowPDA] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], program.programId);\n\n  // build the initialize transaction\n  const tx = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPDA,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).transaction();\n\n  // send & confirm\n  await sendAndConfirm(tx);\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one transaction\n * @param {PublicKey} escrowPDA\n */\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPDA,\n    player2: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).transaction();\n  await sendAndConfirm(tx);\n}\n\n/**\n * Deposit to escrow (for player 2 if using separate deposit)\n * @param {PublicKey} escrowPDA\n */\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.deposit().accounts({\n    escrow: escrowPDA,\n    payer: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).transaction();\n  await sendAndConfirm(tx);\n}\n\n/**\n * Cancel an escrow\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} player1Pubkey\n * @param {PublicKey} player2Pubkey\n */\nexport async function cancelEscrow(escrowPDA, player1Pubkey, player2Pubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.cancel().accounts({\n    escrow: escrowPDA,\n    player1: player1Pubkey,\n    player2: player2Pubkey,\n    escrowAccount: escrowAccount.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).transaction();\n  await sendAndConfirm(tx);\n}\n\n/**\n * Resolve escrow by specifying the winner\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} winnerPubkey\n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPDA,\n    winner: winnerPubkey,\n    house: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).transaction();\n  await sendAndConfirm(tx);\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","getProvider","PROGRAM_ID","address","sendAndConfirm","tx","provider","connection","blockhash","getLatestBlockhash","recentBlockhash","feePayer","wallet","publicKey","signed","signTransaction","raw","serialize","sig","sendRawTransaction","skipPreflight","preflightCommitment","confirmTransaction","initializeEscrow","wagerLamports","program","Program","nonce","Math","floor","random","escrowPDA","findProgramAddress","Buffer","from","toBuffer","BN","toArrayLike","programId","methods","initialize","accounts","escrow","player1","authority","systemProgram","transaction","joinAndDeposit","escrowAccount","account","fetch","player2","depositToEscrow","deposit","payer","cancelEscrow","player1Pubkey","player2Pubkey","cancel","resolveEscrow","winnerPubkey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\n\nconst PROGRAM_ID = new PublicKey(idl.address);\n\n/**\n * Populate blockhash & feePayer, have wallet sign, send + confirm.\n */\nasync function sendAndConfirm(tx) {\n  const provider = getProvider();\n  const connection = provider.connection;\n\n  // fetch a fresh blockhash\n  const { blockhash } = await connection.getLatestBlockhash(\"confirmed\");\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = provider.wallet.publicKey;\n\n  // have the wallet sign\n  const signed = await provider.wallet.signTransaction(tx);\n\n  // send it\n  const raw = signed.serialize();\n  const sig = await connection.sendRawTransaction(raw, {\n    skipPreflight: true,\n    preflightCommitment: \"confirmed\",\n  });\n\n  // wait for confirmation\n  await connection.confirmTransaction(sig, \"confirmed\");\n  return sig;\n}\n\n/**\n * Initialize a new escrow\n * @param {number} wagerLamports amount in lamports\n * @returns {PublicKey} PDA of escrow\n */\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  // generate a nonce\n  const nonce = Math.floor(Math.random() * 1_000_000);\n\n  // derive the PDA\n  const [escrowPDA] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      provider.wallet.publicKey.toBuffer(),\n      new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  // build the initialize transaction\n  const tx = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPDA,\n      player1: provider.wallet.publicKey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n\n  // send & confirm\n  await sendAndConfirm(tx);\n\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one transaction\n * @param {PublicKey} escrowPDA\n */\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  const tx = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPDA,\n      player2: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx);\n}\n\n/**\n * Deposit to escrow (for player 2 if using separate deposit)\n * @param {PublicKey} escrowPDA\n */\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  const tx = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPDA,\n      payer: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx);\n}\n\n/**\n * Cancel an escrow\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} player1Pubkey\n * @param {PublicKey} player2Pubkey\n */\nexport async function cancelEscrow(\n  escrowPDA,\n  player1Pubkey,\n  player2Pubkey\n) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  const tx = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPDA,\n      player1: player1Pubkey,\n      player2: player2Pubkey,\n      escrowAccount: escrowAccount.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx);\n}\n\n/**\n * Resolve escrow by specifying the winner\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} winnerPubkey\n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  const tx = await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPDA,\n      winner: winnerPubkey,\n      house: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}