{"ast":null,"code":"// NOTE: All methods below send transactions and return *after signature*.\n// DO NOT wait for network confirmation or use connection.confirmTransaction here!\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { getProgram } from \"./solana\";\n\n/**\n * Initialize the escrow on‑chain and return its PDA.\n * This ONLY waits for the transaction to be sent, NOT confirmed!\n */\nexport async function initializeEscrow(wagerLamports) {\n  const program = getProgram();\n  const walletPk = program.provider.wallet.publicKey;\n  // Random nonce for PDA uniqueness\n  const nonce = new anchor.BN(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER), 10, \"le\");\n  const [escrowPda] = await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"escrow\"), walletPk.toBuffer(), nonce.toArrayLike(Buffer, \"le\", 8)], program.programId);\n  try {\n    await program.methods.initialize(new anchor.BN(wagerLamports), nonce).accounts({\n      escrow: escrowPda,\n      player1: walletPk,\n      authority: walletPk,\n      systemProgram: anchor.web3.SystemProgram.programId\n    }).rpc({\n      skipPreflight: true,\n      preflightCommitment: \"confirmed\"\n    });\n    // No await for confirmation here!\n  } catch (e) {\n    console.error(\"initializeEscrow failed:\", e);\n    throw e;\n  }\n  return escrowPda;\n}\n\n/** Join the escrow (only waits for signature, not confirmation). */\nexport async function joinEscrow(escrowPda) {\n  const program = getProgram();\n  try {\n    await program.methods.join().accounts({\n      escrow: escrowPda,\n      player2: program.provider.wallet.publicKey\n    }).rpc({\n      skipPreflight: true,\n      preflightCommitment: \"confirmed\"\n    });\n  } catch (e) {\n    console.error(\"joinEscrow failed:\", e);\n    throw e;\n  }\n}\n\n/** Deposit into the escrow (same as above). */\nexport async function depositToEscrow(escrowPda) {\n  const program = getProgram();\n  try {\n    await program.methods.deposit().accounts({\n      escrow: escrowPda,\n      payer: program.provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: anchor.web3.SystemProgram.programId\n    }).rpc({\n      skipPreflight: true,\n      preflightCommitment: \"confirmed\"\n    });\n  } catch (e) {\n    console.error(\"depositToEscrow failed:\", e);\n    throw e;\n  }\n}\n\n/** Resolve the escrow, paying out the winner and house. */\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const house = new anchor.web3.PublicKey(\"A32Burni3cYyFAqjZM3CvCrStAKRFCfftk196Xfpx9Hs\");\n  try {\n    await program.methods.resolve(winnerPubkey).accounts({\n      escrow: escrowPda,\n      winner: winnerPubkey,\n      house,\n      escrowAccount: escrowPda,\n      authority: program.provider.wallet.publicKey\n    }).rpc({\n      skipPreflight: true,\n      preflightCommitment: \"confirmed\"\n    });\n  } catch (e) {\n    console.error(\"resolveEscrow failed:\", e);\n    throw e;\n  }\n}\n\n/** Cancel the escrow and refund both players. */\nexport async function cancelEscrow(escrowPda, player1, player2) {\n  const program = getProgram();\n  try {\n    await program.methods.cancel().accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: escrowPda,\n      authority: program.provider.wallet.publicKey\n    }).rpc({\n      skipPreflight: true,\n      preflightCommitment: \"confirmed\"\n    });\n  } catch (e) {\n    console.error(\"cancelEscrow failed:\", e);\n    throw e;\n  }\n}","map":{"version":3,"names":["anchor","getProgram","initializeEscrow","wagerLamports","program","walletPk","provider","wallet","publicKey","nonce","BN","Math","floor","random","Number","MAX_SAFE_INTEGER","escrowPda","web3","PublicKey","findProgramAddress","Buffer","from","toBuffer","toArrayLike","programId","methods","initialize","accounts","escrow","player1","authority","systemProgram","SystemProgram","rpc","skipPreflight","preflightCommitment","e","console","error","joinEscrow","join","player2","depositToEscrow","deposit","payer","escrowAccount","resolveEscrow","winnerPubkey","house","resolve","winner","cancelEscrow","cancel"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// NOTE: All methods below send transactions and return *after signature*.\n// DO NOT wait for network confirmation or use connection.confirmTransaction here!\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { getProgram } from \"./solana\";\n\n/**\n * Initialize the escrow on‑chain and return its PDA.\n * This ONLY waits for the transaction to be sent, NOT confirmed!\n */\nexport async function initializeEscrow(wagerLamports) {\n  const program = getProgram();\n  const walletPk = program.provider.wallet.publicKey;\n  // Random nonce for PDA uniqueness\n  const nonce = new anchor.BN(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER), 10, \"le\");\n  const [escrowPda] = await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"escrow\"), walletPk.toBuffer(), nonce.toArrayLike(Buffer, \"le\", 8)],\n    program.programId\n  );\n  try {\n    await program.methods\n      .initialize(new anchor.BN(wagerLamports), nonce)\n      .accounts({\n        escrow: escrowPda,\n        player1: walletPk,\n        authority: walletPk,\n        systemProgram: anchor.web3.SystemProgram.programId,\n      })\n      .rpc({\n        skipPreflight: true,\n        preflightCommitment: \"confirmed\",\n      });\n    // No await for confirmation here!\n  } catch (e) {\n    console.error(\"initializeEscrow failed:\", e);\n    throw e;\n  }\n  return escrowPda;\n}\n\n/** Join the escrow (only waits for signature, not confirmation). */\nexport async function joinEscrow(escrowPda) {\n  const program = getProgram();\n  try {\n    await program.methods\n      .join()\n      .accounts({\n        escrow: escrowPda,\n        player2: program.provider.wallet.publicKey,\n      })\n      .rpc({\n        skipPreflight: true,\n        preflightCommitment: \"confirmed\",\n      });\n  } catch (e) {\n    console.error(\"joinEscrow failed:\", e);\n    throw e;\n  }\n}\n\n/** Deposit into the escrow (same as above). */\nexport async function depositToEscrow(escrowPda) {\n  const program = getProgram();\n  try {\n    await program.methods\n      .deposit()\n      .accounts({\n        escrow: escrowPda,\n        payer: program.provider.wallet.publicKey,\n        escrowAccount: escrowPda,\n        systemProgram: anchor.web3.SystemProgram.programId,\n      })\n      .rpc({\n        skipPreflight: true,\n        preflightCommitment: \"confirmed\",\n      });\n  } catch (e) {\n    console.error(\"depositToEscrow failed:\", e);\n    throw e;\n  }\n}\n\n/** Resolve the escrow, paying out the winner and house. */\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const house = new anchor.web3.PublicKey(\"A32Burni3cYyFAqjZM3CvCrStAKRFCfftk196Xfpx9Hs\");\n  try {\n    await program.methods\n      .resolve(winnerPubkey)\n      .accounts({\n        escrow: escrowPda,\n        winner: winnerPubkey,\n        house,\n        escrowAccount: escrowPda,\n        authority: program.provider.wallet.publicKey,\n      })\n      .rpc({\n        skipPreflight: true,\n        preflightCommitment: \"confirmed\",\n      });\n  } catch (e) {\n    console.error(\"resolveEscrow failed:\", e);\n    throw e;\n  }\n}\n\n/** Cancel the escrow and refund both players. */\nexport async function cancelEscrow(escrowPda, player1, player2) {\n  const program = getProgram();\n  try {\n    await program.methods\n      .cancel()\n      .accounts({\n        escrow: escrowPda,\n        player1,\n        player2,\n        escrowAccount: escrowPda,\n        authority: program.provider.wallet.publicKey,\n      })\n      .rpc({\n        skipPreflight: true,\n        preflightCommitment: \"confirmed\",\n      });\n  } catch (e) {\n    console.error(\"cancelEscrow failed:\", e);\n    throw e;\n  }\n}\n"],"mappings":"AAAA;AACA;;AAEA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,UAAU,QAAQ,UAAU;;AAErC;AACA;AACA;AACA;AACA,OAAO,eAAeC,gBAAgBA,CAACC,aAAa,EAAE;EACpD,MAAMC,OAAO,GAAGH,UAAU,CAAC,CAAC;EAC5B,MAAMI,QAAQ,GAAGD,OAAO,CAACE,QAAQ,CAACC,MAAM,CAACC,SAAS;EAClD;EACA,MAAMC,KAAK,GAAG,IAAIT,MAAM,CAACU,EAAE,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGC,MAAM,CAACC,gBAAgB,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC;EAC1F,MAAM,CAACC,SAAS,CAAC,GAAG,MAAMhB,MAAM,CAACiB,IAAI,CAACC,SAAS,CAACC,kBAAkB,CAChE,CAACC,MAAM,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAEhB,QAAQ,CAACiB,QAAQ,CAAC,CAAC,EAAEb,KAAK,CAACc,WAAW,CAACH,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAChFhB,OAAO,CAACoB,SACV,CAAC;EACD,IAAI;IACF,MAAMpB,OAAO,CAACqB,OAAO,CAClBC,UAAU,CAAC,IAAI1B,MAAM,CAACU,EAAE,CAACP,aAAa,CAAC,EAAEM,KAAK,CAAC,CAC/CkB,QAAQ,CAAC;MACRC,MAAM,EAAEZ,SAAS;MACjBa,OAAO,EAAExB,QAAQ;MACjByB,SAAS,EAAEzB,QAAQ;MACnB0B,aAAa,EAAE/B,MAAM,CAACiB,IAAI,CAACe,aAAa,CAACR;IAC3C,CAAC,CAAC,CACDS,GAAG,CAAC;MACHC,aAAa,EAAE,IAAI;MACnBC,mBAAmB,EAAE;IACvB,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,CAAC,CAAC;IAC5C,MAAMA,CAAC;EACT;EACA,OAAOpB,SAAS;AAClB;;AAEA;AACA,OAAO,eAAeuB,UAAUA,CAACvB,SAAS,EAAE;EAC1C,MAAMZ,OAAO,GAAGH,UAAU,CAAC,CAAC;EAC5B,IAAI;IACF,MAAMG,OAAO,CAACqB,OAAO,CAClBe,IAAI,CAAC,CAAC,CACNb,QAAQ,CAAC;MACRC,MAAM,EAAEZ,SAAS;MACjByB,OAAO,EAAErC,OAAO,CAACE,QAAQ,CAACC,MAAM,CAACC;IACnC,CAAC,CAAC,CACDyB,GAAG,CAAC;MACHC,aAAa,EAAE,IAAI;MACnBC,mBAAmB,EAAE;IACvB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEF,CAAC,CAAC;IACtC,MAAMA,CAAC;EACT;AACF;;AAEA;AACA,OAAO,eAAeM,eAAeA,CAAC1B,SAAS,EAAE;EAC/C,MAAMZ,OAAO,GAAGH,UAAU,CAAC,CAAC;EAC5B,IAAI;IACF,MAAMG,OAAO,CAACqB,OAAO,CAClBkB,OAAO,CAAC,CAAC,CACThB,QAAQ,CAAC;MACRC,MAAM,EAAEZ,SAAS;MACjB4B,KAAK,EAAExC,OAAO,CAACE,QAAQ,CAACC,MAAM,CAACC,SAAS;MACxCqC,aAAa,EAAE7B,SAAS;MACxBe,aAAa,EAAE/B,MAAM,CAACiB,IAAI,CAACe,aAAa,CAACR;IAC3C,CAAC,CAAC,CACDS,GAAG,CAAC;MACHC,aAAa,EAAE,IAAI;MACnBC,mBAAmB,EAAE;IACvB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,CAAC,CAAC;IAC3C,MAAMA,CAAC;EACT;AACF;;AAEA;AACA,OAAO,eAAeU,aAAaA,CAAC9B,SAAS,EAAE+B,YAAY,EAAE;EAC3D,MAAM3C,OAAO,GAAGH,UAAU,CAAC,CAAC;EAC5B,MAAM+C,KAAK,GAAG,IAAIhD,MAAM,CAACiB,IAAI,CAACC,SAAS,CAAC,8CAA8C,CAAC;EACvF,IAAI;IACF,MAAMd,OAAO,CAACqB,OAAO,CAClBwB,OAAO,CAACF,YAAY,CAAC,CACrBpB,QAAQ,CAAC;MACRC,MAAM,EAAEZ,SAAS;MACjBkC,MAAM,EAAEH,YAAY;MACpBC,KAAK;MACLH,aAAa,EAAE7B,SAAS;MACxBc,SAAS,EAAE1B,OAAO,CAACE,QAAQ,CAACC,MAAM,CAACC;IACrC,CAAC,CAAC,CACDyB,GAAG,CAAC;MACHC,aAAa,EAAE,IAAI;MACnBC,mBAAmB,EAAE;IACvB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,CAAC,CAAC;IACzC,MAAMA,CAAC;EACT;AACF;;AAEA;AACA,OAAO,eAAee,YAAYA,CAACnC,SAAS,EAAEa,OAAO,EAAEY,OAAO,EAAE;EAC9D,MAAMrC,OAAO,GAAGH,UAAU,CAAC,CAAC;EAC5B,IAAI;IACF,MAAMG,OAAO,CAACqB,OAAO,CAClB2B,MAAM,CAAC,CAAC,CACRzB,QAAQ,CAAC;MACRC,MAAM,EAAEZ,SAAS;MACjBa,OAAO;MACPY,OAAO;MACPI,aAAa,EAAE7B,SAAS;MACxBc,SAAS,EAAE1B,OAAO,CAACE,QAAQ,CAACC,MAAM,CAACC;IACrC,CAAC,CAAC,CACDyB,GAAG,CAAC;MACHC,aAAa,EAAE,IAAI;MACnBC,mBAAmB,EAAE;IACvB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,CAAC,CAAC;IACxC,MAAMA,CAAC;EACT;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}