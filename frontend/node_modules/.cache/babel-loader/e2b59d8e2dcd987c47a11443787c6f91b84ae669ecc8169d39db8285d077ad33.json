{"ast":null,"code":"var _idl$metadata;\n// src/solana.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Connection, clusterApiUrl, PublicKey } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Program ID from the IDL metadata (fallback to the older idl.address field)\nexport const PROGRAM_ID = new PublicKey(((_idl$metadata = idl.metadata) === null || _idl$metadata === void 0 ? void 0 : _idl$metadata.address) || idl.address);\n\n/**\n * Call this once, after your wallet connects.\n * It creates an AnchorProvider and sets it as the global provider.\n */\nexport function setProvider(wallet) {\n  if (!wallet || !wallet.publicKey) {\n    throw new Error(\"Wallet not connected\");\n  }\n\n  // Choose cluster (default to mainnet-beta)\n  const network = process.env.REACT_APP_SOLANA_NETWORK || \"mainnet-beta\";\n  const rpcEndpoint = process.env.REACT_APP_SOLANA_RPC || clusterApiUrl(network);\n\n  // Build a connection + provider\n  const connection = new Connection(rpcEndpoint, \"confirmed\");\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n\n  // Install as the global provider for anchor.getProvider()\n  anchor.setProvider(provider);\n}\n\n/**\n * Returns the current global AnchorProvider.\n * You must have called setProvider() first.\n */\nexport function getProvider() {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Call setProvider first.\");\n  return provider;\n}","map":{"version":3,"names":["anchor","Connection","clusterApiUrl","PublicKey","idl","PROGRAM_ID","_idl$metadata","metadata","address","setProvider","wallet","publicKey","Error","network","process","env","REACT_APP_SOLANA_NETWORK","rpcEndpoint","REACT_APP_SOLANA_RPC","connection","provider","AnchorProvider","preflightCommitment","commitment","getProvider"],"sources":["/home/kokoi/sol-wager-app/frontend/src/solana.js"],"sourcesContent":["// src/solana.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Connection, clusterApiUrl, PublicKey } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Program ID from the IDL metadata (fallback to the older idl.address field)\nexport const PROGRAM_ID = new PublicKey(idl.metadata?.address || idl.address);\n\n/**\n * Call this once, after your wallet connects.\n * It creates an AnchorProvider and sets it as the global provider.\n */\nexport function setProvider(wallet) {\n  if (!wallet || !wallet.publicKey) {\n    throw new Error(\"Wallet not connected\");\n  }\n\n  // Choose cluster (default to mainnet-beta)\n  const network = process.env.REACT_APP_SOLANA_NETWORK || \"mainnet-beta\";\n  const rpcEndpoint =\n    process.env.REACT_APP_SOLANA_RPC || clusterApiUrl(network);\n\n  // Build a connection + provider\n  const connection = new Connection(rpcEndpoint, \"confirmed\");\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\",\n  });\n\n  // Install as the global provider for anchor.getProvider()\n  anchor.setProvider(provider);\n}\n\n/**\n * Returns the current global AnchorProvider.\n * You must have called setProvider() first.\n */\nexport function getProvider() {\n  const provider = anchor.getProvider();\n  if (!provider) throw new Error(\"Provider not set. Call setProvider first.\");\n  return provider;\n}\n"],"mappings":";AAAA;;AAEA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,UAAU,EAAEC,aAAa,EAAEC,SAAS,QAAQ,iBAAiB;AACtE,OAAOC,GAAG,MAAM,6BAA6B;;AAE7C;AACA,OAAO,MAAMC,UAAU,GAAG,IAAIF,SAAS,CAAC,EAAAG,aAAA,GAAAF,GAAG,CAACG,QAAQ,cAAAD,aAAA,uBAAZA,aAAA,CAAcE,OAAO,KAAIJ,GAAG,CAACI,OAAO,CAAC;;AAE7E;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAE;EAClC,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACC,SAAS,EAAE;IAChC,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EACzC;;EAEA;EACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,cAAc;EACtE,MAAMC,WAAW,GACfH,OAAO,CAACC,GAAG,CAACG,oBAAoB,IAAIhB,aAAa,CAACW,OAAO,CAAC;;EAE5D;EACA,MAAMM,UAAU,GAAG,IAAIlB,UAAU,CAACgB,WAAW,EAAE,WAAW,CAAC;EAC3D,MAAMG,QAAQ,GAAG,IAAIpB,MAAM,CAACqB,cAAc,CAACF,UAAU,EAAET,MAAM,EAAE;IAC7DY,mBAAmB,EAAE,WAAW;IAChCC,UAAU,EAAE;EACd,CAAC,CAAC;;EAEF;EACAvB,MAAM,CAACS,WAAW,CAACW,QAAQ,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASI,WAAWA,CAAA,EAAG;EAC5B,MAAMJ,QAAQ,GAAGpB,MAAM,CAACwB,WAAW,CAAC,CAAC;EACrC,IAAI,CAACJ,QAAQ,EAAE,MAAM,IAAIR,KAAK,CAAC,2CAA2C,CAAC;EAC3E,OAAOQ,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}