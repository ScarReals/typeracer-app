{"ast":null,"code":"import { PublicKey } from \"@solana/web3.js\";\nimport { getProgram } from \"./solana\";\n\n/**\n * Fetch escrow account data by PDA.\n * @param {PublicKey} escrowPDA - PDA of the escrow account.\n * @returns {Promise<Object>} Escrow account data.\n */\nexport async function fetchEscrowData(escrowPDA) {\n  const program = getProgram();\n  try {\n    const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n    return escrowAccount;\n  } catch (error) {\n    throw new Error(\"Failed to fetch escrow data: \" + error.message);\n  }\n}\n\n/**\n * Derive escrow PDA for a given player1 public key and nonce.\n * @param {PublicKey} player1Pubkey\n * @param {number} nonce\n * @returns {Promise<[PublicKey, number]>} PDA and bump seed.\n */\nexport async function getEscrowPDA(player1Pubkey, nonce) {\n  const program = getProgram();\n  return await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), player1Pubkey.toBuffer(), Buffer.from(Uint8Array.of(nonce >> 56 & 0xff, nonce >> 48 & 0xff, nonce >> 40 & 0xff, nonce >> 32 & 0xff, nonce >> 24 & 0xff, nonce >> 16 & 0xff, nonce >> 8 & 0xff, nonce & 0xff))], program.programId);\n}\n\n/**\n * Initialize a new escrow account.\n * @param {PublicKey} player1Pubkey - Player1 public key.\n * @param {number} wager - Wager amount in lamports.\n * @param {number} nonce - Unique nonce.\n * @returns {Promise<string>} Transaction signature.\n */\nexport async function initializeEscrow(player1Pubkey, wager, nonce) {\n  const program = getProgram();\n  const [escrowPDA, _bump] = await getEscrowPDA(player1Pubkey, nonce);\n  const tx = await program.methods.initialize(new anchor.BN(wager), new anchor.BN(nonce)).accounts({\n    escrow: escrowPDA,\n    player1: player1Pubkey,\n    authority: program.provider.publicKey,\n    systemProgram: anchor.web3.SystemProgram.programId\n  }).rpc();\n  return tx;\n}\n\n/**\n * Player2 joins an existing escrow.\n * @param {PublicKey} escrowPDA - PDA of the escrow account.\n * @param {PublicKey} player2Pubkey - Player2 public key.\n * @returns {Promise<string>} Transaction signature.\n */\nexport async function joinEscrow(escrowPDA, player2Pubkey) {\n  const program = getProgram();\n  const tx = await program.methods.join().accounts({\n    escrow: escrowPDA,\n    player2: player2Pubkey\n  }).rpc();\n  return tx;\n}\n\n/**\n * Player deposits lamports into the escrow.\n * @param {PublicKey} escrowPDA - PDA of the escrow account.\n * @param {PublicKey} payerPubkey - Payer public key.\n * @param {PublicKey} escrowAccount - Escrow account to receive funds.\n * @returns {Promise<string>} Transaction signature.\n */\nexport async function depositToEscrow(escrowPDA, payerPubkey, escrowAccount) {\n  const program = getProgram();\n  const tx = await program.methods.deposit().accounts({\n    escrow: escrowPDA,\n    payer: payerPubkey,\n    escrowAccount: escrowAccount,\n    systemProgram: anchor.web3.SystemProgram.programId\n  }).rpc();\n  return tx;\n}\n\n/**\n * Resolve the escrow by specifying the winner.\n * @param {PublicKey} escrowPDA - PDA of the escrow account.\n * @param {PublicKey} winnerPubkey - Winner public key.\n * @param {PublicKey} housePubkey - House public key.\n * @param {PublicKey} escrowAccount - Escrow account holding funds.\n * @returns {Promise<string>} Transaction signature.\n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey, housePubkey, escrowAccount) {\n  const program = getProgram();\n  const tx = await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPDA,\n    winner: winnerPubkey,\n    house: housePubkey,\n    escrowAccount: escrowAccount,\n    authority: program.provider.publicKey\n  }).rpc();\n  return tx;\n}","map":{"version":3,"names":["PublicKey","getProgram","fetchEscrowData","escrowPDA","program","escrowAccount","account","escrow","fetch","error","Error","message","getEscrowPDA","player1Pubkey","nonce","findProgramAddress","Buffer","from","toBuffer","Uint8Array","of","programId","initializeEscrow","wager","_bump","tx","methods","initialize","anchor","BN","accounts","player1","authority","provider","publicKey","systemProgram","web3","SystemProgram","rpc","joinEscrow","player2Pubkey","join","player2","depositToEscrow","payerPubkey","deposit","payer","resolveEscrow","winnerPubkey","housePubkey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport { getProgram } from \"./solana\";\n\n/**\n * Fetch escrow account data by PDA.\n * @param {PublicKey} escrowPDA - PDA of the escrow account.\n * @returns {Promise<Object>} Escrow account data.\n */\nexport async function fetchEscrowData(escrowPDA) {\n  const program = getProgram();\n  try {\n    const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n    return escrowAccount;\n  } catch (error) {\n    throw new Error(\"Failed to fetch escrow data: \" + error.message);\n  }\n}\n\n/**\n * Derive escrow PDA for a given player1 public key and nonce.\n * @param {PublicKey} player1Pubkey\n * @param {number} nonce\n * @returns {Promise<[PublicKey, number]>} PDA and bump seed.\n */\nexport async function getEscrowPDA(player1Pubkey, nonce) {\n  const program = getProgram();\n  return await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      player1Pubkey.toBuffer(),\n      Buffer.from(Uint8Array.of(\n        (nonce >> 56) & 0xff,\n        (nonce >> 48) & 0xff,\n        (nonce >> 40) & 0xff,\n        (nonce >> 32) & 0xff,\n        (nonce >> 24) & 0xff,\n        (nonce >> 16) & 0xff,\n        (nonce >> 8) & 0xff,\n        nonce & 0xff\n      )),\n    ],\n    program.programId\n  );\n}\n\n/**\n * Initialize a new escrow account.\n * @param {PublicKey} player1Pubkey - Player1 public key.\n * @param {number} wager - Wager amount in lamports.\n * @param {number} nonce - Unique nonce.\n * @returns {Promise<string>} Transaction signature.\n */\nexport async function initializeEscrow(player1Pubkey, wager, nonce) {\n  const program = getProgram();\n  const [escrowPDA, _bump] = await getEscrowPDA(player1Pubkey, nonce);\n\n  const tx = await program.methods\n    .initialize(new anchor.BN(wager), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPDA,\n      player1: player1Pubkey,\n      authority: program.provider.publicKey,\n      systemProgram: anchor.web3.SystemProgram.programId,\n    })\n    .rpc();\n\n  return tx;\n}\n\n/**\n * Player2 joins an existing escrow.\n * @param {PublicKey} escrowPDA - PDA of the escrow account.\n * @param {PublicKey} player2Pubkey - Player2 public key.\n * @returns {Promise<string>} Transaction signature.\n */\nexport async function joinEscrow(escrowPDA, player2Pubkey) {\n  const program = getProgram();\n\n  const tx = await program.methods\n    .join()\n    .accounts({\n      escrow: escrowPDA,\n      player2: player2Pubkey,\n    })\n    .rpc();\n\n  return tx;\n}\n\n/**\n * Player deposits lamports into the escrow.\n * @param {PublicKey} escrowPDA - PDA of the escrow account.\n * @param {PublicKey} payerPubkey - Payer public key.\n * @param {PublicKey} escrowAccount - Escrow account to receive funds.\n * @returns {Promise<string>} Transaction signature.\n */\nexport async function depositToEscrow(escrowPDA, payerPubkey, escrowAccount) {\n  const program = getProgram();\n\n  const tx = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPDA,\n      payer: payerPubkey,\n      escrowAccount: escrowAccount,\n      systemProgram: anchor.web3.SystemProgram.programId,\n    })\n    .rpc();\n\n  return tx;\n}\n\n/**\n * Resolve the escrow by specifying the winner.\n * @param {PublicKey} escrowPDA - PDA of the escrow account.\n * @param {PublicKey} winnerPubkey - Winner public key.\n * @param {PublicKey} housePubkey - House public key.\n * @param {PublicKey} escrowAccount - Escrow account holding funds.\n * @returns {Promise<string>} Transaction signature.\n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey, housePubkey, escrowAccount) {\n  const program = getProgram();\n\n  const tx = await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPDA,\n      winner: winnerPubkey,\n      house: housePubkey,\n      escrowAccount: escrowAccount,\n      authority: program.provider.publicKey,\n    })\n    .rpc();\n\n  return tx;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}