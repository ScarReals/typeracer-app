{"ast":null,"code":"// frontend/src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { getProgram } from \"./solana\";\n\n/** \n * Waits up to 60 s for a signature to confirm at the given commitment \n */\nasync function waitForConfirmation(connection, signature, commitment = \"processed\") {\n  const start = Date.now();\n  while (true) {\n    const resp = await connection.getSignatureStatuses([signature]);\n    const info = resp.value[0];\n    if (info && info.confirmationStatus === commitment) {\n      return info;\n    }\n    if (Date.now() - start > 60000) {\n      throw new Error(`Timed out waiting for confirmation of ${signature}`);\n    }\n    await new Promise(r => setTimeout(r, 500));\n  }\n}\n\n/**\n * Combines initialize + deposit into one on‑chain TX.\n * Returns the PDA public key.\n */\nexport async function initializeAndDeposit(wagerLamports) {\n  const program = getProgram();\n  const connection = program.provider.connection;\n  const walletPk = program.provider.wallet.publicKey;\n\n  // 1) Build PDA\n  const nonce = new anchor.BN(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER), 10, \"le\");\n  const [escrowPda] = await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"escrow\"), walletPk.toBuffer(), nonce.toArrayLike(Buffer, \"le\", 8)], program.programId);\n\n  // 2) Build our transaction\n  const tx = new anchor.web3.Transaction();\n\n  // initialize instruction\n  tx.add(await program.methods.initialize(new anchor.BN(wagerLamports), nonce).accounts({\n    escrow: escrowPda,\n    player1: walletPk,\n    authority: walletPk,\n    systemProgram: anchor.web3.SystemProgram.programId\n  }).instruction());\n\n  // deposit instruction\n  tx.add(await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: walletPk,\n    escrowAccount: escrowPda,\n    systemProgram: anchor.web3.SystemProgram.programId\n  }).instruction());\n\n  // 3) Send & confirm\n  const {\n    blockhash,\n    lastValidBlockHeight\n  } = await connection.getLatestBlockhash(\"processed\");\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = walletPk;\n\n  // sign & send\n  const signed = await program.provider.wallet.signTransaction(tx);\n  const signature = await connection.sendRawTransaction(signed.serialize(), {\n    skipPreflight: false,\n    preflightCommitment: \"processed\"\n  });\n\n  // wait for confirmation\n  await waitForConfirmation(connection, signature, \"processed\");\n  return escrowPda;\n}","map":{"version":3,"names":["anchor","getProgram","waitForConfirmation","connection","signature","commitment","start","Date","now","resp","getSignatureStatuses","info","value","confirmationStatus","Error","Promise","r","setTimeout","initializeAndDeposit","wagerLamports","program","provider","walletPk","wallet","publicKey","nonce","BN","Math","floor","random","Number","MAX_SAFE_INTEGER","escrowPda","web3","PublicKey","findProgramAddress","Buffer","from","toBuffer","toArrayLike","programId","tx","Transaction","add","methods","initialize","accounts","escrow","player1","authority","systemProgram","SystemProgram","instruction","deposit","payer","escrowAccount","blockhash","lastValidBlockHeight","getLatestBlockhash","recentBlockhash","feePayer","signed","signTransaction","sendRawTransaction","serialize","skipPreflight","preflightCommitment"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { getProgram } from \"./solana\";\n\n/** \n * Waits up to 60 s for a signature to confirm at the given commitment \n */\nasync function waitForConfirmation(connection, signature, commitment = \"processed\") {\n  const start = Date.now();\n  while (true) {\n    const resp = await connection.getSignatureStatuses([signature]);\n    const info = resp.value[0];\n    if (info && info.confirmationStatus === commitment) {\n      return info;\n    }\n    if (Date.now() - start > 60_000) {\n      throw new Error(`Timed out waiting for confirmation of ${signature}`);\n    }\n    await new Promise((r) => setTimeout(r, 500));\n  }\n}\n\n/**\n * Combines initialize + deposit into one on‑chain TX.\n * Returns the PDA public key.\n */\nexport async function initializeAndDeposit(wagerLamports) {\n  const program = getProgram();\n  const connection = program.provider.connection;\n  const walletPk = program.provider.wallet.publicKey;\n\n  // 1) Build PDA\n  const nonce = new anchor.BN(\n    Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),\n    10,\n    \"le\"\n  );\n  const [escrowPda] = await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      walletPk.toBuffer(),\n      nonce.toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  // 2) Build our transaction\n  const tx = new anchor.web3.Transaction();\n\n  // initialize instruction\n  tx.add(\n    await program.methods\n      .initialize(new anchor.BN(wagerLamports), nonce)\n      .accounts({\n        escrow: escrowPda,\n        player1: walletPk,\n        authority: walletPk,\n        systemProgram: anchor.web3.SystemProgram.programId,\n      })\n      .instruction()\n  );\n\n  // deposit instruction\n  tx.add(\n    await program.methods\n      .deposit()\n      .accounts({\n        escrow: escrowPda,\n        payer: walletPk,\n        escrowAccount: escrowPda,\n        systemProgram: anchor.web3.SystemProgram.programId,\n      })\n      .instruction()\n  );\n\n  // 3) Send & confirm\n  const { blockhash, lastValidBlockHeight } =\n    await connection.getLatestBlockhash(\"processed\");\n\n  tx.recentBlockhash = blockhash;\n  tx.feePayer = walletPk;\n\n  // sign & send\n  const signed = await program.provider.wallet.signTransaction(tx);\n  const signature = await connection.sendRawTransaction(signed.serialize(), {\n    skipPreflight: false,\n    preflightCommitment: \"processed\",\n  });\n\n  // wait for confirmation\n  await waitForConfirmation(connection, signature, \"processed\");\n\n  return escrowPda;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}