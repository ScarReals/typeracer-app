{"ast":null,"code":"// frontend/src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { getProgram } from \"./solana\";\n\n/** \n * Sign, send, then confirm via simple confirmTransaction(sig, commitment)\n */\nasync function signSendAndConfirm(tx, provider) {\n  const conn = provider.connection;\n  const wallet = provider.wallet;\n\n  // ensure blockhash + feePayer\n  if (!tx.recentBlockhash) {\n    const {\n      blockhash\n    } = await conn.getLatestBlockhash(\"processed\");\n    tx.recentBlockhash = blockhash;\n  }\n  if (!tx.feePayer) {\n    tx.feePayer = provider.wallet.publicKey;\n  }\n\n  // sign\n  let signed;\n  if (wallet.signTransaction) {\n    signed = await wallet.signTransaction(tx);\n  } else {\n    [signed] = await wallet.signAllTransactions([tx]);\n  }\n\n  // send\n  const raw = signed.serialize();\n  const sig = await conn.sendRawTransaction(raw, {\n    skipPreflight: false,\n    preflightCommitment: \"processed\"\n  });\n  console.log(`[escrow.js] sent tx ${sig}`);\n\n  // confirm\n  console.log(`[escrow.js] confirming ${sig}…`);\n  await conn.confirmTransaction(sig, \"processed\");\n  console.log(`[escrow.js] confirmed ${sig}`);\n  return sig;\n}\n\n/**\n * Initialize + Deposit in one atomic transaction.\n * Returns the new escrow PDA.\n */\nexport async function initializeAndDeposit(wagerLamports) {\n  console.log(\"[escrow.js] ▶️ initializeAndDeposit\", wagerLamports);\n  const program = getProgram();\n  const provider = program.provider;\n  const walletPk = provider.wallet.publicKey;\n\n  // derive PDA\n  const nonce = new anchor.BN(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER), 10, \"le\");\n  const [escrowPda] = await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"escrow\"), walletPk.toBuffer(), nonce.toArrayLike(Buffer, \"le\", 8)], program.programId);\n  console.log(\"[escrow.js]   PDA:\", escrowPda.toBase58());\n\n  // build transaction\n  const tx = new anchor.web3.Transaction().add(await program.methods.initialize(new anchor.BN(wagerLamports), nonce).accounts({\n    escrow: escrowPda,\n    player1: walletPk,\n    authority: walletPk,\n    systemProgram: anchor.web3.SystemProgram.programId\n  }).instruction()).add(await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: walletPk,\n    escrowAccount: escrowPda,\n    systemProgram: anchor.web3.SystemProgram.programId\n  }).instruction());\n\n  // sign, send & confirm\n  await signSendAndConfirm(tx, provider);\n  return escrowPda;\n}\n\n// For backward‐compatibility if you still call these:\n\nexport async function initializeEscrow(wagerLamports) {\n  return initializeAndDeposit(wagerLamports);\n}\nexport async function depositToEscrow(escrowPda) {\n  console.log(\"[escrow.js] ▶️ depositToEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const ix = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: provider.wallet.publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: anchor.web3.SystemProgram.programId\n  }).instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n  await signSendAndConfirm(tx, provider);\n}\nexport async function joinEscrow(escrowPda) {\n  console.log(\"[escrow.js] ▶️ joinEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const ix = await program.methods.join().accounts({\n    escrow: escrowPda,\n    player2: provider.wallet.publicKey\n  }).instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n  await signSendAndConfirm(tx, provider);\n}\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  console.log(\"[escrow.js] ▶️ resolveEscrow\", escrowPda.toBase58(), winnerPubkey.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const house = new anchor.web3.PublicKey(\"A32Burni3cYyFAqjZM3CvCrStAKRFCfftk196Xfpx9Hs\");\n  const ix = await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPda,\n    winner: winnerPubkey,\n    house,\n    escrowAccount: escrowPda,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n  await signSendAndConfirm(tx, provider);\n}\nexport async function cancelEscrow(escrowPda, player1, player2) {\n  console.log(\"[escrow.js] ▶️ cancelEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrowAccount: escrowPda,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n  await signSendAndConfirm(tx, provider);\n}","map":{"version":3,"names":["anchor","getProgram","signSendAndConfirm","tx","provider","conn","connection","wallet","recentBlockhash","blockhash","getLatestBlockhash","feePayer","publicKey","signed","signTransaction","signAllTransactions","raw","serialize","sig","sendRawTransaction","skipPreflight","preflightCommitment","console","log","confirmTransaction","initializeAndDeposit","wagerLamports","program","walletPk","nonce","BN","Math","floor","random","Number","MAX_SAFE_INTEGER","escrowPda","web3","PublicKey","findProgramAddress","Buffer","from","toBuffer","toArrayLike","programId","toBase58","Transaction","add","methods","initialize","accounts","escrow","player1","authority","systemProgram","SystemProgram","instruction","deposit","payer","escrowAccount","initializeEscrow","depositToEscrow","ix","joinEscrow","join","player2","resolveEscrow","winnerPubkey","house","resolve","winner","cancelEscrow","cancel"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { getProgram } from \"./solana\";\n\n/** \n * Sign, send, then confirm via simple confirmTransaction(sig, commitment)\n */\nasync function signSendAndConfirm(tx, provider) {\n  const conn = provider.connection;\n  const wallet = provider.wallet;\n\n  // ensure blockhash + feePayer\n  if (!tx.recentBlockhash) {\n    const { blockhash } = await conn.getLatestBlockhash(\"processed\");\n    tx.recentBlockhash = blockhash;\n  }\n  if (!tx.feePayer) {\n    tx.feePayer = provider.wallet.publicKey;\n  }\n\n  // sign\n  let signed;\n  if (wallet.signTransaction) {\n    signed = await wallet.signTransaction(tx);\n  } else {\n    [signed] = await wallet.signAllTransactions([tx]);\n  }\n\n  // send\n  const raw = signed.serialize();\n  const sig = await conn.sendRawTransaction(raw, {\n    skipPreflight: false,\n    preflightCommitment: \"processed\",\n  });\n  console.log(`[escrow.js] sent tx ${sig}`);\n\n  // confirm\n  console.log(`[escrow.js] confirming ${sig}…`);\n  await conn.confirmTransaction(sig, \"processed\");\n  console.log(`[escrow.js] confirmed ${sig}`);\n  return sig;\n}\n\n/**\n * Initialize + Deposit in one atomic transaction.\n * Returns the new escrow PDA.\n */\nexport async function initializeAndDeposit(wagerLamports) {\n  console.log(\"[escrow.js] ▶️ initializeAndDeposit\", wagerLamports);\n  const program = getProgram();\n  const provider = program.provider;\n  const walletPk = provider.wallet.publicKey;\n\n  // derive PDA\n  const nonce = new anchor.BN(\n    Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),\n    10,\n    \"le\"\n  );\n  const [escrowPda] = await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      walletPk.toBuffer(),\n      nonce.toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n  console.log(\"[escrow.js]   PDA:\", escrowPda.toBase58());\n\n  // build transaction\n  const tx = new anchor.web3.Transaction()\n    .add(\n      await program.methods\n        .initialize(new anchor.BN(wagerLamports), nonce)\n        .accounts({\n          escrow: escrowPda,\n          player1: walletPk,\n          authority: walletPk,\n          systemProgram: anchor.web3.SystemProgram.programId,\n        })\n        .instruction()\n    )\n    .add(\n      await program.methods\n        .deposit()\n        .accounts({\n          escrow: escrowPda,\n          payer: walletPk,\n          escrowAccount: escrowPda,\n          systemProgram: anchor.web3.SystemProgram.programId,\n        })\n        .instruction()\n    );\n\n  // sign, send & confirm\n  await signSendAndConfirm(tx, provider);\n  return escrowPda;\n}\n\n// For backward‐compatibility if you still call these:\n\nexport async function initializeEscrow(wagerLamports) {\n  return initializeAndDeposit(wagerLamports);\n}\n\nexport async function depositToEscrow(escrowPda) {\n  console.log(\"[escrow.js] ▶️ depositToEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n\n  const ix = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: anchor.web3.SystemProgram.programId,\n    })\n    .instruction();\n\n  const tx = new anchor.web3.Transaction().add(ix);\n  await signSendAndConfirm(tx, provider);\n}\n\nexport async function joinEscrow(escrowPda) {\n  console.log(\"[escrow.js] ▶️ joinEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n\n  const ix = await program.methods\n    .join()\n    .accounts({\n      escrow: escrowPda,\n      player2: provider.wallet.publicKey,\n    })\n    .instruction();\n\n  const tx = new anchor.web3.Transaction().add(ix);\n  await signSendAndConfirm(tx, provider);\n}\n\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  console.log(\n    \"[escrow.js] ▶️ resolveEscrow\",\n    escrowPda.toBase58(),\n    winnerPubkey.toBase58()\n  );\n  const program = getProgram();\n  const provider = program.provider;\n  const house = new anchor.web3.PublicKey(\n    \"A32Burni3cYyFAqjZM3CvCrStAKRFCfftk196Xfpx9Hs\"\n  );\n\n  const ix = await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPda,\n      winner: winnerPubkey,\n      house,\n      escrowAccount: escrowPda,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n\n  const tx = new anchor.web3.Transaction().add(ix);\n  await signSendAndConfirm(tx, provider);\n}\n\nexport async function cancelEscrow(escrowPda, player1, player2) {\n  console.log(\"[escrow.js] ▶️ cancelEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: escrowPda,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n\n  const tx = new anchor.web3.Transaction().add(ix);\n  await signSendAndConfirm(tx, provider);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}