{"ast":null,"code":"// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily grab your Anchor Program; must call setProvider(wallet) first. */\nfunction getProgram() {\n  const provider = getProvider();\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * 1) Initialize & deposit\n */\nexport async function buildInitializeAndDepositIxns(lamports, initializerPubkey, nonce) {\n  const program = getProgram();\n\n  // pack nonce into 8‑byte LE buffer\n  const nonceBuf = Buffer.from(new anchor.BN(nonce).toArray(\"le\", 8));\n\n  // derive PDA\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), initializerPubkey.toBuffer(), nonceBuf], PROGRAM_ID);\n\n  // initialize instruction\n  const ixInit = await program.methods.initialize(new anchor.BN(lamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: initializerPubkey,\n    authority: initializerPubkey,\n    system_program: SystemProgram.programId\n  }).instruction();\n\n  // deposit SOL via SystemProgram.transfer\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports\n  });\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * 2) Join & deposit\n */\nexport async function buildJoinAndDepositIxn(escrowId) {\n  const program = getProgram();\n  const provider = getProvider();\n  const escrowPda = typeof escrowId === \"string\" ? new PublicKey(escrowId) : escrowId;\n  return await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: provider.wallet.publicKey,\n    escrow_account: escrowPda,\n    system_program: SystemProgram.programId\n  }).instruction();\n}\n\n/**\n * 3) Cancel an escrow\n */\nexport async function buildCancelIxn(escrowId, player1Pubkey, player2Pubkey) {\n  const escrowPda = new PublicKey(escrowId);\n  const p1 = new PublicKey(player1Pubkey);\n  const p2 = new PublicKey(player2Pubkey);\n\n  // hard‑coded 8‑byte discriminator for `cancel`\n  const CANCEL_DISCRIMINATOR = [232, 219, 223, 41, 219, 236, 220, 190];\n  const data = Buffer.from(CANCEL_DISCRIMINATOR);\n\n  // accounts in IDL order\n  const keys = [{\n    pubkey: escrowPda,\n    isSigner: false,\n    isWritable: true\n  },\n  // escrow\n  {\n    pubkey: p1,\n    isSigner: false,\n    isWritable: true\n  },\n  // player1\n  {\n    pubkey: p2,\n    isSigner: false,\n    isWritable: true\n  },\n  // player2\n  {\n    pubkey: escrowPda,\n    isSigner: false,\n    isWritable: true\n  } // escrow_account\n  ];\n  return new TransactionInstruction({\n    programId: PROGRAM_ID,\n    keys,\n    data\n  });\n}\n\n/**\n * 4) Resolve / payout\n */\nexport async function buildResolveIxn(escrowId, winnerPubkey) {\n  const escrowPda = new PublicKey(escrowId);\n  const winnerKey = typeof winnerPubkey === \"string\" ? new PublicKey(winnerPubkey) : winnerPubkey;\n\n  // hard‑coded 8‑byte discriminator for `resolve`\n  const RESOLVE_DISCRIMINATOR = [246, 150, 236, 206, 108, 63, 58, 10];\n  const data = Buffer.concat([Buffer.from(RESOLVE_DISCRIMINATOR), Buffer.from(winnerKey.toBytes())]);\n  const program = getProgram();\n\n  // accounts in IDL order\n  const keys = [{\n    pubkey: escrowPda,\n    isSigner: false,\n    isWritable: true\n  },\n  // escrow\n  {\n    pubkey: winnerKey,\n    isSigner: false,\n    isWritable: true\n  },\n  // winner\n  {\n    pubkey: program.provider.wallet.publicKey,\n    isSigner: false,\n    isWritable: true\n  },\n  // house\n  {\n    pubkey: escrowPda,\n    isSigner: false,\n    isWritable: true\n  } // escrow_account\n  ];\n  return new TransactionInstruction({\n    programId: PROGRAM_ID,\n    keys,\n    data\n  });\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","TransactionInstruction","idl","PROGRAM_ID","getProvider","getProgram","provider","Program","buildInitializeAndDepositIxns","lamports","initializerPubkey","nonce","program","nonceBuf","Buffer","from","BN","toArray","escrowPda","findProgramAddress","toBuffer","ixInit","methods","initialize","accounts","escrow","player1","authority","system_program","programId","instruction","ixDeposit","transfer","fromPubkey","toPubkey","buildJoinAndDepositIxn","escrowId","joinAndDeposit","player2","wallet","publicKey","escrow_account","buildCancelIxn","player1Pubkey","player2Pubkey","p1","p2","CANCEL_DISCRIMINATOR","data","keys","pubkey","isSigner","isWritable","buildResolveIxn","winnerPubkey","winnerKey","RESOLVE_DISCRIMINATOR","concat","toBytes"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport {\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily grab your Anchor Program; must call setProvider(wallet) first. */\nfunction getProgram() {\n  const provider = getProvider();\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * 1) Initialize & deposit\n */\nexport async function buildInitializeAndDepositIxns(\n  lamports,\n  initializerPubkey,\n  nonce\n) {\n  const program = getProgram();\n\n  // pack nonce into 8‑byte LE buffer\n  const nonceBuf = Buffer.from(new anchor.BN(nonce).toArray(\"le\", 8));\n\n  // derive PDA\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [Buffer.from(\"escrow\"), initializerPubkey.toBuffer(), nonceBuf],\n    PROGRAM_ID\n  );\n\n  // initialize instruction\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(lamports), new anchor.BN(nonce))\n    .accounts({\n      escrow:         escrowPda,\n      player1:        initializerPubkey,\n      authority:      initializerPubkey,\n      system_program: SystemProgram.programId,\n    })\n    .instruction();\n\n  // deposit SOL via SystemProgram.transfer\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey:   escrowPda,\n    lamports,\n  });\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * 2) Join & deposit\n */\nexport async function buildJoinAndDepositIxn(escrowId) {\n  const program   = getProgram();\n  const provider  = getProvider();\n  const escrowPda = typeof escrowId === \"string\" ? new PublicKey(escrowId) : escrowId;\n\n  return await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow:         escrowPda,\n      player2:        provider.wallet.publicKey,\n      escrow_account: escrowPda,\n      system_program: SystemProgram.programId,\n    })\n    .instruction();\n}\n\n/**\n * 3) Cancel an escrow\n */\nexport async function buildCancelIxn(escrowId, player1Pubkey, player2Pubkey) {\n  const escrowPda = new PublicKey(escrowId);\n  const p1        = new PublicKey(player1Pubkey);\n  const p2        = new PublicKey(player2Pubkey);\n\n  // hard‑coded 8‑byte discriminator for `cancel`\n  const CANCEL_DISCRIMINATOR = [232, 219, 223, 41, 219, 236, 220, 190];\n  const data = Buffer.from(CANCEL_DISCRIMINATOR);\n\n  // accounts in IDL order\n  const keys = [\n    { pubkey: escrowPda, isSigner: false, isWritable: true }, // escrow\n    { pubkey: p1,        isSigner: false, isWritable: true }, // player1\n    { pubkey: p2,        isSigner: false, isWritable: true }, // player2\n    { pubkey: escrowPda, isSigner: false, isWritable: true }, // escrow_account\n  ];\n\n  return new TransactionInstruction({\n    programId: PROGRAM_ID,\n    keys,\n    data,\n  });\n}\n\n/**\n * 4) Resolve / payout\n */\nexport async function buildResolveIxn(escrowId, winnerPubkey) {\n  const escrowPda = new PublicKey(escrowId);\n  const winnerKey = typeof winnerPubkey === \"string\"\n    ? new PublicKey(winnerPubkey)\n    : winnerPubkey;\n\n  // hard‑coded 8‑byte discriminator for `resolve`\n  const RESOLVE_DISCRIMINATOR = [246, 150, 236, 206, 108, 63, 58, 10];\n  const data = Buffer.concat([\n    Buffer.from(RESOLVE_DISCRIMINATOR),\n    Buffer.from(winnerKey.toBytes()),\n  ]);\n\n  const program = getProgram();\n\n  // accounts in IDL order\n  const keys = [\n    { pubkey: escrowPda,                    isSigner: false, isWritable: true }, // escrow\n    { pubkey: winnerKey,                    isSigner: false, isWritable: true }, // winner\n    { pubkey: program.provider.wallet.publicKey, isSigner: false, isWritable: true }, // house\n    { pubkey: escrowPda,                    isSigner: false, isWritable: true }, // escrow_account\n  ];\n\n  return new TransactionInstruction({\n    programId: PROGRAM_ID,\n    keys,\n    data,\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}