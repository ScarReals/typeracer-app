{"ast":null,"code":"// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Program ID from your IDL\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nfunction getProgram() {\n  const provider = anchor.getProvider();\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Helper to fetch the escrow account and extract the actual\n * SOL‐holding account (the PDA that receives lamports).\n*/\nasync function fetchEscrowVault(escrowPda) {\n  const program = getProgram();\n  const acct = await program.account.escrow.fetch(escrowPda);\n  console.log(\"⛓️ fetched escrow account data:\", acct);\n\n  // Anchor IDL may name the native‐SOL account field differently,\n  // so try a few common names:\n  const vault = acct.escrowAccount ||\n  // original name\n  acct.escrowVault ||\n  // fallback 1\n  acct.vault; // fallback 2\n\n  if (!vault) {\n    throw new Error(\"Could not find escrow SOL‑holding account in on‑chain data\");\n  }\n  return vault;\n}\n\n/**\n * Player 2 joins and deposits in one go\n * @param {PublicKey} escrowPDA\n */\nexport async function joinAndDeposit(escrowPda) {\n  const program = getProgram();\n  const vault = await fetchEscrowVault(escrowPda);\n  await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: anchor.getProvider().wallet.publicKey,\n    escrowAccount: vault,\n    systemProgram: SystemProgram.programId\n  }).rpc({\n    skipPreflight: true,\n    preflightCommitment: \"processed\"\n  });\n}\n\n/**\n * Cancel an escrow and refund both sides\n * @param {PublicKey} escrowPda\n * @param {PublicKey} player1Pubkey\n * @param {PublicKey} player2Pubkey\n */\nexport async function cancelEscrow(escrowPda, player1Pubkey, player2Pubkey) {\n  const program = getProgram();\n  const vault = await fetchEscrowVault(escrowPda);\n  await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1: player1Pubkey,\n    player2: player2Pubkey,\n    escrowAccount: vault,\n    authority: anchor.getProvider().wallet.publicKey\n  }).rpc({\n    skipPreflight: true,\n    preflightCommitment: \"processed\"\n  });\n}\n\n/**\n * Resolve escrow by sending all funds to the winner\n * @param {PublicKey} escrowPda\n * @param {PublicKey} winnerPubkey\n */\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const vault = await fetchEscrowVault(escrowPda);\n  await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPda,\n    winner: winnerPubkey,\n    house: anchor.getProvider().wallet.publicKey,\n    escrowAccount: vault,\n    authority: anchor.getProvider().wallet.publicKey\n  }).rpc({\n    skipPreflight: true,\n    preflightCommitment: \"processed\"\n  });\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","metadata","address","getProgram","provider","getProvider","Program","fetchEscrowVault","escrowPda","program","acct","account","escrow","fetch","console","log","vault","escrowAccount","escrowVault","Error","joinAndDeposit","methods","accounts","player2","wallet","publicKey","systemProgram","programId","rpc","skipPreflight","preflightCommitment","cancelEscrow","player1Pubkey","player2Pubkey","cancel","player1","authority","resolveEscrow","winnerPubkey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Program ID from your IDL\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\nfunction getProgram() {\n  const provider = anchor.getProvider();\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Helper to fetch the escrow account and extract the actual\n * SOL‐holding account (the PDA that receives lamports).\n*/\nasync function fetchEscrowVault(escrowPda) {\n  const program = getProgram();\n  const acct = await program.account.escrow.fetch(escrowPda);\n  console.log(\"⛓️ fetched escrow account data:\", acct);\n\n  // Anchor IDL may name the native‐SOL account field differently,\n  // so try a few common names:\n  const vault =\n    acct.escrowAccount || // original name\n    acct.escrowVault ||   // fallback 1\n    acct.vault;           // fallback 2\n\n  if (!vault) {\n    throw new Error(\n      \"Could not find escrow SOL‑holding account in on‑chain data\"\n    );\n  }\n  return vault;\n}\n\n/**\n * Player 2 joins and deposits in one go\n * @param {PublicKey} escrowPDA\n */\nexport async function joinAndDeposit(escrowPda) {\n  const program = getProgram();\n  const vault = await fetchEscrowVault(escrowPda);\n\n  await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: anchor.getProvider().wallet.publicKey,\n      escrowAccount: vault,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc({\n      skipPreflight: true,\n      preflightCommitment: \"processed\",\n    });\n}\n\n/**\n * Cancel an escrow and refund both sides\n * @param {PublicKey} escrowPda\n * @param {PublicKey} player1Pubkey\n * @param {PublicKey} player2Pubkey\n */\nexport async function cancelEscrow(escrowPda, player1Pubkey, player2Pubkey) {\n  const program = getProgram();\n  const vault = await fetchEscrowVault(escrowPda);\n\n  await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1: player1Pubkey,\n      player2: player2Pubkey,\n      escrowAccount: vault,\n      authority: anchor.getProvider().wallet.publicKey,\n    })\n    .rpc({\n      skipPreflight: true,\n      preflightCommitment: \"processed\",\n    });\n}\n\n/**\n * Resolve escrow by sending all funds to the winner\n * @param {PublicKey} escrowPda\n * @param {PublicKey} winnerPubkey\n */\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const vault = await fetchEscrowVault(escrowPda);\n\n  await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPda,\n      winner: winnerPubkey,\n      house: anchor.getProvider().wallet.publicKey,\n      escrowAccount: vault,\n      authority: anchor.getProvider().wallet.publicKey,\n    })\n    .rpc({\n      skipPreflight: true,\n      preflightCommitment: \"processed\",\n    });\n}\n"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,SAAS,EAAEC,aAAa,QAAQ,iBAAiB;AAC1D,OAAOC,GAAG,MAAM,6BAA6B;;AAE7C;AACA,MAAMC,UAAU,GAAG,IAAIH,SAAS,CAACE,GAAG,CAACE,QAAQ,CAACC,OAAO,CAAC;AAEtD,SAASC,UAAUA,CAAA,EAAG;EACpB,MAAMC,QAAQ,GAAGR,MAAM,CAACS,WAAW,CAAC,CAAC;EACrC,OAAO,IAAIT,MAAM,CAACU,OAAO,CAACP,GAAG,EAAEC,UAAU,EAAEI,QAAQ,CAAC;AACtD;;AAEA;AACA;AACA;AACA;AACA,eAAeG,gBAAgBA,CAACC,SAAS,EAAE;EACzC,MAAMC,OAAO,GAAGN,UAAU,CAAC,CAAC;EAC5B,MAAMO,IAAI,GAAG,MAAMD,OAAO,CAACE,OAAO,CAACC,MAAM,CAACC,KAAK,CAACL,SAAS,CAAC;EAC1DM,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEL,IAAI,CAAC;;EAEpD;EACA;EACA,MAAMM,KAAK,GACTN,IAAI,CAACO,aAAa;EAAI;EACtBP,IAAI,CAACQ,WAAW;EAAM;EACtBR,IAAI,CAACM,KAAK,CAAC,CAAW;;EAExB,IAAI,CAACA,KAAK,EAAE;IACV,MAAM,IAAIG,KAAK,CACb,4DACF,CAAC;EACH;EACA,OAAOH,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAeI,cAAcA,CAACZ,SAAS,EAAE;EAC9C,MAAMC,OAAO,GAAGN,UAAU,CAAC,CAAC;EAC5B,MAAMa,KAAK,GAAG,MAAMT,gBAAgB,CAACC,SAAS,CAAC;EAE/C,MAAMC,OAAO,CAACY,OAAO,CAClBD,cAAc,CAAC,CAAC,CAChBE,QAAQ,CAAC;IACRV,MAAM,EAAEJ,SAAS;IACjBe,OAAO,EAAE3B,MAAM,CAACS,WAAW,CAAC,CAAC,CAACmB,MAAM,CAACC,SAAS;IAC9CR,aAAa,EAAED,KAAK;IACpBU,aAAa,EAAE5B,aAAa,CAAC6B;EAC/B,CAAC,CAAC,CACDC,GAAG,CAAC;IACHC,aAAa,EAAE,IAAI;IACnBC,mBAAmB,EAAE;EACvB,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,YAAYA,CAACvB,SAAS,EAAEwB,aAAa,EAAEC,aAAa,EAAE;EAC1E,MAAMxB,OAAO,GAAGN,UAAU,CAAC,CAAC;EAC5B,MAAMa,KAAK,GAAG,MAAMT,gBAAgB,CAACC,SAAS,CAAC;EAE/C,MAAMC,OAAO,CAACY,OAAO,CAClBa,MAAM,CAAC,CAAC,CACRZ,QAAQ,CAAC;IACRV,MAAM,EAAEJ,SAAS;IACjB2B,OAAO,EAAEH,aAAa;IACtBT,OAAO,EAAEU,aAAa;IACtBhB,aAAa,EAAED,KAAK;IACpBoB,SAAS,EAAExC,MAAM,CAACS,WAAW,CAAC,CAAC,CAACmB,MAAM,CAACC;EACzC,CAAC,CAAC,CACDG,GAAG,CAAC;IACHC,aAAa,EAAE,IAAI;IACnBC,mBAAmB,EAAE;EACvB,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeO,aAAaA,CAAC7B,SAAS,EAAE8B,YAAY,EAAE;EAC3D,MAAM7B,OAAO,GAAGN,UAAU,CAAC,CAAC;EAC5B,MAAMa,KAAK,GAAG,MAAMT,gBAAgB,CAACC,SAAS,CAAC;EAE/C,MAAMC,OAAO,CAACY,OAAO,CAClBkB,OAAO,CAACD,YAAY,CAAC,CACrBhB,QAAQ,CAAC;IACRV,MAAM,EAAEJ,SAAS;IACjBgC,MAAM,EAAEF,YAAY;IACpBG,KAAK,EAAE7C,MAAM,CAACS,WAAW,CAAC,CAAC,CAACmB,MAAM,CAACC,SAAS;IAC5CR,aAAa,EAAED,KAAK;IACpBoB,SAAS,EAAExC,MAAM,CAACS,WAAW,CAAC,CAAC,CAACmB,MAAM,CAACC;EACzC,CAAC,CAAC,CACDG,GAAG,CAAC;IACHC,aAAa,EAAE,IAAI;IACnBC,mBAAmB,EAAE;EACvB,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}