{"ast":null,"code":"// frontend/src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { getProgram } from \"./solana\";\n\n/**\n * Helper: send a sig to the network and wait for confirmation.\n */\nasync function confirmSig(connection, sig) {\n  // wait up to 60s\n  const start = Date.now();\n  while (true) {\n    const status = await connection.getSignatureStatuses([sig]);\n    const info = status && status.value[0];\n    if (info && info.confirmationStatus) return info;\n    if (Date.now() - start > 60000) {\n      throw new Error(`Timeout confirming transaction ${sig}`);\n    }\n    // back off a bit\n    await new Promise(r => setTimeout(r, 500));\n  }\n}\n\n/**\n * Initialize the escrow on-chain and return its PDA.\n */\nexport async function initializeEscrow(wagerLamports) {\n  const program = getProgram();\n  const walletPk = program.provider.wallet.publicKey;\n  const nonce = new anchor.BN(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER), 10, \"le\");\n  const [escrowPda] = await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"escrow\"), walletPk.toBuffer(), nonce.toArrayLike(Buffer, \"le\", 8)], program.programId);\n  let sig;\n  try {\n    sig = await program.methods.initialize(new anchor.BN(wagerLamports), nonce).accounts({\n      escrow: escrowPda,\n      player1: walletPk,\n      authority: walletPk,\n      systemProgram: anchor.web3.SystemProgram.programId\n    }).rpc({\n      skipPreflight: false,\n      preflightCommitment: \"processed\",\n      commitment: \"processed\"\n    });\n    // confirm it\n    await confirmSig(program.provider.connection, sig);\n  } catch (e) {\n    console.error(\"initializeEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n  return escrowPda;\n}\n\n/**\n * Join the escrow. Returns tx signature.\n */\nexport async function joinEscrow(escrowPda) {\n  const program = getProgram();\n  let sig;\n  try {\n    sig = await program.methods.join().accounts({\n      escrow: escrowPda,\n      player2: program.provider.wallet.publicKey\n    }).rpc({\n      skipPreflight: false,\n      preflightCommitment: \"processed\",\n      commitment: \"processed\"\n    });\n    await confirmSig(program.provider.connection, sig);\n  } catch (e) {\n    console.error(\"joinEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n  return sig;\n}\n\n/**\n * Deposit into the escrow. Returns tx signature.\n */\nexport async function depositToEscrow(escrowPda) {\n  const program = getProgram();\n  let sig;\n  try {\n    sig = await program.methods.deposit().accounts({\n      escrow: escrowPda,\n      payer: program.provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: anchor.web3.SystemProgram.programId\n    }).rpc({\n      skipPreflight: false,\n      preflightCommitment: \"processed\",\n      commitment: \"processed\"\n    });\n    await confirmSig(program.provider.connection, sig);\n  } catch (e) {\n    console.error(\"depositToEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n  return sig;\n}\n\n/**\n * Resolve the escrow, paying out the winner and house.\n */\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const house = new anchor.web3.PublicKey(\"A32Burni3cYyFAqjZM3CvCrStAKRFCfftk196Xfpx9Hs\");\n  let sig;\n  try {\n    sig = await program.methods.resolve(winnerPubkey).accounts({\n      escrow: escrowPda,\n      winner: winnerPubkey,\n      house,\n      escrowAccount: escrowPda,\n      authority: program.provider.wallet.publicKey\n    }).rpc({\n      skipPreflight: false,\n      preflightCommitment: \"processed\",\n      commitment: \"processed\"\n    });\n    await confirmSig(program.provider.connection, sig);\n  } catch (e) {\n    console.error(\"resolveEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n  return sig;\n}\n\n/**\n * Cancel the escrow and refund both players.\n */\nexport async function cancelEscrow(escrowPda, player1, player2) {\n  const program = getProgram();\n  let sig;\n  try {\n    sig = await program.methods.cancel().accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: escrowPda,\n      authority: program.provider.wallet.publicKey\n    }).rpc({\n      skipPreflight: false,\n      preflightCommitment: \"processed\",\n      commitment: \"processed\"\n    });\n    await confirmSig(program.provider.connection, sig);\n  } catch (e) {\n    console.error(\"cancelEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n  return sig;\n}","map":{"version":3,"names":["anchor","getProgram","confirmSig","connection","sig","start","Date","now","status","getSignatureStatuses","info","value","confirmationStatus","Error","Promise","r","setTimeout","initializeEscrow","wagerLamports","program","walletPk","provider","wallet","publicKey","nonce","BN","Math","floor","random","Number","MAX_SAFE_INTEGER","escrowPda","web3","PublicKey","findProgramAddress","Buffer","from","toBuffer","toArrayLike","programId","methods","initialize","accounts","escrow","player1","authority","systemProgram","SystemProgram","rpc","skipPreflight","preflightCommitment","commitment","e","console","error","getLogs","logs","joinEscrow","join","player2","depositToEscrow","deposit","payer","escrowAccount","resolveEscrow","winnerPubkey","house","resolve","winner","cancelEscrow","cancel"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { getProgram } from \"./solana\";\n\n/**\n * Helper: send a sig to the network and wait for confirmation.\n */\nasync function confirmSig(connection, sig) {\n  // wait up to 60s\n  const start = Date.now();\n  while (true) {\n    const status = await connection.getSignatureStatuses([sig]);\n    const info = status && status.value[0];\n    if (info && info.confirmationStatus) return info;\n    if (Date.now() - start > 60_000) {\n      throw new Error(`Timeout confirming transaction ${sig}`);\n    }\n    // back off a bit\n    await new Promise((r) => setTimeout(r, 500));\n  }\n}\n\n/**\n * Initialize the escrow on-chain and return its PDA.\n */\nexport async function initializeEscrow(wagerLamports) {\n  const program = getProgram();\n  const walletPk = program.provider.wallet.publicKey;\n\n  const nonce = new anchor.BN(\n    Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),\n    10,\n    \"le\"\n  );\n  const [escrowPda] = await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      walletPk.toBuffer(),\n      nonce.toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  let sig;\n  try {\n    sig = await program.methods\n      .initialize(new anchor.BN(wagerLamports), nonce)\n      .accounts({\n        escrow: escrowPda,\n        player1: walletPk,\n        authority: walletPk,\n        systemProgram: anchor.web3.SystemProgram.programId,\n      })\n      .rpc({\n        skipPreflight: false,\n        preflightCommitment: \"processed\",\n        commitment: \"processed\",\n      });\n    // confirm it\n    await confirmSig(program.provider.connection, sig);\n  } catch (e) {\n    console.error(\"initializeEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());\n    else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n\n  return escrowPda;\n}\n\n/**\n * Join the escrow. Returns tx signature.\n */\nexport async function joinEscrow(escrowPda) {\n  const program = getProgram();\n  let sig;\n  try {\n    sig = await program.methods\n      .join()\n      .accounts({\n        escrow: escrowPda,\n        player2: program.provider.wallet.publicKey,\n      })\n      .rpc({\n        skipPreflight: false,\n        preflightCommitment: \"processed\",\n        commitment: \"processed\",\n      });\n    await confirmSig(program.provider.connection, sig);\n  } catch (e) {\n    console.error(\"joinEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());\n    else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n  return sig;\n}\n\n/**\n * Deposit into the escrow. Returns tx signature.\n */\nexport async function depositToEscrow(escrowPda) {\n  const program = getProgram();\n  let sig;\n  try {\n    sig = await program.methods\n      .deposit()\n      .accounts({\n        escrow: escrowPda,\n        payer: program.provider.wallet.publicKey,\n        escrowAccount: escrowPda,\n        systemProgram: anchor.web3.SystemProgram.programId,\n      })\n      .rpc({\n        skipPreflight: false,\n        preflightCommitment: \"processed\",\n        commitment: \"processed\",\n      });\n    await confirmSig(program.provider.connection, sig);\n  } catch (e) {\n    console.error(\"depositToEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());\n    else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n  return sig;\n}\n\n/**\n * Resolve the escrow, paying out the winner and house.\n */\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const house = new anchor.web3.PublicKey(\n    \"A32Burni3cYyFAqjZM3CvCrStAKRFCfftk196Xfpx9Hs\"\n  );\n  let sig;\n  try {\n    sig = await program.methods\n      .resolve(winnerPubkey)\n      .accounts({\n        escrow: escrowPda,\n        winner: winnerPubkey,\n        house,\n        escrowAccount: escrowPda,\n        authority: program.provider.wallet.publicKey,\n      })\n      .rpc({\n        skipPreflight: false,\n        preflightCommitment: \"processed\",\n        commitment: \"processed\",\n      });\n    await confirmSig(program.provider.connection, sig);\n  } catch (e) {\n    console.error(\"resolveEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());\n    else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n  return sig;\n}\n\n/**\n * Cancel the escrow and refund both players.\n */\nexport async function cancelEscrow(escrowPda, player1, player2) {\n  const program = getProgram();\n  let sig;\n  try {\n    sig = await program.methods\n      .cancel()\n      .accounts({\n        escrow: escrowPda,\n        player1,\n        player2,\n        escrowAccount: escrowPda,\n        authority: program.provider.wallet.publicKey,\n      })\n      .rpc({\n        skipPreflight: false,\n        preflightCommitment: \"processed\",\n        commitment: \"processed\",\n      });\n    await confirmSig(program.provider.connection, sig);\n  } catch (e) {\n    console.error(\"cancelEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());\n    else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n  return sig;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}