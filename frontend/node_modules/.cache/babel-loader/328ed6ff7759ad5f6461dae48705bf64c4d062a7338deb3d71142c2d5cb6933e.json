{"ast":null,"code":"import * as anchor from \"@coral-xyz/anchor\";\nimport { getProgram } from \"./solana\";\n\n/**\n * Poll `getSignatureStatuses` until status.confirmationStatus === \"processed\".\n * Times out after 60 s.\n */\nasync function waitForProcessed(connection, signature) {\n  console.log(`[escrow.js] polling status for ${signature}`);\n  const start = Date.now();\n  while (true) {\n    const resp = await connection.getSignatureStatuses([signature]);\n    const status = resp.value[0];\n    if ((status === null || status === void 0 ? void 0 : status.confirmationStatus) === \"processed\") {\n      console.log(`[escrow.js] ${signature} is now processed`);\n      return;\n    }\n    if (Date.now() - start > 60000) {\n      throw new Error(`Timeout waiting for ${signature}`);\n    }\n    // wait 500 ms before retry\n    await new Promise(r => setTimeout(r, 500));\n  }\n}\n\n/**\n * Sign, send, and then poll until processed.\n */\nasync function signSendAndConfirm(tx, provider) {\n  const conn = provider.connection;\n  const wallet = provider.wallet;\n\n  // auto-fill blockhash + feePayer if missing\n  if (!tx.recentBlockhash) {\n    const {\n      blockhash\n    } = await conn.getLatestBlockhash(\"processed\");\n    tx.recentBlockhash = blockhash;\n  }\n  if (!tx.feePayer) {\n    tx.feePayer = wallet.publicKey;\n  }\n\n  // sign\n  let signed;\n  if (wallet.signTransaction) {\n    signed = await wallet.signTransaction(tx);\n  } else {\n    [signed] = await wallet.signAllTransactions([tx]);\n  }\n\n  // send\n  const raw = signed.serialize();\n  const sig = await conn.sendRawTransaction(raw, {\n    skipPreflight: false,\n    preflightCommitment: \"processed\"\n  });\n  console.log(`[escrow.js] sent tx ${sig}`);\n\n  // poll until processed\n  await waitForProcessed(conn, sig);\n  return sig;\n}\n\n/**\n * Initialize + Deposit in one atomic transaction.\n * Returns the new escrow PDA.\n */\nexport async function initializeAndDeposit(wagerLamports) {\n  console.log(\"[escrow.js] ▶️ initializeAndDeposit\", wagerLamports);\n  const program = getProgram();\n  const provider = program.provider;\n  const walletPk = provider.wallet.publicKey;\n\n  // derive nonce & PDA\n  const nonce = new anchor.BN(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER), 10, \"le\");\n  const [escrowPda] = await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"escrow\"), walletPk.toBuffer(), nonce.toArrayLike(Buffer, \"le\", 8)], program.programId);\n  console.log(\"[escrow.js]   PDA:\", escrowPda.toBase58());\n\n  // build TX\n  const tx = new anchor.web3.Transaction().add(await program.methods.initialize(new anchor.BN(wagerLamports), nonce).accounts({\n    escrow: escrowPda,\n    player1: walletPk,\n    authority: walletPk,\n    systemProgram: anchor.web3.SystemProgram.programId\n  }).instruction()).add(await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: walletPk,\n    escrowAccount: escrowPda,\n    systemProgram: anchor.web3.SystemProgram.programId\n  }).instruction());\n  await signSendAndConfirm(tx, provider);\n  return escrowPda;\n}\n\n// Legacy two‐step calls (unchanged logic):\nexport async function initializeEscrow(wagerLamports) {\n  return initializeAndDeposit(wagerLamports);\n}\nexport async function depositToEscrow(escrowPda) {\n  console.log(\"[escrow.js] ▶️ depositToEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const ix = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: provider.wallet.publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: anchor.web3.SystemProgram.programId\n  }).instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n  await signSendAndConfirm(tx, provider);\n}\nexport async function joinEscrow(escrowPda) {\n  console.log(\"[escrow.js] ▶️ joinEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const ix = await program.methods.join().accounts({\n    escrow: escrowPda,\n    player2: provider.wallet.publicKey\n  }).instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n  await signSendAndConfirm(tx, provider);\n}\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  console.log(\"[escrow.js] ▶️ resolveEscrow\", escrowPda.toBase58(), winnerPubkey.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const house = new anchor.web3.PublicKey(\"A32Burni3cYyFAqjZM3CvCrStAKRFCfftk196Xfpx9Hs\");\n  const ix = await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPda,\n    winner: winnerPubkey,\n    house,\n    escrowAccount: escrowPda,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n  await signSendAndConfirm(tx, provider);\n}\nexport async function cancelEscrow(escrowPda, player1, player2) {\n  console.log(\"[escrow.js] ▶️ cancelEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrowAccount: escrowPda,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n  await signSendAndConfirm(tx, provider);\n}","map":{"version":3,"names":["anchor","getProgram","waitForProcessed","connection","signature","console","log","start","Date","now","resp","getSignatureStatuses","status","value","confirmationStatus","Error","Promise","r","setTimeout","signSendAndConfirm","tx","provider","conn","wallet","recentBlockhash","blockhash","getLatestBlockhash","feePayer","publicKey","signed","signTransaction","signAllTransactions","raw","serialize","sig","sendRawTransaction","skipPreflight","preflightCommitment","initializeAndDeposit","wagerLamports","program","walletPk","nonce","BN","Math","floor","random","Number","MAX_SAFE_INTEGER","escrowPda","web3","PublicKey","findProgramAddress","Buffer","from","toBuffer","toArrayLike","programId","toBase58","Transaction","add","methods","initialize","accounts","escrow","player1","authority","systemProgram","SystemProgram","instruction","deposit","payer","escrowAccount","initializeEscrow","depositToEscrow","ix","joinEscrow","join","player2","resolveEscrow","winnerPubkey","house","resolve","winner","cancelEscrow","cancel"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { getProgram } from \"./solana\";\n\n/**\n * Poll `getSignatureStatuses` until status.confirmationStatus === \"processed\".\n * Times out after 60 s.\n */\nasync function waitForProcessed(connection, signature) {\n  console.log(`[escrow.js] polling status for ${signature}`);\n  const start = Date.now();\n  while (true) {\n    const resp = await connection.getSignatureStatuses([signature]);\n    const status = resp.value[0];\n    if (status?.confirmationStatus === \"processed\") {\n      console.log(`[escrow.js] ${signature} is now processed`);\n      return;\n    }\n    if (Date.now() - start > 60_000) {\n      throw new Error(`Timeout waiting for ${signature}`);\n    }\n    // wait 500 ms before retry\n    await new Promise((r) => setTimeout(r, 500));\n  }\n}\n\n/**\n * Sign, send, and then poll until processed.\n */\nasync function signSendAndConfirm(tx, provider) {\n  const conn = provider.connection;\n  const wallet = provider.wallet;\n\n  // auto-fill blockhash + feePayer if missing\n  if (!tx.recentBlockhash) {\n    const { blockhash } = await conn.getLatestBlockhash(\"processed\");\n    tx.recentBlockhash = blockhash;\n  }\n  if (!tx.feePayer) {\n    tx.feePayer = wallet.publicKey;\n  }\n\n  // sign\n  let signed;\n  if (wallet.signTransaction) {\n    signed = await wallet.signTransaction(tx);\n  } else {\n    [signed] = await wallet.signAllTransactions([tx]);\n  }\n\n  // send\n  const raw = signed.serialize();\n  const sig = await conn.sendRawTransaction(raw, {\n    skipPreflight: false,\n    preflightCommitment: \"processed\",\n  });\n  console.log(`[escrow.js] sent tx ${sig}`);\n\n  // poll until processed\n  await waitForProcessed(conn, sig);\n  return sig;\n}\n\n/**\n * Initialize + Deposit in one atomic transaction.\n * Returns the new escrow PDA.\n */\nexport async function initializeAndDeposit(wagerLamports) {\n  console.log(\"[escrow.js] ▶️ initializeAndDeposit\", wagerLamports);\n  const program = getProgram();\n  const provider = program.provider;\n  const walletPk = provider.wallet.publicKey;\n\n  // derive nonce & PDA\n  const nonce = new anchor.BN(\n    Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),\n    10,\n    \"le\"\n  );\n  const [escrowPda] = await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      walletPk.toBuffer(),\n      nonce.toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n  console.log(\"[escrow.js]   PDA:\", escrowPda.toBase58());\n\n  // build TX\n  const tx = new anchor.web3.Transaction()\n    .add(\n      await program.methods\n        .initialize(new anchor.BN(wagerLamports), nonce)\n        .accounts({\n          escrow: escrowPda,\n          player1: walletPk,\n          authority: walletPk,\n          systemProgram: anchor.web3.SystemProgram.programId,\n        })\n        .instruction()\n    )\n    .add(\n      await program.methods\n        .deposit()\n        .accounts({\n          escrow: escrowPda,\n          payer: walletPk,\n          escrowAccount: escrowPda,\n          systemProgram: anchor.web3.SystemProgram.programId,\n        })\n        .instruction()\n    );\n\n  await signSendAndConfirm(tx, provider);\n  return escrowPda;\n}\n\n// Legacy two‐step calls (unchanged logic):\nexport async function initializeEscrow(wagerLamports) {\n  return initializeAndDeposit(wagerLamports);\n}\n\nexport async function depositToEscrow(escrowPda) {\n  console.log(\"[escrow.js] ▶️ depositToEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n\n  const ix = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: anchor.web3.SystemProgram.programId,\n    })\n    .instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n\n  await signSendAndConfirm(tx, provider);\n}\n\nexport async function joinEscrow(escrowPda) {\n  console.log(\"[escrow.js] ▶️ joinEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n\n  const ix = await program.methods\n    .join()\n    .accounts({\n      escrow: escrowPda,\n      player2: provider.wallet.publicKey,\n    })\n    .instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n\n  await signSendAndConfirm(tx, provider);\n}\n\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  console.log(\n    \"[escrow.js] ▶️ resolveEscrow\",\n    escrowPda.toBase58(),\n    winnerPubkey.toBase58()\n  );\n  const program = getProgram();\n  const provider = program.provider;\n  const house = new anchor.web3.PublicKey(\n    \"A32Burni3cYyFAqjZM3CvCrStAKRFCfftk196Xfpx9Hs\"\n  );\n\n  const ix = await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPda,\n      winner: winnerPubkey,\n      house,\n      escrowAccount: escrowPda,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n\n  await signSendAndConfirm(tx, provider);\n}\n\nexport async function cancelEscrow(escrowPda, player1, player2) {\n  console.log(\"[escrow.js] ▶️ cancelEscrow\", escrowPda.toBase58());\n  const program = getProgram();\n  const provider = program.provider;\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: escrowPda,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n  const tx = new anchor.web3.Transaction().add(ix);\n\n  await signSendAndConfirm(tx, provider);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}