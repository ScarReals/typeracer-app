{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBitcoinOnlyDevice = exports.hasBitcoinOnlyFirmware = exports.getFirmwareVersion = exports.getFirmwareVersionArray = exports.getFirmwareRevision = exports.getFirmwareSource = void 0;\nconst modeUtils_1 = require(\"./modeUtils\");\nconst types_1 = require(\"./types\");\nconst getFirmwareSource = device => {\n  if (device?.mode === 'bootloader') {\n    return 'NA - bootloader';\n  }\n  if (device?.authenticityChecks?.firmwareRevision?.success && device?.authenticityChecks?.firmwareHash?.success) {\n    return 'official';\n  }\n  return 'unknown';\n};\nexports.getFirmwareSource = getFirmwareSource;\nconst getFirmwareRevision = device => device?.features?.revision || '';\nexports.getFirmwareRevision = getFirmwareRevision;\nconst getFirmwareVersionArray = device => {\n  if (!device?.features) {\n    return null;\n  }\n  const {\n    features\n  } = device;\n  if ((0, modeUtils_1.isDeviceInBootloaderMode)(device)) {\n    return features.fw_major ? [features.fw_major, features.fw_minor, features.fw_patch] : null;\n  }\n  return [features.major_version, features.minor_version, features.patch_version];\n};\nexports.getFirmwareVersionArray = getFirmwareVersionArray;\nconst getFirmwareVersion = device => {\n  if (!device?.features) {\n    return '';\n  }\n  const {\n    features\n  } = device;\n  if ((0, modeUtils_1.isDeviceInBootloaderMode)(device)) {\n    return features.fw_major ? `${features.fw_major}.${features.fw_minor}.${features.fw_patch}` : '';\n  }\n  return `${features.major_version}.${features.minor_version}.${features.patch_version}`;\n};\nexports.getFirmwareVersion = getFirmwareVersion;\nconst hasBitcoinOnlyFirmware = device => device?.firmwareType === types_1.FirmwareType.BitcoinOnly;\nexports.hasBitcoinOnlyFirmware = hasBitcoinOnlyFirmware;\nconst isBitcoinOnlyDevice = device => !!device?.features?.unit_btconly && device?.firmwareType !== types_1.FirmwareType.Universal;\nexports.isBitcoinOnlyDevice = isBitcoinOnlyDevice;","map":{"version":3,"names":["Object","defineProperty","exports","value","isBitcoinOnlyDevice","hasBitcoinOnlyFirmware","getFirmwareVersion","getFirmwareVersionArray","getFirmwareRevision","getFirmwareSource","modeUtils_1","require","types_1","device","mode","authenticityChecks","firmwareRevision","success","firmwareHash","features","revision","isDeviceInBootloaderMode","fw_major","fw_minor","fw_patch","major_version","minor_version","patch_version","firmwareType","FirmwareType","BitcoinOnly","unit_btconly","Universal"],"sources":["/home/kokoi/typeracer-app/frontend/node_modules/@trezor/device-utils/lib/firmwareUtils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isBitcoinOnlyDevice = exports.hasBitcoinOnlyFirmware = exports.getFirmwareVersion = exports.getFirmwareVersionArray = exports.getFirmwareRevision = exports.getFirmwareSource = void 0;\nconst modeUtils_1 = require(\"./modeUtils\");\nconst types_1 = require(\"./types\");\nconst getFirmwareSource = (device) => {\n    if (device?.mode === 'bootloader') {\n        return 'NA - bootloader';\n    }\n    if (device?.authenticityChecks?.firmwareRevision?.success &&\n        device?.authenticityChecks?.firmwareHash?.success) {\n        return 'official';\n    }\n    return 'unknown';\n};\nexports.getFirmwareSource = getFirmwareSource;\nconst getFirmwareRevision = (device) => device?.features?.revision || '';\nexports.getFirmwareRevision = getFirmwareRevision;\nconst getFirmwareVersionArray = (device) => {\n    if (!device?.features) {\n        return null;\n    }\n    const { features } = device;\n    if ((0, modeUtils_1.isDeviceInBootloaderMode)(device)) {\n        return features.fw_major\n            ? [features.fw_major, features.fw_minor, features.fw_patch]\n            : null;\n    }\n    return [features.major_version, features.minor_version, features.patch_version];\n};\nexports.getFirmwareVersionArray = getFirmwareVersionArray;\nconst getFirmwareVersion = (device) => {\n    if (!device?.features) {\n        return '';\n    }\n    const { features } = device;\n    if ((0, modeUtils_1.isDeviceInBootloaderMode)(device)) {\n        return features.fw_major\n            ? `${features.fw_major}.${features.fw_minor}.${features.fw_patch}`\n            : '';\n    }\n    return `${features.major_version}.${features.minor_version}.${features.patch_version}`;\n};\nexports.getFirmwareVersion = getFirmwareVersion;\nconst hasBitcoinOnlyFirmware = (device) => device?.firmwareType === types_1.FirmwareType.BitcoinOnly;\nexports.hasBitcoinOnlyFirmware = hasBitcoinOnlyFirmware;\nconst isBitcoinOnlyDevice = (device) => !!device?.features?.unit_btconly && device?.firmwareType !== types_1.FirmwareType.Universal;\nexports.isBitcoinOnlyDevice = isBitcoinOnlyDevice;\n//# sourceMappingURL=firmwareUtils.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,mBAAmB,GAAGF,OAAO,CAACG,sBAAsB,GAAGH,OAAO,CAACI,kBAAkB,GAAGJ,OAAO,CAACK,uBAAuB,GAAGL,OAAO,CAACM,mBAAmB,GAAGN,OAAO,CAACO,iBAAiB,GAAG,KAAK,CAAC;AAC9L,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMF,iBAAiB,GAAII,MAAM,IAAK;EAClC,IAAIA,MAAM,EAAEC,IAAI,KAAK,YAAY,EAAE;IAC/B,OAAO,iBAAiB;EAC5B;EACA,IAAID,MAAM,EAAEE,kBAAkB,EAAEC,gBAAgB,EAAEC,OAAO,IACrDJ,MAAM,EAAEE,kBAAkB,EAAEG,YAAY,EAAED,OAAO,EAAE;IACnD,OAAO,UAAU;EACrB;EACA,OAAO,SAAS;AACpB,CAAC;AACDf,OAAO,CAACO,iBAAiB,GAAGA,iBAAiB;AAC7C,MAAMD,mBAAmB,GAAIK,MAAM,IAAKA,MAAM,EAAEM,QAAQ,EAAEC,QAAQ,IAAI,EAAE;AACxElB,OAAO,CAACM,mBAAmB,GAAGA,mBAAmB;AACjD,MAAMD,uBAAuB,GAAIM,MAAM,IAAK;EACxC,IAAI,CAACA,MAAM,EAAEM,QAAQ,EAAE;IACnB,OAAO,IAAI;EACf;EACA,MAAM;IAAEA;EAAS,CAAC,GAAGN,MAAM;EAC3B,IAAI,CAAC,CAAC,EAAEH,WAAW,CAACW,wBAAwB,EAAER,MAAM,CAAC,EAAE;IACnD,OAAOM,QAAQ,CAACG,QAAQ,GAClB,CAACH,QAAQ,CAACG,QAAQ,EAAEH,QAAQ,CAACI,QAAQ,EAAEJ,QAAQ,CAACK,QAAQ,CAAC,GACzD,IAAI;EACd;EACA,OAAO,CAACL,QAAQ,CAACM,aAAa,EAAEN,QAAQ,CAACO,aAAa,EAAEP,QAAQ,CAACQ,aAAa,CAAC;AACnF,CAAC;AACDzB,OAAO,CAACK,uBAAuB,GAAGA,uBAAuB;AACzD,MAAMD,kBAAkB,GAAIO,MAAM,IAAK;EACnC,IAAI,CAACA,MAAM,EAAEM,QAAQ,EAAE;IACnB,OAAO,EAAE;EACb;EACA,MAAM;IAAEA;EAAS,CAAC,GAAGN,MAAM;EAC3B,IAAI,CAAC,CAAC,EAAEH,WAAW,CAACW,wBAAwB,EAAER,MAAM,CAAC,EAAE;IACnD,OAAOM,QAAQ,CAACG,QAAQ,GAClB,GAAGH,QAAQ,CAACG,QAAQ,IAAIH,QAAQ,CAACI,QAAQ,IAAIJ,QAAQ,CAACK,QAAQ,EAAE,GAChE,EAAE;EACZ;EACA,OAAO,GAAGL,QAAQ,CAACM,aAAa,IAAIN,QAAQ,CAACO,aAAa,IAAIP,QAAQ,CAACQ,aAAa,EAAE;AAC1F,CAAC;AACDzB,OAAO,CAACI,kBAAkB,GAAGA,kBAAkB;AAC/C,MAAMD,sBAAsB,GAAIQ,MAAM,IAAKA,MAAM,EAAEe,YAAY,KAAKhB,OAAO,CAACiB,YAAY,CAACC,WAAW;AACpG5B,OAAO,CAACG,sBAAsB,GAAGA,sBAAsB;AACvD,MAAMD,mBAAmB,GAAIS,MAAM,IAAK,CAAC,CAACA,MAAM,EAAEM,QAAQ,EAAEY,YAAY,IAAIlB,MAAM,EAAEe,YAAY,KAAKhB,OAAO,CAACiB,YAAY,CAACG,SAAS;AACnI9B,OAAO,CAACE,mBAAmB,GAAGA,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}