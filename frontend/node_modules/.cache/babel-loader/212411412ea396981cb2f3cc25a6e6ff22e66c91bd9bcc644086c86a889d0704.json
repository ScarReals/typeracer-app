{"ast":null,"code":"import * as anchor from \"@coral-xyz/anchor\";\nimport { getProgram } from \"./solana\";\n\n/**\n * Initialize the escrow on‑chain and return its PDA.\n */\nexport async function initializeEscrow(wagerLamports) {\n  const program = getProgram();\n  const walletPk = program.provider.wallet.publicKey;\n  console.log(\"[escrow.js] ▶️ initializeEscrow\", wagerLamports);\n\n  // random nonce for PDA uniqueness\n  const nonce = new anchor.BN(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER), 10, \"le\");\n  const [escrowPda] = await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"escrow\"), walletPk.toBuffer(), nonce.toArrayLike(Buffer, \"le\", 8)], program.programId);\n  console.log(\"[escrow.js]   PDA:\", escrowPda.toBase58());\n  try {\n    console.log(\"[escrow.js]   signing & sending initialize tx…\");\n    const sig = await program.methods.initialize(new anchor.BN(wagerLamports), nonce).accounts({\n      escrow: escrowPda,\n      player1: walletPk,\n      authority: walletPk,\n      systemProgram: anchor.web3.SystemProgram.programId\n    }).rpc({\n      skipPreflight: true,\n      preflightCommitment: \"confirmed\"\n    });\n    console.log(\"[escrow.js] sent initialize, sig:\", sig);\n  } catch (e) {\n    console.error(\"[escrow.js] initializeEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n  return escrowPda;\n}\n\n/**\n * Join the escrow. Returns tx signature.\n */\nexport async function joinEscrow(escrowPda) {\n  const program = getProgram();\n  try {\n    return await program.methods.join().accounts({\n      escrow: escrowPda,\n      player2: program.provider.wallet.publicKey\n    }).rpc({\n      skipPreflight: true,\n      preflightCommitment: \"confirmed\"\n    });\n  } catch (e) {\n    console.error(\"[escrow.js] joinEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n}\n\n/**\n * Deposit into the escrow. Returns tx signature.\n */\nexport async function depositToEscrow(escrowPda) {\n  const program = getProgram();\n  try {\n    return await program.methods.deposit().accounts({\n      escrow: escrowPda,\n      payer: program.provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: anchor.web3.SystemProgram.programId\n    }).rpc({\n      skipPreflight: true,\n      preflightCommitment: \"confirmed\"\n    });\n  } catch (e) {\n    console.error(\"[escrow.js] depositToEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n}\n\n/**\n * Resolve the escrow, paying out the winner and house. Returns tx signature.\n */\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const house = new anchor.web3.PublicKey(\"A32Burni3cYyFAqjZM3CvCrStAKRFCfftk196Xfpx9Hs\");\n  try {\n    return await program.methods.resolve(winnerPubkey).accounts({\n      escrow: escrowPda,\n      winner: winnerPubkey,\n      house,\n      escrowAccount: escrowPda,\n      authority: program.provider.wallet.publicKey\n    }).rpc({\n      skipPreflight: true,\n      preflightCommitment: \"confirmed\"\n    });\n  } catch (e) {\n    console.error(\"[escrow.js] resolveEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n}\n\n/**\n * Cancel the escrow and refund both players. Returns tx signature.\n */\nexport async function cancelEscrow(escrowPda, player1, player2) {\n  const program = getProgram();\n  try {\n    return await program.methods.cancel().accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: escrowPda,\n      authority: program.provider.wallet.publicKey\n    }).rpc({\n      skipPreflight: true,\n      preflightCommitment: \"confirmed\"\n    });\n  } catch (e) {\n    console.error(\"[escrow.js] cancelEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n}","map":{"version":3,"names":["anchor","getProgram","initializeEscrow","wagerLamports","program","walletPk","provider","wallet","publicKey","console","log","nonce","BN","Math","floor","random","Number","MAX_SAFE_INTEGER","escrowPda","web3","PublicKey","findProgramAddress","Buffer","from","toBuffer","toArrayLike","programId","toBase58","sig","methods","initialize","accounts","escrow","player1","authority","systemProgram","SystemProgram","rpc","skipPreflight","preflightCommitment","e","error","getLogs","logs","joinEscrow","join","player2","depositToEscrow","deposit","payer","escrowAccount","resolveEscrow","winnerPubkey","house","resolve","winner","cancelEscrow","cancel"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { getProgram } from \"./solana\";\n\n/**\n * Initialize the escrow on‑chain and return its PDA.\n */\nexport async function initializeEscrow(wagerLamports) {\n  const program = getProgram();\n  const walletPk = program.provider.wallet.publicKey;\n  console.log(\"[escrow.js] ▶️ initializeEscrow\", wagerLamports);\n\n  // random nonce for PDA uniqueness\n  const nonce = new anchor.BN(\n    Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),\n    10,\n    \"le\"\n  );\n\n  const [escrowPda] = await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      walletPk.toBuffer(),\n      nonce.toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n  console.log(\"[escrow.js]   PDA:\", escrowPda.toBase58());\n\n  try {\n    console.log(\"[escrow.js]   signing & sending initialize tx…\");\n    const sig = await program.methods\n      .initialize(new anchor.BN(wagerLamports), nonce)\n      .accounts({\n        escrow: escrowPda,\n        player1: walletPk,\n        authority: walletPk,\n        systemProgram: anchor.web3.SystemProgram.programId,\n      })\n      .rpc({\n        skipPreflight: true,\n        preflightCommitment: \"confirmed\",\n      });\n    console.log(\"[escrow.js] sent initialize, sig:\", sig);\n  } catch (e) {\n    console.error(\"[escrow.js] initializeEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());\n    else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n\n  return escrowPda;\n}\n\n/**\n * Join the escrow. Returns tx signature.\n */\nexport async function joinEscrow(escrowPda) {\n  const program = getProgram();\n  try {\n    return await program.methods\n      .join()\n      .accounts({\n        escrow: escrowPda,\n        player2: program.provider.wallet.publicKey,\n      })\n      .rpc({\n        skipPreflight: true,\n        preflightCommitment: \"confirmed\",\n      });\n  } catch (e) {\n    console.error(\"[escrow.js] joinEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());\n    else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n}\n\n/**\n * Deposit into the escrow. Returns tx signature.\n */\nexport async function depositToEscrow(escrowPda) {\n  const program = getProgram();\n  try {\n    return await program.methods\n      .deposit()\n      .accounts({\n        escrow: escrowPda,\n        payer: program.provider.wallet.publicKey,\n        escrowAccount: escrowPda,\n        systemProgram: anchor.web3.SystemProgram.programId,\n      })\n      .rpc({\n        skipPreflight: true,\n        preflightCommitment: \"confirmed\",\n      });\n  } catch (e) {\n    console.error(\"[escrow.js] depositToEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());\n    else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n}\n\n/**\n * Resolve the escrow, paying out the winner and house. Returns tx signature.\n */\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const house = new anchor.web3.PublicKey(\n    \"A32Burni3cYyFAqjZM3CvCrStAKRFCfftk196Xfpx9Hs\"\n  );\n  try {\n    return await program.methods\n      .resolve(winnerPubkey)\n      .accounts({\n        escrow: escrowPda,\n        winner: winnerPubkey,\n        house,\n        escrowAccount: escrowPda,\n        authority: program.provider.wallet.publicKey,\n      })\n      .rpc({\n        skipPreflight: true,\n        preflightCommitment: \"confirmed\",\n      });\n  } catch (e) {\n    console.error(\"[escrow.js] resolveEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());\n    else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n}\n\n/**\n * Cancel the escrow and refund both players. Returns tx signature.\n */\nexport async function cancelEscrow(escrowPda, player1, player2) {\n  const program = getProgram();\n  try {\n    return await program.methods\n      .cancel()\n      .accounts({\n        escrow: escrowPda,\n        player1,\n        player2,\n        escrowAccount: escrowPda,\n        authority: program.provider.wallet.publicKey,\n      })\n      .rpc({\n        skipPreflight: true,\n        preflightCommitment: \"confirmed\",\n      });\n  } catch (e) {\n    console.error(\"[escrow.js] cancelEscrow failed:\", e);\n    if (e.getLogs) console.error(\"Logs:\", await e.getLogs());\n    else if (e.logs) console.error(\"Logs:\", e.logs);\n    throw e;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}