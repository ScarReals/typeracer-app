{"ast":null,"code":"import * as anchor from \"@coral-xyz/anchor\";\nimport { Connection, clusterApiUrl, PublicKey } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nexport function setProvider(wallet) {\n  if (!wallet || !wallet.publicKey) throw new Error(\"Wallet not connected\");\n  const network = process.env.REACT_APP_SOLANA_NETWORK || \"mainnet-beta\";\n  const rpcEndpoint = process.env.REACT_APP_SOLANA_RPC || clusterApiUrl(network);\n  const connection = new Connection(rpcEndpoint, \"confirmed\");\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n  anchor.setProvider(provider);\n}\nexport function getProvider() {\n  return anchor.getProvider();\n}\nexport function getProgram() {\n  const provider = anchor.getProvider();\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}","map":{"version":3,"names":["anchor","Connection","clusterApiUrl","PublicKey","idl","PROGRAM_ID","metadata","address","setProvider","wallet","publicKey","Error","network","process","env","REACT_APP_SOLANA_NETWORK","rpcEndpoint","REACT_APP_SOLANA_RPC","connection","provider","AnchorProvider","preflightCommitment","commitment","getProvider","getProgram","Program"],"sources":["/home/kokoi/sol-wager-app/frontend/src/solana.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { Connection, clusterApiUrl, PublicKey } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\nexport function setProvider(wallet) {\n  if (!wallet || !wallet.publicKey) throw new Error(\"Wallet not connected\");\n  const network = process.env.REACT_APP_SOLANA_NETWORK || \"mainnet-beta\";\n  const rpcEndpoint =\n    process.env.REACT_APP_SOLANA_RPC || clusterApiUrl(network);\n\n  const connection = new Connection(rpcEndpoint, \"confirmed\");\n  const provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\",\n  });\n\n  anchor.setProvider(provider);\n}\n\nexport function getProvider() {\n  return anchor.getProvider();\n}\n\nexport function getProgram() {\n  const provider = anchor.getProvider();\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,UAAU,EAAEC,aAAa,EAAEC,SAAS,QAAQ,iBAAiB;AACtE,OAAOC,GAAG,MAAM,6BAA6B;AAE7C,MAAMC,UAAU,GAAG,IAAIF,SAAS,CAACC,GAAG,CAACE,QAAQ,CAACC,OAAO,CAAC;AAEtD,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAE;EAClC,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACC,SAAS,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EACzE,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,cAAc;EACtE,MAAMC,WAAW,GACfH,OAAO,CAACC,GAAG,CAACG,oBAAoB,IAAIf,aAAa,CAACU,OAAO,CAAC;EAE5D,MAAMM,UAAU,GAAG,IAAIjB,UAAU,CAACe,WAAW,EAAE,WAAW,CAAC;EAC3D,MAAMG,QAAQ,GAAG,IAAInB,MAAM,CAACoB,cAAc,CAACF,UAAU,EAAET,MAAM,EAAE;IAC7DY,mBAAmB,EAAE,WAAW;IAChCC,UAAU,EAAE;EACd,CAAC,CAAC;EAEFtB,MAAM,CAACQ,WAAW,CAACW,QAAQ,CAAC;AAC9B;AAEA,OAAO,SAASI,WAAWA,CAAA,EAAG;EAC5B,OAAOvB,MAAM,CAACuB,WAAW,CAAC,CAAC;AAC7B;AAEA,OAAO,SAASC,UAAUA,CAAA,EAAG;EAC3B,MAAML,QAAQ,GAAGnB,MAAM,CAACuB,WAAW,CAAC,CAAC;EACrC,OAAO,IAAIvB,MAAM,CAACyB,OAAO,CAACrB,GAAG,EAAEC,UAAU,EAAEc,QAAQ,CAAC;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}