{"ast":null,"code":"// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram, Transaction } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\n/**\n * 1) Initialize escrow account (popup #1)\n */\nexport async function initializeEscrow(wagerLamports, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  // derive a unique PDA\n  const nonce = Math.floor(Math.random() * 1000000);\n  const [escrowPDA] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], program.programId);\n\n  // build the initialize instruction\n  const ix = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPDA,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n\n  // send via wallet adapter (will popup)\n  const tx = new Transaction().add(ix);\n  const sig = await provider.wallet.sendTransaction(tx, provider.connection);\n  await provider.connection.confirmTransaction(sig, \"confirmed\");\n  return escrowPDA;\n}\n\n/**\n * 2) Deposit SOL into escrow (popup #2)\n */\nexport async function depositToEscrow(escrowPDA, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  // fetch the on‑chain escrow struct to get its vault address\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  const ix = await program.methods.deposit().accounts({\n    escrow: escrowPDA,\n    payer: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  const tx = new Transaction().add(ix);\n  const sig = await provider.wallet.sendTransaction(tx, provider.connection);\n  await provider.connection.confirmTransaction(sig, \"confirmed\");\n  return sig;\n}\n\n/**\n * Player 2 joins & deposits\n */\nexport async function joinAndDeposit(escrowPDA, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPDA,\n    player2: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  const tx = new Transaction().add(ix);\n  const sig = await provider.wallet.sendTransaction(tx, provider.connection);\n  await provider.connection.confirmTransaction(sig, \"confirmed\");\n  return sig;\n}\n\n/**\n * Cancel escrow\n */\nexport async function cancelEscrow(escrowPDA, p1, p2, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPDA,\n    player1: p1,\n    player2: p2,\n    escrowAccount: escrowAccount.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  const tx = new Transaction().add(ix);\n  const sig = await provider.wallet.sendTransaction(tx, provider.connection);\n  await provider.connection.confirmTransaction(sig, \"confirmed\");\n  return sig;\n}\n\n/**\n * Resolve escrow\n */\nexport async function resolveEscrow(escrowPDA, winner, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  const ix = await program.methods.resolve(winner).accounts({\n    escrow: escrowPDA,\n    winner,\n    house: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  const tx = new Transaction().add(ix);\n  const sig = await provider.wallet.sendTransaction(tx, provider.connection);\n  await provider.connection.confirmTransaction(sig, \"confirmed\");\n  return sig;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","Transaction","idl","PROGRAM_ID","metadata","address","initializeEscrow","wagerLamports","provider","program","Program","nonce","Math","floor","random","escrowPDA","findProgramAddress","Buffer","from","wallet","publicKey","toBuffer","BN","toArrayLike","programId","ix","methods","initialize","accounts","escrow","player1","authority","systemProgram","instruction","tx","add","sig","sendTransaction","connection","confirmTransaction","depositToEscrow","escrowAccount","account","fetch","deposit","payer","joinAndDeposit","player2","cancelEscrow","p1","p2","cancel","resolveEscrow","winner","resolve","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram, Transaction } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\n/**\n * 1) Initialize escrow account (popup #1)\n */\nexport async function initializeEscrow(wagerLamports, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  // derive a unique PDA\n  const nonce = Math.floor(Math.random() * 1_000_000);\n  const [escrowPDA] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      provider.wallet.publicKey.toBuffer(),\n      new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  // build the initialize instruction\n  const ix = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPDA,\n      player1: provider.wallet.publicKey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  // send via wallet adapter (will popup)\n  const tx = new Transaction().add(ix);\n  const sig = await provider.wallet.sendTransaction(tx, provider.connection);\n  await provider.connection.confirmTransaction(sig, \"confirmed\");\n\n  return escrowPDA;\n}\n\n/**\n * 2) Deposit SOL into escrow (popup #2)\n */\nexport async function depositToEscrow(escrowPDA, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  // fetch the on‑chain escrow struct to get its vault address\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  const ix = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPDA,\n      payer: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  const tx = new Transaction().add(ix);\n  const sig = await provider.wallet.sendTransaction(tx, provider.connection);\n  await provider.connection.confirmTransaction(sig, \"confirmed\");\n  return sig;\n}\n\n/**\n * Player 2 joins & deposits\n */\nexport async function joinAndDeposit(escrowPDA, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPDA,\n      player2: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  const tx = new Transaction().add(ix);\n  const sig = await provider.wallet.sendTransaction(tx, provider.connection);\n  await provider.connection.confirmTransaction(sig, \"confirmed\");\n  return sig;\n}\n\n/**\n * Cancel escrow\n */\nexport async function cancelEscrow(escrowPDA, p1, p2, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPDA,\n      player1: p1,\n      player2: p2,\n      escrowAccount: escrowAccount.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n\n  const tx = new Transaction().add(ix);\n  const sig = await provider.wallet.sendTransaction(tx, provider.connection);\n  await provider.connection.confirmTransaction(sig, \"confirmed\");\n  return sig;\n}\n\n/**\n * Resolve escrow\n */\nexport async function resolveEscrow(escrowPDA, winner, provider) {\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  const ix = await program.methods\n    .resolve(winner)\n    .accounts({\n      escrow: escrowPDA,\n      winner,\n      house: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n\n  const tx = new Transaction().add(ix);\n  const sig = await provider.wallet.sendTransaction(tx, provider.connection);\n  await provider.connection.confirmTransaction(sig, \"confirmed\");\n  return sig;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}