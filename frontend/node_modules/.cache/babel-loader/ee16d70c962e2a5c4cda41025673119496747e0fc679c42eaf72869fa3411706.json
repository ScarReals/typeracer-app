{"ast":null,"code":"import * as anchor from \"@coral-xyz/anchor\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { getPhantomWallet } from \"@solana/wallet-adapter-wallets\";\nimport { AnchorProvider, Program, Idl } from \"@coral-xyz/anchor\";\nimport idl from \"./idl/typeracer_escrow.json\";\nlet provider;\nlet program;\n\n/**\n * Setup and return Anchor provider and program instance.\n * Should be called after wallet connection.\n */\nexport function setProvider(wallet) {\n  if (!wallet) throw new Error(\"Wallet not connected\");\n  const network = process.env.REACT_APP_SOLANA_NETWORK || \"mainnet-beta\";\n  const rpcEndpoint = process.env.REACT_APP_SOLANA_RPC || clusterApiUrl(network);\n  const connection = new Connection(rpcEndpoint, \"confirmed\");\n  provider = new AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n  program = new Program(idl, idl.metadata.address, provider);\n  return program;\n}\n\n/**\n * Returns the current Anchor program instance.\n * Throws if provider/program not initialized.\n */\nexport function getProgram() {\n  if (!program) {\n    throw new Error(\"Program not initialized. Call setProvider(wallet) first.\");\n  }\n  return program;\n}\n\n/**\n * Returns current Anchor provider instance.\n */\nexport function getProvider() {\n  if (!provider) {\n    throw new Error(\"Provider not initialized. Call setProvider(wallet) first.\");\n  }\n  return provider;\n}","map":{"version":3,"names":["anchor","Connection","PublicKey","clusterApiUrl","WalletAdapterNetwork","getPhantomWallet","AnchorProvider","Program","Idl","idl","provider","program","setProvider","wallet","Error","network","process","env","REACT_APP_SOLANA_NETWORK","rpcEndpoint","REACT_APP_SOLANA_RPC","connection","preflightCommitment","commitment","metadata","address","getProgram","getProvider"],"sources":["/home/kokoi/sol-wager-app/frontend/src/solana.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { getPhantomWallet } from \"@solana/wallet-adapter-wallets\";\nimport { AnchorProvider, Program, Idl } from \"@coral-xyz/anchor\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\nlet provider;\nlet program;\n\n/**\n * Setup and return Anchor provider and program instance.\n * Should be called after wallet connection.\n */\nexport function setProvider(wallet) {\n  if (!wallet) throw new Error(\"Wallet not connected\");\n\n  const network = process.env.REACT_APP_SOLANA_NETWORK || \"mainnet-beta\";\n  const rpcEndpoint = process.env.REACT_APP_SOLANA_RPC || clusterApiUrl(network);\n\n  const connection = new Connection(rpcEndpoint, \"confirmed\");\n  provider = new AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\",\n  });\n\n  program = new Program(idl, idl.metadata.address, provider);\n  return program;\n}\n\n/**\n * Returns the current Anchor program instance.\n * Throws if provider/program not initialized.\n */\nexport function getProgram() {\n  if (!program) {\n    throw new Error(\n      \"Program not initialized. Call setProvider(wallet) first.\"\n    );\n  }\n  return program;\n}\n\n/**\n * Returns current Anchor provider instance.\n */\nexport function getProvider() {\n  if (!provider) {\n    throw new Error(\n      \"Provider not initialized. Call setProvider(wallet) first.\"\n    );\n  }\n  return provider;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,UAAU,EAAEC,SAAS,EAAEC,aAAa,QAAQ,iBAAiB;AACtE,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE,SAASC,gBAAgB,QAAQ,gCAAgC;AACjE,SAASC,cAAc,EAAEC,OAAO,EAAEC,GAAG,QAAQ,mBAAmB;AAChE,OAAOC,GAAG,MAAM,6BAA6B;AAE7C,IAAIC,QAAQ;AACZ,IAAIC,OAAO;;AAEX;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAE;EAClC,IAAI,CAACA,MAAM,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EAEpD,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,cAAc;EACtE,MAAMC,WAAW,GAAGH,OAAO,CAACC,GAAG,CAACG,oBAAoB,IAAIjB,aAAa,CAACY,OAAO,CAAC;EAE9E,MAAMM,UAAU,GAAG,IAAIpB,UAAU,CAACkB,WAAW,EAAE,WAAW,CAAC;EAC3DT,QAAQ,GAAG,IAAIJ,cAAc,CAACe,UAAU,EAAER,MAAM,EAAE;IAChDS,mBAAmB,EAAE,WAAW;IAChCC,UAAU,EAAE;EACd,CAAC,CAAC;EAEFZ,OAAO,GAAG,IAAIJ,OAAO,CAACE,GAAG,EAAEA,GAAG,CAACe,QAAQ,CAACC,OAAO,EAAEf,QAAQ,CAAC;EAC1D,OAAOC,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASe,UAAUA,CAAA,EAAG;EAC3B,IAAI,CAACf,OAAO,EAAE;IACZ,MAAM,IAAIG,KAAK,CACb,0DACF,CAAC;EACH;EACA,OAAOH,OAAO;AAChB;;AAEA;AACA;AACA;AACA,OAAO,SAASgB,WAAWA,CAAA,EAAG;EAC5B,IAAI,CAACjB,QAAQ,EAAE;IACb,MAAM,IAAII,KAAK,CACb,2DACF,CAAC;EACH;EACA,OAAOJ,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}