{"ast":null,"code":"// frontend/src/solana.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// ── RPC endpoint ──────────────────────────────────────────────────────────────\nconst RPC_URL = process.env.REACT_APP_SOLANA_RPC;\nif (!RPC_URL) {\n  throw new Error(\"Missing REACT_APP_SOLANA_RPC in your .env\");\n}\nexport const connection = new Connection(RPC_URL, \"confirmed\");\n\n// ── Program ID ────────────────────────────────────────────────────────────────\n// Support both top‑level `address` and `metadata.address`\nlet idlAddress = null;\nif (idl.address) {\n  idlAddress = idl.address;\n} else if (idl.metadata && idl.metadata.address) {\n  idlAddress = idl.metadata.address;\n}\nif (!idlAddress) {\n  throw new Error(\"IDL is missing a top‑level `address` field or `metadata.address`\");\n}\nexport const PROGRAM_ID = new PublicKey(idlAddress);\n\n// ── Anchor provider holder ───────────────────────────────────────────────────\nlet _provider = null;\n\n/**\n * Sets the Anchor provider for all `escrow.js` calls.\n * Must be called from App.jsx after wallet connects.\n * @param {import('@solana/wallet-adapter-base').WalletAdapter} wallet\n */\nexport function setProvider(wallet) {\n  _provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n}\n\n/** Returns the Anchor provider (or null if not set yet) */\nexport function getProvider() {\n  return _provider;\n}","map":{"version":3,"names":["anchor","Connection","PublicKey","idl","RPC_URL","process","env","REACT_APP_SOLANA_RPC","Error","connection","idlAddress","address","metadata","PROGRAM_ID","_provider","setProvider","wallet","AnchorProvider","preflightCommitment","commitment","getProvider"],"sources":["/home/kokoi/sol-wager-app/frontend/src/solana.js"],"sourcesContent":["// frontend/src/solana.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// ── RPC endpoint ──────────────────────────────────────────────────────────────\nconst RPC_URL = process.env.REACT_APP_SOLANA_RPC;\nif (!RPC_URL) {\n  throw new Error(\"Missing REACT_APP_SOLANA_RPC in your .env\");\n}\nexport const connection = new Connection(RPC_URL, \"confirmed\");\n\n// ── Program ID ────────────────────────────────────────────────────────────────\n// Support both top‑level `address` and `metadata.address`\nlet idlAddress = null;\nif (idl.address) {\n  idlAddress = idl.address;\n} else if (idl.metadata && idl.metadata.address) {\n  idlAddress = idl.metadata.address;\n}\nif (!idlAddress) {\n  throw new Error(\n    \"IDL is missing a top‑level `address` field or `metadata.address`\"\n  );\n}\nexport const PROGRAM_ID = new PublicKey(idlAddress);\n\n// ── Anchor provider holder ───────────────────────────────────────────────────\nlet _provider = null;\n\n/**\n * Sets the Anchor provider for all `escrow.js` calls.\n * Must be called from App.jsx after wallet connects.\n * @param {import('@solana/wallet-adapter-base').WalletAdapter} wallet\n */\nexport function setProvider(wallet) {\n  _provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\",\n  });\n}\n\n/** Returns the Anchor provider (or null if not set yet) */\nexport function getProvider() {\n  return _provider;\n}\n"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,UAAU,EAAEC,SAAS,QAAQ,iBAAiB;AACvD,OAAOC,GAAG,MAAM,6BAA6B;;AAE7C;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB;AAChD,IAAI,CAACH,OAAO,EAAE;EACZ,MAAM,IAAII,KAAK,CAAC,2CAA2C,CAAC;AAC9D;AACA,OAAO,MAAMC,UAAU,GAAG,IAAIR,UAAU,CAACG,OAAO,EAAE,WAAW,CAAC;;AAE9D;AACA;AACA,IAAIM,UAAU,GAAG,IAAI;AACrB,IAAIP,GAAG,CAACQ,OAAO,EAAE;EACfD,UAAU,GAAGP,GAAG,CAACQ,OAAO;AAC1B,CAAC,MAAM,IAAIR,GAAG,CAACS,QAAQ,IAAIT,GAAG,CAACS,QAAQ,CAACD,OAAO,EAAE;EAC/CD,UAAU,GAAGP,GAAG,CAACS,QAAQ,CAACD,OAAO;AACnC;AACA,IAAI,CAACD,UAAU,EAAE;EACf,MAAM,IAAIF,KAAK,CACb,kEACF,CAAC;AACH;AACA,OAAO,MAAMK,UAAU,GAAG,IAAIX,SAAS,CAACQ,UAAU,CAAC;;AAEnD;AACA,IAAII,SAAS,GAAG,IAAI;;AAEpB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAE;EAClCF,SAAS,GAAG,IAAId,MAAM,CAACiB,cAAc,CAACR,UAAU,EAAEO,MAAM,EAAE;IACxDE,mBAAmB,EAAE,WAAW;IAChCC,UAAU,EAAE;EACd,CAAC,CAAC;AACJ;;AAEA;AACA,OAAO,SAASC,WAAWA,CAAA,EAAG;EAC5B,OAAON,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}