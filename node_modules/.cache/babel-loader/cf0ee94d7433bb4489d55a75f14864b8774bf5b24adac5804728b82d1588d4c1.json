{"ast":null,"code":"// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID } from \"./solana\";\n\n/**\n * Returns an Anchor program instance using a given provider.\n * You MUST pass the right provider for user wallet context!\n */\nfunction getProgram(provider) {\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/** Initialize & deposit */\nexport async function buildInitializeAndDepositIxns(wagerLamports, playerPublicKey, nonce, provider) {\n  const escrowSeed = [Buffer.from(\"escrow\"), playerPublicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)];\n  const [escrowPda] = await PublicKey.findProgramAddress(escrowSeed, PROGRAM_ID);\n  const program = getProgram(provider);\n  const ixInit = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: playerPublicKey,\n    authority: playerPublicKey,\n    system_program: SystemProgram.programId\n  }).instruction();\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: playerPublicKey,\n    escrow_account: escrowPda,\n    system_program: SystemProgram.programId\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/** Join & deposit */\nexport async function buildJoinAndDepositIxn(escrowPda, provider) {\n  const program = getProgram(provider);\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: provider.wallet.publicKey,\n    escrow_account: escrowPda,\n    system_program: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\n\n/** Cancel */\nexport async function buildCancelIxn(escrowPda, player1, player2, provider) {\n  const program = getProgram(provider);\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrow_account: escrowPda,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  return ix;\n}\n\n// No buildResolveIxn for frontend: handled by backend only!","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","getProgram","provider","Program","buildInitializeAndDepositIxns","wagerLamports","playerPublicKey","nonce","escrowSeed","Buffer","from","toBuffer","BN","toArrayLike","escrowPda","findProgramAddress","program","ixInit","methods","initialize","accounts","escrow","player1","authority","system_program","programId","instruction","ixDeposit","deposit","payer","escrow_account","buildJoinAndDepositIxn","ix","joinAndDeposit","player2","wallet","publicKey","buildCancelIxn","cancel"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID } from \"./solana\";\n\n/**\n * Returns an Anchor program instance using a given provider.\n * You MUST pass the right provider for user wallet context!\n */\nfunction getProgram(provider) {\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/** Initialize & deposit */\nexport async function buildInitializeAndDepositIxns(\n  wagerLamports,\n  playerPublicKey,\n  nonce,\n  provider\n) {\n  const escrowSeed = [\n    Buffer.from(\"escrow\"),\n    playerPublicKey.toBuffer(),\n    new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n  ];\n  const [escrowPda] = await PublicKey.findProgramAddress(escrowSeed, PROGRAM_ID);\n\n  const program = getProgram(provider);\n\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,\n      player1: playerPublicKey,\n      authority: playerPublicKey,\n      system_program: SystemProgram.programId,\n    })\n    .instruction();\n\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: playerPublicKey,\n      escrow_account: escrowPda,\n      system_program: SystemProgram.programId,\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/** Join & deposit */\nexport async function buildJoinAndDepositIxn(escrowPda, provider) {\n  const program = getProgram(provider);\n\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: provider.wallet.publicKey,\n      escrow_account: escrowPda,\n      system_program: SystemProgram.programId,\n    })\n    .instruction();\n  return ix;\n}\n\n/** Cancel */\nexport async function buildCancelIxn(escrowPda, player1, player2, provider) {\n  const program = getProgram(provider);\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrow_account: escrowPda,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n  return ix;\n}\n\n// No buildResolveIxn for frontend: handled by backend only!\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}