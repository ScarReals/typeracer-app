{"ast":null,"code":"// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily get your Anchor Program (throws if provider not set) */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\"Provider not set: call setProvider(wallet) in App.jsx before using escrow.js\");\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Build the initialize & deposit instructions for a new escrow match\n * @param {number} lamports Amount to wager (in lamports)\n * @param {PublicKey} initializerPubkey\n * @param {number} nonce\n */\nexport async function buildInitializeAndDepositIxns(lamports, initializerPubkey, nonce) {\n  const program = getProgram();\n\n  // ── 1) Derive PDA with an 8‑byte LE nonce ─────────────────\n  const nonceBuf = Buffer.alloc(8);\n  nonceBuf.writeBigUInt64LE(BigInt(nonce), 0);\n  const [escrowPda, bump] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"),\n  // seed #1\n  initializerPubkey.toBuffer(),\n  // seed #2\n  nonceBuf // seed #3 (8-byte LE)\n  ], PROGRAM_ID);\n\n  // ── 2) Initialize on‑chain with (wager, nonce) ────────────\n  const ixInit = await program.methods.initialize(new anchor.BN(lamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: initializerPubkey,\n    authority: initializerPubkey,\n    system_program: SystemProgram.programId // snake_case\n  }).instruction();\n\n  // ── 3) Deposit SOL into the PDA ─────────────────────────────\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports\n  });\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * Build instruction to join & deposit in one go\n */\nexport async function buildJoinAndDepositIxn(escrowPda, wager) {\n  const program = getProgram();\n  return program.methods.joinAndDeposit(new anchor.BN(wager)).accounts({\n    escrow: escrowPda,\n    player2: program.provider.wallet.publicKey,\n    escrow_account: escrowPda,\n    system_program: SystemProgram.programId\n  }).instruction();\n}\n\n/**\n * Build instruction to cancel an escrow\n */\nexport async function buildCancelIxn(escrowPda, initializerPubkey, accepterPubkey) {\n  const program = getProgram();\n  return program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1: initializerPubkey,\n    player2: accepterPubkey,\n    authority: initializerPubkey,\n    escrow_account: escrowPda,\n    system_program: SystemProgram.programId\n  }).instruction();\n}\n\n/**\n * Build instruction to resolve (payout)\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const winnerKey = typeof winnerPubkey === \"string\" ? new PublicKey(winnerPubkey) : winnerPubkey;\n  return program.methods.resolve(winnerKey).accounts({\n    escrow: escrowPda,\n    winner: winnerKey,\n    house: program.provider.wallet.publicKey,\n    escrow_account: escrowPda\n  }).instruction();\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","getProvider","getProgram","provider","Error","Program","buildInitializeAndDepositIxns","lamports","initializerPubkey","nonce","program","nonceBuf","Buffer","alloc","writeBigUInt64LE","BigInt","escrowPda","bump","findProgramAddress","from","toBuffer","ixInit","methods","initialize","BN","accounts","escrow","player1","authority","system_program","programId","instruction","ixDeposit","transfer","fromPubkey","toPubkey","buildJoinAndDepositIxn","wager","joinAndDeposit","player2","wallet","publicKey","escrow_account","buildCancelIxn","accepterPubkey","cancel","buildResolveIxn","winnerPubkey","winnerKey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily get your Anchor Program (throws if provider not set) */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\n      \"Provider not set: call setProvider(wallet) in App.jsx before using escrow.js\"\n    );\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Build the initialize & deposit instructions for a new escrow match\n * @param {number} lamports Amount to wager (in lamports)\n * @param {PublicKey} initializerPubkey\n * @param {number} nonce\n */\nexport async function buildInitializeAndDepositIxns(\n  lamports,\n  initializerPubkey,\n  nonce\n) {\n  const program = getProgram();\n\n  // ── 1) Derive PDA with an 8‑byte LE nonce ─────────────────\n  const nonceBuf = Buffer.alloc(8);\n  nonceBuf.writeBigUInt64LE(BigInt(nonce), 0);\n\n  const [escrowPda, bump] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),           // seed #1\n      initializerPubkey.toBuffer(),    // seed #2\n      nonceBuf,                        // seed #3 (8-byte LE)\n    ],\n    PROGRAM_ID\n  );\n\n  // ── 2) Initialize on‑chain with (wager, nonce) ────────────\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(lamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,\n      player1: initializerPubkey,\n      authority: initializerPubkey,\n      system_program: SystemProgram.programId,  // snake_case\n    })\n    .instruction();\n\n  // ── 3) Deposit SOL into the PDA ─────────────────────────────\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports,\n  });\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * Build instruction to join & deposit in one go\n */\nexport async function buildJoinAndDepositIxn(escrowPda, wager) {\n  const program = getProgram();\n  return program.methods\n    .joinAndDeposit(new anchor.BN(wager))\n    .accounts({\n      escrow: escrowPda,\n      player2: program.provider.wallet.publicKey,\n      escrow_account: escrowPda,\n      system_program: SystemProgram.programId,\n    })\n    .instruction();\n}\n\n/**\n * Build instruction to cancel an escrow\n */\nexport async function buildCancelIxn(\n  escrowPda,\n  initializerPubkey,\n  accepterPubkey\n) {\n  const program = getProgram();\n  return program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1: initializerPubkey,\n      player2: accepterPubkey,\n      authority: initializerPubkey,\n      escrow_account: escrowPda,\n      system_program: SystemProgram.programId,\n    })\n    .instruction();\n}\n\n/**\n * Build instruction to resolve (payout)\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const winnerKey =\n    typeof winnerPubkey === \"string\"\n      ? new PublicKey(winnerPubkey)\n      : winnerPubkey;\n\n  return program.methods\n    .resolve(winnerKey)\n    .accounts({\n      escrow: escrowPda,\n      winner: winnerKey,\n      house: program.provider.wallet.publicKey,\n      escrow_account: escrowPda,\n    })\n    .instruction();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}