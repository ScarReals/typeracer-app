{"ast":null,"code":"// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\n\n// Pull the program ID from metadata.address, not idl.address\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nconst CONFIRM_TIMEOUT_MS = 120000; // 2 minutes\n\nasync function sendAndConfirm(tx, provider) {\n  // let wallet sign\n  const signed = await provider.wallet.signTransaction(tx);\n  const raw = signed.serialize();\n  // send and confirm w/ timeout\n  const sig = await provider.connection.sendRawTransaction(raw, {\n    skipPreflight: false,\n    preflightCommitment: \"confirmed\"\n  });\n  await provider.connection.confirmTransaction({\n    signature: sig,\n    blockhash: null,\n    lastValidBlockHeight: null\n  }, \"confirmed\", CONFIRM_TIMEOUT_MS);\n  return sig;\n}\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const nonce = Math.floor(Math.random() * 1e6);\n  const [escrowPDA] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], program.programId);\n  const tx = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPDA,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).transaction();\n  await sendAndConfirm(tx, provider);\n  return escrowPDA;\n}\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const account = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPDA,\n    player2: provider.wallet.publicKey,\n    escrowAccount: account.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).transaction();\n  await sendAndConfirm(tx, provider);\n}\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const account = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.deposit().accounts({\n    escrow: escrowPDA,\n    payer: provider.wallet.publicKey,\n    escrowAccount: account.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).transaction();\n  await sendAndConfirm(tx, provider);\n}\nexport async function cancelEscrow(escrowPDA, player1Pub, player2Pub) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const account = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.cancel().accounts({\n    escrow: escrowPDA,\n    player1: player1Pub,\n    player2: player2Pub,\n    escrowAccount: account.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).transaction();\n  await sendAndConfirm(tx, provider);\n}\nexport async function resolveEscrow(escrowPDA, winnerPub) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const account = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.resolve(winnerPub).accounts({\n    escrow: escrowPDA,\n    winner: winnerPub,\n    house: provider.wallet.publicKey,\n    escrowAccount: account.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).transaction();\n  await sendAndConfirm(tx, provider);\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","getProvider","PROGRAM_ID","metadata","address","CONFIRM_TIMEOUT_MS","sendAndConfirm","tx","provider","signed","wallet","signTransaction","raw","serialize","sig","connection","sendRawTransaction","skipPreflight","preflightCommitment","confirmTransaction","signature","blockhash","lastValidBlockHeight","initializeEscrow","wagerLamports","program","Program","nonce","Math","floor","random","escrowPDA","findProgramAddress","Buffer","from","publicKey","toBuffer","BN","toArrayLike","programId","methods","initialize","accounts","escrow","player1","authority","systemProgram","transaction","joinAndDeposit","account","fetch","player2","escrowAccount","depositToEscrow","deposit","payer","cancelEscrow","player1Pub","player2Pub","cancel","resolveEscrow","winnerPub","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["\n// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\n\n// Pull the program ID from metadata.address, not idl.address\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nconst CONFIRM_TIMEOUT_MS = 120_000; // 2 minutes\n\nasync function sendAndConfirm(tx, provider) {\n  // let wallet sign\n  const signed = await provider.wallet.signTransaction(tx);\n  const raw = signed.serialize();\n  // send and confirm w/ timeout\n  const sig = await provider.connection.sendRawTransaction(raw, {\n    skipPreflight: false,\n    preflightCommitment: \"confirmed\",\n  });\n  await provider.connection.confirmTransaction(\n    { signature: sig, blockhash: null, lastValidBlockHeight: null },\n    \"confirmed\",\n    CONFIRM_TIMEOUT_MS\n  );\n  return sig;\n}\n\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const nonce = Math.floor(Math.random() * 1e6);\n  const [escrowPDA] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      provider.wallet.publicKey.toBuffer(),\n      new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  const tx = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPDA,\n      player1: provider.wallet.publicKey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx, provider);\n  return escrowPDA;\n}\n\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const account = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPDA,\n      player2: provider.wallet.publicKey,\n      escrowAccount: account.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx, provider);\n}\n\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const account = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPDA,\n      payer: provider.wallet.publicKey,\n      escrowAccount: account.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx, provider);\n}\n\nexport async function cancelEscrow(escrowPDA, player1Pub, player2Pub) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const account = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPDA,\n      player1: player1Pub,\n      player2: player2Pub,\n      escrowAccount: account.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx, provider);\n}\n\nexport async function resolveEscrow(escrowPDA, winnerPub) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const account = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods\n    .resolve(winnerPub)\n    .accounts({\n      escrow: escrowPDA,\n      winner: winnerPub,\n      house: provider.wallet.publicKey,\n      escrowAccount: account.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx, provider);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}