{"ast":null,"code":"// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily grab your Anchor Program (must have called setProvider already) */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\"Provider not set: call setProvider(wallet) in your App before using escrow.js\");\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Build the init & deposit instructions for a fresh escrow\n * @param {number} lamports  // amount in lamports\n * @param {PublicKey} initializerPubkey\n * @param {number} nonce     // your random nonce\n */\nexport async function buildInitializeAndDepositIxns(lamports, initializerPubkey, nonce) {\n  const program = getProgram();\n\n  // ── Pack your nonce into an 8‑byte little‑endian Buffer\n  const nonceBn = new anchor.BN(nonce);\n  const nonceBuf = Buffer.from(nonceBn.toArray(\"le\", 8));\n\n  // ── Derive the EXACT PDA your Rust expects\n  const [escrowPda, bump] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"),\n  // seed #1: the static str\n  initializerPubkey.toBuffer(),\n  // seed #2: your wallet pubkey\n  nonceBuf // seed #3: 8‑byte LE nonce\n  ], PROGRAM_ID);\n\n  // ── 1) Call your Anchor `initialize(wager, nonce)` \n  const ixInit = await program.methods.initialize(new anchor.BN(lamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    // your PDA\n    player1: initializerPubkey,\n    // signer\n    authority: initializerPubkey,\n    // payer = same signer\n    system_program: SystemProgram.programId // snake_case!\n  }).instruction();\n\n  // ── 2) Deposit actual SOL into the PDA vault\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports\n  });\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n// …and do the same getProgram()/.accounts() pattern for join, cancel, resolve","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","getProvider","getProgram","provider","Error","Program","buildInitializeAndDepositIxns","lamports","initializerPubkey","nonce","program","nonceBn","BN","nonceBuf","Buffer","from","toArray","escrowPda","bump","findProgramAddress","toBuffer","ixInit","methods","initialize","accounts","escrow","player1","authority","system_program","programId","instruction","ixDeposit","transfer","fromPubkey","toPubkey"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily grab your Anchor Program (must have called setProvider already) */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\n      \"Provider not set: call setProvider(wallet) in your App before using escrow.js\"\n    );\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Build the init & deposit instructions for a fresh escrow\n * @param {number} lamports  // amount in lamports\n * @param {PublicKey} initializerPubkey\n * @param {number} nonce     // your random nonce\n */\nexport async function buildInitializeAndDepositIxns(\n  lamports,\n  initializerPubkey,\n  nonce\n) {\n  const program = getProgram();\n\n  // ── Pack your nonce into an 8‑byte little‑endian Buffer\n  const nonceBn = new anchor.BN(nonce);\n  const nonceBuf = Buffer.from(nonceBn.toArray(\"le\", 8));\n\n  // ── Derive the EXACT PDA your Rust expects\n  const [escrowPda, bump] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),            // seed #1: the static str\n      initializerPubkey.toBuffer(),     // seed #2: your wallet pubkey\n      nonceBuf,                         // seed #3: 8‑byte LE nonce\n    ],\n    PROGRAM_ID\n  );\n\n  // ── 1) Call your Anchor `initialize(wager, nonce)` \n  const ixInit = await program.methods\n    .initialize(new anchor.BN(lamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,                                    // your PDA\n      player1: initializerPubkey,                           // signer\n      authority: initializerPubkey,                         // payer = same signer\n      system_program: SystemProgram.programId,              // snake_case!\n    })\n    .instruction();\n\n  // ── 2) Deposit actual SOL into the PDA vault\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports,\n  });\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n// …and do the same getProgram()/.accounts() pattern for join, cancel, resolve\n"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,SAAS,EAAEC,aAAa,QAAQ,iBAAiB;AAC1D,OAAOC,GAAG,MAAM,6BAA6B;AAC7C,SAASC,UAAU,EAAEC,WAAW,QAAQ,UAAU;;AAElD;AACA,SAASC,UAAUA,CAAA,EAAG;EACpB,MAAMC,QAAQ,GAAGF,WAAW,CAAC,CAAC;EAC9B,IAAI,CAACE,QAAQ,EAAE;IACb,MAAM,IAAIC,KAAK,CACb,+EACF,CAAC;EACH;EACA,OAAO,IAAIR,MAAM,CAACS,OAAO,CAACN,GAAG,EAAEC,UAAU,EAAEG,QAAQ,CAAC;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeG,6BAA6BA,CACjDC,QAAQ,EACRC,iBAAiB,EACjBC,KAAK,EACL;EACA,MAAMC,OAAO,GAAGR,UAAU,CAAC,CAAC;;EAE5B;EACA,MAAMS,OAAO,GAAG,IAAIf,MAAM,CAACgB,EAAE,CAACH,KAAK,CAAC;EACpC,MAAMI,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACJ,OAAO,CAACK,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAM,CAACC,SAAS,EAAEC,IAAI,CAAC,GAAG,MAAMrB,SAAS,CAACsB,kBAAkB,CAC1D,CACEL,MAAM,CAACC,IAAI,CAAC,QAAQ,CAAC;EAAa;EAClCP,iBAAiB,CAACY,QAAQ,CAAC,CAAC;EAAM;EAClCP,QAAQ,CAA0B;EAAA,CACnC,EACDb,UACF,CAAC;;EAED;EACA,MAAMqB,MAAM,GAAG,MAAMX,OAAO,CAACY,OAAO,CACjCC,UAAU,CAAC,IAAI3B,MAAM,CAACgB,EAAE,CAACL,QAAQ,CAAC,EAAE,IAAIX,MAAM,CAACgB,EAAE,CAACH,KAAK,CAAC,CAAC,CACzDe,QAAQ,CAAC;IACRC,MAAM,EAAER,SAAS;IAAqC;IACtDS,OAAO,EAAElB,iBAAiB;IAA4B;IACtDmB,SAAS,EAAEnB,iBAAiB;IAA0B;IACtDoB,cAAc,EAAE9B,aAAa,CAAC+B,SAAS,CAAe;EACxD,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;;EAEhB;EACA,MAAMC,SAAS,GAAGjC,aAAa,CAACkC,QAAQ,CAAC;IACvCC,UAAU,EAAEzB,iBAAiB;IAC7B0B,QAAQ,EAAEjB,SAAS;IACnBV;EACF,CAAC,CAAC;EAEF,OAAO;IAAEc,MAAM;IAAEU,SAAS;IAAEd;EAAU,CAAC;AACzC;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}