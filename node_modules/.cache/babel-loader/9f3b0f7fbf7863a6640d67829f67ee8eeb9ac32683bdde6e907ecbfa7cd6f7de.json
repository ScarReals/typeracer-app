{"ast":null,"code":"// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\nconst PROGRAM_ID = new PublicKey(idl.address);\nconst CONFIRM_TIMEOUT_MS = 120000; // 2 minutes\n\n/**\n * Helper: build, sign, send, and confirm a Transaction.\n */\nasync function sendAndConfirm(transaction, provider) {\n  // Let the wallet sign it\n  const signed = await provider.wallet.signTransaction(transaction);\n  const raw = signed.serialize();\n\n  // Send raw Tx\n  const sig = await provider.connection.sendRawTransaction(raw, {\n    skipPreflight: false,\n    preflightCommitment: \"confirmed\"\n  });\n\n  // Wait up to CONFIRM_TIMEOUT_MS for confirmation\n  await provider.connection.confirmTransaction(sig, \"confirmed\", CONFIRM_TIMEOUT_MS);\n  return sig;\n}\n\n/**\n * Initialize a new escrow with a 2‑minute confirmation timeout.\n * @param {number} wagerLamports\n * @returns {PublicKey} PDA of escrow\n */\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const nonce = Math.floor(Math.random() * 1e6);\n  const [escrowPDA] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], program.programId);\n\n  // Build instruction\n  const tx = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPDA,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).transaction();\n  await sendAndConfirm(tx, provider);\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one transaction.\n * @param {PublicKey} escrowPDA\n */\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPDA,\n    player2: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).transaction();\n  await sendAndConfirm(tx, provider);\n}\n\n/**\n * Deposit to escrow (only deposit, no join).\n * @param {PublicKey} escrowPDA\n */\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.deposit().accounts({\n    escrow: escrowPDA,\n    payer: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).transaction();\n  await sendAndConfirm(tx, provider);\n}\n\n/**\n * Cancel an escrow.\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} player1Pubkey\n * @param {PublicKey} player2Pubkey\n */\nexport async function cancelEscrow(escrowPDA, player1Pubkey, player2Pubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.cancel().accounts({\n    escrow: escrowPDA,\n    player1: player1Pubkey,\n    player2: player2Pubkey,\n    escrowAccount: escrowAccount.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).transaction();\n  await sendAndConfirm(tx, provider);\n}\n\n/**\n * Resolve escrow by specifying the winner.\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} winnerPubkey\n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  const tx = await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPDA,\n    winner: winnerPubkey,\n    house: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).transaction();\n  await sendAndConfirm(tx, provider);\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","getProvider","PROGRAM_ID","address","CONFIRM_TIMEOUT_MS","sendAndConfirm","transaction","provider","signed","wallet","signTransaction","raw","serialize","sig","connection","sendRawTransaction","skipPreflight","preflightCommitment","confirmTransaction","initializeEscrow","wagerLamports","program","Program","nonce","Math","floor","random","escrowPDA","findProgramAddress","Buffer","from","publicKey","toBuffer","BN","toArrayLike","programId","tx","methods","initialize","accounts","escrow","player1","authority","systemProgram","joinAndDeposit","escrowAccount","account","fetch","player2","depositToEscrow","deposit","payer","cancelEscrow","player1Pubkey","player2Pubkey","cancel","resolveEscrow","winnerPubkey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\n\nconst PROGRAM_ID = new PublicKey(idl.address);\nconst CONFIRM_TIMEOUT_MS = 120_000; // 2 minutes\n\n/**\n * Helper: build, sign, send, and confirm a Transaction.\n */\nasync function sendAndConfirm(transaction, provider) {\n  // Let the wallet sign it\n  const signed = await provider.wallet.signTransaction(transaction);\n  const raw = signed.serialize();\n\n  // Send raw Tx\n  const sig = await provider.connection.sendRawTransaction(raw, {\n    skipPreflight: false,\n    preflightCommitment: \"confirmed\",\n  });\n\n  // Wait up to CONFIRM_TIMEOUT_MS for confirmation\n  await provider.connection.confirmTransaction(sig, \"confirmed\", CONFIRM_TIMEOUT_MS);\n  return sig;\n}\n\n/**\n * Initialize a new escrow with a 2‑minute confirmation timeout.\n * @param {number} wagerLamports\n * @returns {PublicKey} PDA of escrow\n */\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const nonce = Math.floor(Math.random() * 1e6);\n  const [escrowPDA] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      provider.wallet.publicKey.toBuffer(),\n      new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  // Build instruction\n  const tx = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPDA,\n      player1: provider.wallet.publicKey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx, provider);\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one transaction.\n * @param {PublicKey} escrowPDA\n */\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  const tx = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPDA,\n      player2: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx, provider);\n}\n\n/**\n * Deposit to escrow (only deposit, no join).\n * @param {PublicKey} escrowPDA\n */\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  const tx = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPDA,\n      payer: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx, provider);\n}\n\n/**\n * Cancel an escrow.\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} player1Pubkey\n * @param {PublicKey} player2Pubkey\n */\nexport async function cancelEscrow(escrowPDA, player1Pubkey, player2Pubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  const tx = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPDA,\n      player1: player1Pubkey,\n      player2: player2Pubkey,\n      escrowAccount: escrowAccount.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx, provider);\n}\n\n/**\n * Resolve escrow by specifying the winner.\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} winnerPubkey\n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  const tx = await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPDA,\n      winner: winnerPubkey,\n      house: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .transaction();\n\n  await sendAndConfirm(tx, provider);\n}\n"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,SAAS,EAAEC,aAAa,QAAQ,iBAAiB;AAC1D,OAAOC,GAAG,MAAM,6BAA6B;AAC7C,SAASC,WAAW,QAAQ,UAAU;AAEtC,MAAMC,UAAU,GAAG,IAAIJ,SAAS,CAACE,GAAG,CAACG,OAAO,CAAC;AAC7C,MAAMC,kBAAkB,GAAG,MAAO,CAAC,CAAC;;AAEpC;AACA;AACA;AACA,eAAeC,cAAcA,CAACC,WAAW,EAAEC,QAAQ,EAAE;EACnD;EACA,MAAMC,MAAM,GAAG,MAAMD,QAAQ,CAACE,MAAM,CAACC,eAAe,CAACJ,WAAW,CAAC;EACjE,MAAMK,GAAG,GAAGH,MAAM,CAACI,SAAS,CAAC,CAAC;;EAE9B;EACA,MAAMC,GAAG,GAAG,MAAMN,QAAQ,CAACO,UAAU,CAACC,kBAAkB,CAACJ,GAAG,EAAE;IAC5DK,aAAa,EAAE,KAAK;IACpBC,mBAAmB,EAAE;EACvB,CAAC,CAAC;;EAEF;EACA,MAAMV,QAAQ,CAACO,UAAU,CAACI,kBAAkB,CAACL,GAAG,EAAE,WAAW,EAAET,kBAAkB,CAAC;EAClF,OAAOS,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeM,gBAAgBA,CAACC,aAAa,EAAE;EACpD,MAAMb,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMoB,OAAO,GAAG,IAAIxB,MAAM,CAACyB,OAAO,CAACtB,GAAG,EAAEE,UAAU,EAAEK,QAAQ,CAAC;EAE7D,MAAMgB,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;EAC7C,MAAM,CAACC,SAAS,CAAC,GAAG,MAAM7B,SAAS,CAAC8B,kBAAkB,CACpD,CACEC,MAAM,CAACC,IAAI,CAAC,QAAQ,CAAC,EACrBvB,QAAQ,CAACE,MAAM,CAACsB,SAAS,CAACC,QAAQ,CAAC,CAAC,EACpC,IAAInC,MAAM,CAACoC,EAAE,CAACV,KAAK,CAAC,CAACW,WAAW,CAACL,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAClD,EACDR,OAAO,CAACc,SACV,CAAC;;EAED;EACA,MAAMC,EAAE,GAAG,MAAMf,OAAO,CAACgB,OAAO,CAC7BC,UAAU,CAAC,IAAIzC,MAAM,CAACoC,EAAE,CAACb,aAAa,CAAC,EAAE,IAAIvB,MAAM,CAACoC,EAAE,CAACV,KAAK,CAAC,CAAC,CAC9DgB,QAAQ,CAAC;IACRC,MAAM,EAAEb,SAAS;IACjBc,OAAO,EAAElC,QAAQ,CAACE,MAAM,CAACsB,SAAS;IAClCW,SAAS,EAAEnC,QAAQ,CAACE,MAAM,CAACsB,SAAS;IACpCY,aAAa,EAAE5C,aAAa,CAACoC;EAC/B,CAAC,CAAC,CACD7B,WAAW,CAAC,CAAC;EAEhB,MAAMD,cAAc,CAAC+B,EAAE,EAAE7B,QAAQ,CAAC;EAClC,OAAOoB,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAeiB,cAAcA,CAACjB,SAAS,EAAE;EAC9C,MAAMpB,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMoB,OAAO,GAAG,IAAIxB,MAAM,CAACyB,OAAO,CAACtB,GAAG,EAAEE,UAAU,EAAEK,QAAQ,CAAC;EAE7D,MAAMsC,aAAa,GAAG,MAAMxB,OAAO,CAACyB,OAAO,CAACN,MAAM,CAACO,KAAK,CAACpB,SAAS,CAAC;EAEnE,MAAMS,EAAE,GAAG,MAAMf,OAAO,CAACgB,OAAO,CAC7BO,cAAc,CAAC,CAAC,CAChBL,QAAQ,CAAC;IACRC,MAAM,EAAEb,SAAS;IACjBqB,OAAO,EAAEzC,QAAQ,CAACE,MAAM,CAACsB,SAAS;IAClCc,aAAa,EAAEA,aAAa,CAACA,aAAa;IAC1CF,aAAa,EAAE5C,aAAa,CAACoC;EAC/B,CAAC,CAAC,CACD7B,WAAW,CAAC,CAAC;EAEhB,MAAMD,cAAc,CAAC+B,EAAE,EAAE7B,QAAQ,CAAC;AACpC;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAe0C,eAAeA,CAACtB,SAAS,EAAE;EAC/C,MAAMpB,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMoB,OAAO,GAAG,IAAIxB,MAAM,CAACyB,OAAO,CAACtB,GAAG,EAAEE,UAAU,EAAEK,QAAQ,CAAC;EAE7D,MAAMsC,aAAa,GAAG,MAAMxB,OAAO,CAACyB,OAAO,CAACN,MAAM,CAACO,KAAK,CAACpB,SAAS,CAAC;EAEnE,MAAMS,EAAE,GAAG,MAAMf,OAAO,CAACgB,OAAO,CAC7Ba,OAAO,CAAC,CAAC,CACTX,QAAQ,CAAC;IACRC,MAAM,EAAEb,SAAS;IACjBwB,KAAK,EAAE5C,QAAQ,CAACE,MAAM,CAACsB,SAAS;IAChCc,aAAa,EAAEA,aAAa,CAACA,aAAa;IAC1CF,aAAa,EAAE5C,aAAa,CAACoC;EAC/B,CAAC,CAAC,CACD7B,WAAW,CAAC,CAAC;EAEhB,MAAMD,cAAc,CAAC+B,EAAE,EAAE7B,QAAQ,CAAC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAe6C,YAAYA,CAACzB,SAAS,EAAE0B,aAAa,EAAEC,aAAa,EAAE;EAC1E,MAAM/C,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMoB,OAAO,GAAG,IAAIxB,MAAM,CAACyB,OAAO,CAACtB,GAAG,EAAEE,UAAU,EAAEK,QAAQ,CAAC;EAE7D,MAAMsC,aAAa,GAAG,MAAMxB,OAAO,CAACyB,OAAO,CAACN,MAAM,CAACO,KAAK,CAACpB,SAAS,CAAC;EAEnE,MAAMS,EAAE,GAAG,MAAMf,OAAO,CAACgB,OAAO,CAC7BkB,MAAM,CAAC,CAAC,CACRhB,QAAQ,CAAC;IACRC,MAAM,EAAEb,SAAS;IACjBc,OAAO,EAAEY,aAAa;IACtBL,OAAO,EAAEM,aAAa;IACtBT,aAAa,EAAEA,aAAa,CAACA,aAAa;IAC1CH,SAAS,EAAEnC,QAAQ,CAACE,MAAM,CAACsB;EAC7B,CAAC,CAAC,CACDzB,WAAW,CAAC,CAAC;EAEhB,MAAMD,cAAc,CAAC+B,EAAE,EAAE7B,QAAQ,CAAC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeiD,aAAaA,CAAC7B,SAAS,EAAE8B,YAAY,EAAE;EAC3D,MAAMlD,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMoB,OAAO,GAAG,IAAIxB,MAAM,CAACyB,OAAO,CAACtB,GAAG,EAAEE,UAAU,EAAEK,QAAQ,CAAC;EAE7D,MAAMsC,aAAa,GAAG,MAAMxB,OAAO,CAACyB,OAAO,CAACN,MAAM,CAACO,KAAK,CAACpB,SAAS,CAAC;EAEnE,MAAMS,EAAE,GAAG,MAAMf,OAAO,CAACgB,OAAO,CAC7BqB,OAAO,CAACD,YAAY,CAAC,CACrBlB,QAAQ,CAAC;IACRC,MAAM,EAAEb,SAAS;IACjBgC,MAAM,EAAEF,YAAY;IACpBG,KAAK,EAAErD,QAAQ,CAACE,MAAM,CAACsB,SAAS;IAChCc,aAAa,EAAEA,aAAa,CAACA,aAAa;IAC1CH,SAAS,EAAEnC,QAAQ,CAACE,MAAM,CAACsB;EAC7B,CAAC,CAAC,CACDzB,WAAW,CAAC,CAAC;EAEhB,MAAMD,cAAc,CAAC+B,EAAE,EAAE7B,QAAQ,CAAC;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}