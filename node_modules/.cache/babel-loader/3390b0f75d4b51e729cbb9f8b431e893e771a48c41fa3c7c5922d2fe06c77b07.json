{"ast":null,"code":"var _idl$metadata;\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\nconsole.log(\"IDL address:\", idl.address);\nconsole.log(\"IDL metadata.address:\", (_idl$metadata = idl.metadata) === null || _idl$metadata === void 0 ? void 0 : _idl$metadata.address);\nconst PROGRAM_ID = new PublicKey(idl.metadata.address || idl.address);\n\n/**\n * Initialize a new escrow\n * @param {number} wagerLamports amount in lamports\n * @returns {PublicKey} PDA of escrow\n */\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const nonce = Math.floor(Math.random() * 1000000); // you can customize nonce logic\n\n  const [escrowPDA] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], program.programId);\n  await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPDA,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).rpc();\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one transaction\n * @param {PublicKey} escrowPDA\n */\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPDA,\n    player2: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).rpc();\n}\n\n/**\n * Deposit to escrow\n * @param {PublicKey} escrowPDA\n */\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.deposit().accounts({\n    escrow: escrowPDA,\n    payer: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).rpc();\n}\n\n/**\n * Cancel an escrow\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} player1Pubkey\n * @param {PublicKey} player2Pubkey\n */\nexport async function cancelEscrow(escrowPDA, player1Pubkey, player2Pubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.cancel().accounts({\n    escrow: escrowPDA,\n    player1: player1Pubkey,\n    player2: player2Pubkey,\n    escrowAccount: escrowAccount.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).rpc();\n}\n\n/**\n * Resolve escrow by specifying the winner\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} winnerPubkey\n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPDA,\n    winner: winnerPubkey,\n    house: provider.wallet.publicKey,\n    escrowAccount: escrowAccount.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).rpc();\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","getProvider","console","log","address","_idl$metadata","metadata","PROGRAM_ID","initializeEscrow","wagerLamports","provider","program","Program","nonce","Math","floor","random","escrowPDA","findProgramAddress","Buffer","from","wallet","publicKey","toBuffer","BN","toArrayLike","programId","methods","initialize","accounts","escrow","player1","authority","systemProgram","rpc","joinAndDeposit","escrowAccount","account","fetch","player2","depositToEscrow","deposit","payer","cancelEscrow","player1Pubkey","player2Pubkey","cancel","resolveEscrow","winnerPubkey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\nconsole.log(\"IDL address:\", idl.address);\nconsole.log(\"IDL metadata.address:\", idl.metadata?.address);\n\nconst PROGRAM_ID = new PublicKey(idl.metadata.address || idl.address);\n\n/**\n * Initialize a new escrow\n * @param {number} wagerLamports amount in lamports\n * @returns {PublicKey} PDA of escrow\n */\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const nonce = Math.floor(Math.random() * 1000000); // you can customize nonce logic\n\n  const [escrowPDA] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      provider.wallet.publicKey.toBuffer(),\n      new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPDA,\n      player1: provider.wallet.publicKey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc();\n\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one transaction\n * @param {PublicKey} escrowPDA\n */\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPDA,\n      player2: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc();\n}\n\n/**\n * Deposit to escrow\n * @param {PublicKey} escrowPDA\n */\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPDA,\n      payer: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc();\n}\n\n/**\n * Cancel an escrow\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} player1Pubkey\n * @param {PublicKey} player2Pubkey\n */\nexport async function cancelEscrow(escrowPDA, player1Pubkey, player2Pubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPDA,\n      player1: player1Pubkey,\n      player2: player2Pubkey,\n      escrowAccount: escrowAccount.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .rpc();\n}\n\n/**\n * Resolve escrow by specifying the winner\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} winnerPubkey\n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const escrowAccount = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPDA,\n      winner: winnerPubkey,\n      house: provider.wallet.publicKey,\n      escrowAccount: escrowAccount.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .rpc();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}