{"ast":null,"code":"import * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\nconst PROGRAM_ID = new PublicKey(idl.address);\n\n/**\n * Initialize a new escrow *optimistically*:\n * 1) Build the Anchor tx\n * 2) Ask Phantom to sign & send it\n * 3) Immediately return the PDA so your UI can move on\n * 4) In the background, confirm on‐chain and log any error\n */\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  // generate a fresh nonce\n  const nonce = Math.floor(Math.random() * 1000000);\n  const [escrowPDA] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], program.programId);\n\n  // build—but don’t send yet—the transaction\n  const tx = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPDA,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).transaction();\n\n  // have Phantom sign & dispatch it\n  const signature = await provider.sendTransaction(tx, provider.connection);\n\n  // immediately return the PDA so your App can proceed\n  provider.connection.confirmTransaction(signature, \"confirmed\").catch(err => {\n    console.error(\"On‑chain initialize failed:\", err);\n    // you can surface a “oops” notice here if desired\n  });\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one go.\n * @param {PublicKey} escrowPDA\n */\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const accountData = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPDA,\n    player2: provider.wallet.publicKey,\n    escrowAccount: accountData.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).rpc();\n}\n\n/**\n * Just deposit to an existing escrow.\n * @param {PublicKey} escrowPDA\n */\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const accountData = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.deposit().accounts({\n    escrow: escrowPDA,\n    payer: provider.wallet.publicKey,\n    escrowAccount: accountData.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).rpc();\n}\n\n/**\n * Cancel a match and refund both sides.\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} player1Pubkey\n * @param {PublicKey} player2Pubkey\n */\nexport async function cancelEscrow(escrowPDA, player1Pubkey, player2Pubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const accountData = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.cancel().accounts({\n    escrow: escrowPDA,\n    player1: player1Pubkey,\n    player2: player2Pubkey,\n    escrowAccount: accountData.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).rpc();\n}\n\n/**\n * Resolve a finished match: send all funds to winner.\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} winnerPubkey\n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const accountData = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPDA,\n    winner: winnerPubkey,\n    house: provider.wallet.publicKey,\n    escrowAccount: accountData.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).rpc();\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","getProvider","PROGRAM_ID","address","initializeEscrow","wagerLamports","provider","program","Program","nonce","Math","floor","random","escrowPDA","findProgramAddress","Buffer","from","wallet","publicKey","toBuffer","BN","toArrayLike","programId","tx","methods","initialize","accounts","escrow","player1","authority","systemProgram","transaction","signature","sendTransaction","connection","confirmTransaction","catch","err","console","error","joinAndDeposit","accountData","account","fetch","player2","escrowAccount","rpc","depositToEscrow","deposit","payer","cancelEscrow","player1Pubkey","player2Pubkey","cancel","resolveEscrow","winnerPubkey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\n\nconst PROGRAM_ID = new PublicKey(idl.address);\n\n/**\n * Initialize a new escrow *optimistically*:\n * 1) Build the Anchor tx\n * 2) Ask Phantom to sign & send it\n * 3) Immediately return the PDA so your UI can move on\n * 4) In the background, confirm on‐chain and log any error\n */\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  // generate a fresh nonce\n  const nonce = Math.floor(Math.random() * 1_000_000);\n  const [escrowPDA] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      provider.wallet.publicKey.toBuffer(),\n      new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  // build—but don’t send yet—the transaction\n  const tx = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPDA,\n      player1: provider.wallet.publicKey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n\n  // have Phantom sign & dispatch it\n  const signature = await provider.sendTransaction(tx, provider.connection);\n\n  // immediately return the PDA so your App can proceed\n  provider.connection\n    .confirmTransaction(signature, \"confirmed\")\n    .catch((err) => {\n      console.error(\"On‑chain initialize failed:\", err);\n      // you can surface a “oops” notice here if desired\n    });\n\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one go.\n * @param {PublicKey} escrowPDA\n */\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const accountData = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPDA,\n      player2: provider.wallet.publicKey,\n      escrowAccount: accountData.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc();\n}\n\n/**\n * Just deposit to an existing escrow.\n * @param {PublicKey} escrowPDA\n */\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const accountData = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPDA,\n      payer: provider.wallet.publicKey,\n      escrowAccount: accountData.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc();\n}\n\n/**\n * Cancel a match and refund both sides.\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} player1Pubkey\n * @param {PublicKey} player2Pubkey\n */\nexport async function cancelEscrow(\n  escrowPDA,\n  player1Pubkey,\n  player2Pubkey\n) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const accountData = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPDA,\n      player1: player1Pubkey,\n      player2: player2Pubkey,\n      escrowAccount: accountData.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .rpc();\n}\n\n/**\n * Resolve a finished match: send all funds to winner.\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} winnerPubkey\n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const accountData = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPDA,\n      winner: winnerPubkey,\n      house: provider.wallet.publicKey,\n      escrowAccount: accountData.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .rpc();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}