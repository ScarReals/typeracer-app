{"ast":null,"code":"// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/**\n * Lazily instantiate the Anchor Program using your injected provider.\n */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\"Provider not set: make sure you called setProvider(wallet) before using escrow.js\");\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Build the initialize & deposit instructions for a new escrow match\n */\nexport async function buildInitializeAndDepositIxns(lamports, initializerPubkey, nonce) {\n  const program = getProgram();\n\n  // Derive the escrow PDA\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), initializerPubkey.toBuffer(), Buffer.from(nonce.toString())], PROGRAM_ID);\n\n  // 1) initialize on-chain\n  const ixInit = await program.methods.initialize(new anchor.BN(nonce), new anchor.BN(lamports)).accounts({\n    escrow: escrowPda,\n    player1: initializerPubkey,\n    authority: initializerPubkey,\n    systemProgram: SystemProgram.programId // snake_case per your IDL\n  }).instruction();\n\n  // 2) deposit SOL\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports\n  });\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * Build instruction to join an existing escrow and deposit in one go\n */\nexport async function buildJoinAndDepositIxn(escrowPda, wager) {\n  const program = getProgram();\n  const ix = await program.methods.joinAndDeposit(new anchor.BN(wager)).accounts({\n    escrow: escrowPda,\n    player2: program.provider.wallet.publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\n\n/**\n * Build instruction to cancel an escrow\n */\nexport async function buildCancelIxn(escrowPda, initializerPubkey, accepterPubkey) {\n  const program = getProgram();\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1: initializerPubkey,\n    player2: accepterPubkey,\n    authority: initializerPubkey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\n\n/**\n * Build instruction to resolve (return payouts)\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const ix = await program.methods.resolve(new PublicKey(winnerPubkey)).accounts({\n    escrow: escrowPda,\n    winner: new PublicKey(winnerPubkey),\n    house: program.provider.wallet.publicKey,\n    escrowAccount: escrowPda\n  }).instruction();\n  return ix;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","TransactionInstruction","idl","PROGRAM_ID","getProvider","getProgram","provider","Error","Program","buildInitializeAndDepositIxns","lamports","initializerPubkey","nonce","program","escrowPda","findProgramAddress","Buffer","from","toBuffer","toString","ixInit","methods","initialize","BN","accounts","escrow","player1","authority","systemProgram","programId","instruction","ixDeposit","transfer","fromPubkey","toPubkey","buildJoinAndDepositIxn","wager","ix","joinAndDeposit","player2","wallet","publicKey","escrowAccount","buildCancelIxn","accepterPubkey","cancel","buildResolveIxn","winnerPubkey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/**\n * Lazily instantiate the Anchor Program using your injected provider.\n */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\n      \"Provider not set: make sure you called setProvider(wallet) before using escrow.js\"\n    );\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Build the initialize & deposit instructions for a new escrow match\n */\nexport async function buildInitializeAndDepositIxns(\n  lamports,\n  initializerPubkey,\n  nonce\n) {\n  const program = getProgram();\n\n  // Derive the escrow PDA\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      initializerPubkey.toBuffer(),\n      Buffer.from(nonce.toString()),\n    ],\n    PROGRAM_ID\n  );\n\n  // 1) initialize on-chain\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(nonce), new anchor.BN(lamports))\n    .accounts({\n      escrow: escrowPda,\n      player1: initializerPubkey,\n      authority: initializerPubkey,\n      systemProgram: SystemProgram.programId,    // snake_case per your IDL\n    })\n    .instruction();\n\n  // 2) deposit SOL\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports,\n  });\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * Build instruction to join an existing escrow and deposit in one go\n */\nexport async function buildJoinAndDepositIxn(escrowPda, wager) {\n  const program = getProgram();\n\n  const ix = await program.methods\n    .joinAndDeposit(new anchor.BN(wager))\n    .accounts({\n      escrow: escrowPda,\n      player2: program.provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return ix;\n}\n\n/**\n * Build instruction to cancel an escrow\n */\nexport async function buildCancelIxn(\n  escrowPda,\n  initializerPubkey,\n  accepterPubkey\n) {\n  const program = getProgram();\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1: initializerPubkey,\n      player2: accepterPubkey,\n      authority: initializerPubkey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return ix;\n}\n\n/**\n * Build instruction to resolve (return payouts)\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n\n  const ix = await program.methods\n    .resolve(new PublicKey(winnerPubkey))\n    .accounts({\n      escrow: escrowPda,\n      winner: new PublicKey(winnerPubkey),\n      house: program.provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n    })\n    .instruction();\n\n  return ix;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}