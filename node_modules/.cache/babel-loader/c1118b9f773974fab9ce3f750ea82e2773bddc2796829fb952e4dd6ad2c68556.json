{"ast":null,"code":"// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily get your Anchor Program (throws if provider not set) */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\"Provider not set: call setProvider(wallet) in App.jsx before using escrow.js\");\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Build the initialize & deposit instructions for a new escrow match\n * @param {number} lamports   Number of lamports to be wagered (u64 in Rust)\n * @param {PublicKey} initializerPubkey\n * @param {number} nonce\n */\nexport async function buildInitializeAndDepositIxns(lamports, initializerPubkey, nonce) {\n  const program = getProgram();\n\n  // derive PDA\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), initializerPubkey.toBuffer(), Buffer.from(nonce.toString())], PROGRAM_ID);\n\n  // 1) initialize on‑chain: (wager, nonce)\n  const ixInit = await program.methods.initialize(new anchor.BN(lamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: initializerPubkey,\n    authority: initializerPubkey,\n    system_program: SystemProgram.programId // ← snake_case\n  }).instruction();\n\n  // 2) deposit SOL into the PDA\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports\n  });\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * Build instruction to join & deposit in one go\n * @param {PublicKey} escrowPda\n * @param {number} wager      (u64)\n */\nexport async function buildJoinAndDepositIxn(escrowPda, wager) {\n  const program = getProgram();\n  const ix = await program.methods.joinAndDeposit(new anchor.BN(wager)).accounts({\n    escrow: escrowPda,\n    player2: program.provider.wallet.publicKey,\n    escrow_account: escrowPda,\n    system_program: SystemProgram.programId // ← snake_case\n  }).instruction();\n  return ix;\n}\n\n/**\n * Build instruction to cancel an escrow\n * @param {PublicKey} escrowPda\n * @param {PublicKey} initializerPubkey\n * @param {PublicKey} accepterPubkey\n */\nexport async function buildCancelIxn(escrowPda, initializerPubkey, accepterPubkey) {\n  const program = getProgram();\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1: initializerPubkey,\n    player2: accepterPubkey,\n    authority: initializerPubkey,\n    escrow_account: escrowPda,\n    system_program: SystemProgram.programId // ← snake_case\n  }).instruction();\n  return ix;\n}\n\n/**\n * Build instruction to resolve (payout)\n * @param {PublicKey} escrowPda\n * @param {PublicKey | string} winnerPubkey\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const winnerKey = typeof winnerPubkey === \"string\" ? new PublicKey(winnerPubkey) : winnerPubkey;\n  const ix = await program.methods.resolve(winnerKey).accounts({\n    escrow: escrowPda,\n    winner: winnerKey,\n    house: program.provider.wallet.publicKey,\n    escrow_account: escrowPda\n  }).instruction();\n  return ix;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","getProvider","getProgram","provider","Error","Program","buildInitializeAndDepositIxns","lamports","initializerPubkey","nonce","program","escrowPda","findProgramAddress","Buffer","from","toBuffer","toString","ixInit","methods","initialize","BN","accounts","escrow","player1","authority","system_program","programId","instruction","ixDeposit","transfer","fromPubkey","toPubkey","buildJoinAndDepositIxn","wager","ix","joinAndDeposit","player2","wallet","publicKey","escrow_account","buildCancelIxn","accepterPubkey","cancel","buildResolveIxn","winnerPubkey","winnerKey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily get your Anchor Program (throws if provider not set) */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\n      \"Provider not set: call setProvider(wallet) in App.jsx before using escrow.js\"\n    );\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Build the initialize & deposit instructions for a new escrow match\n * @param {number} lamports   Number of lamports to be wagered (u64 in Rust)\n * @param {PublicKey} initializerPubkey\n * @param {number} nonce\n */\nexport async function buildInitializeAndDepositIxns(\n  lamports,\n  initializerPubkey,\n  nonce\n) {\n  const program = getProgram();\n\n  // derive PDA\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      initializerPubkey.toBuffer(),\n      Buffer.from(nonce.toString()),\n    ],\n    PROGRAM_ID\n  );\n\n  // 1) initialize on‑chain: (wager, nonce)\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(lamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,\n      player1: initializerPubkey,\n      authority: initializerPubkey,\n      system_program: SystemProgram.programId,   // ← snake_case\n    })\n    .instruction();\n\n  // 2) deposit SOL into the PDA\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports,\n  });\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * Build instruction to join & deposit in one go\n * @param {PublicKey} escrowPda\n * @param {number} wager      (u64)\n */\nexport async function buildJoinAndDepositIxn(escrowPda, wager) {\n  const program = getProgram();\n\n  const ix = await program.methods\n    .joinAndDeposit(new anchor.BN(wager))\n    .accounts({\n      escrow: escrowPda,\n      player2: program.provider.wallet.publicKey,\n      escrow_account: escrowPda,\n      system_program: SystemProgram.programId,   // ← snake_case\n    })\n    .instruction();\n\n  return ix;\n}\n\n/**\n * Build instruction to cancel an escrow\n * @param {PublicKey} escrowPda\n * @param {PublicKey} initializerPubkey\n * @param {PublicKey} accepterPubkey\n */\nexport async function buildCancelIxn(\n  escrowPda,\n  initializerPubkey,\n  accepterPubkey\n) {\n  const program = getProgram();\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1: initializerPubkey,\n      player2: accepterPubkey,\n      authority: initializerPubkey,\n      escrow_account: escrowPda,\n      system_program: SystemProgram.programId,   // ← snake_case\n    })\n    .instruction();\n\n  return ix;\n}\n\n/**\n * Build instruction to resolve (payout)\n * @param {PublicKey} escrowPda\n * @param {PublicKey | string} winnerPubkey\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const winnerKey = typeof winnerPubkey === \"string\"\n    ? new PublicKey(winnerPubkey)\n    : winnerPubkey;\n\n  const ix = await program.methods\n    .resolve(winnerKey)\n    .accounts({\n      escrow: escrowPda,\n      winner: winnerKey,\n      house: program.provider.wallet.publicKey,\n      escrow_account: escrowPda,\n    })\n    .instruction();\n\n  return ix;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}