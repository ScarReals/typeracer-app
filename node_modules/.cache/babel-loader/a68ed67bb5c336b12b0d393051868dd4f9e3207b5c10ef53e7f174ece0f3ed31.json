{"ast":null,"code":"import * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID } from \"./solana\";\n\n// Always use the currently connected provider (wallet)\nfunction getProvider() {\n  return anchor.getProvider();\n}\nfunction getProgram() {\n  return new anchor.Program(idl, PROGRAM_ID, getProvider());\n}\nexport async function buildInitializeAndDepositIxns(wagerLamports, player1, nonce) {\n  const program = getProgram();\n  const escrowPda = (await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), player1.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], PROGRAM_ID))[0];\n  const ixInit = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: player1,\n    authority: player1,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: player1,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const program = getProgram();\n  const provider = getProvider();\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: provider.wallet.publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\nexport async function buildCancelIxn(escrowPda, player1, player2) {\n  const program = getProgram();\n  const provider = getProvider();\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrowAccount: escrowPda,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  return ix;\n}\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const provider = getProvider();\n  const winnerKey = new PublicKey(winnerPubkey);\n  const ix = await program.methods.resolve(winnerKey).accounts({\n    escrow: escrowPda,\n    winner: winnerKey,\n    house: provider.wallet.publicKey,\n    escrowAccount: escrowPda\n  }).instruction();\n  return ix;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","getProvider","getProgram","Program","buildInitializeAndDepositIxns","wagerLamports","player1","nonce","program","escrowPda","findProgramAddress","Buffer","from","toBuffer","BN","toArrayLike","ixInit","methods","initialize","accounts","escrow","authority","systemProgram","programId","instruction","ixDeposit","deposit","payer","escrowAccount","buildJoinAndDepositIxn","provider","ix","joinAndDeposit","player2","wallet","publicKey","buildCancelIxn","cancel","buildResolveIxn","winnerPubkey","winnerKey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID } from \"./solana\";\n\n// Always use the currently connected provider (wallet)\nfunction getProvider() {\n  return anchor.getProvider();\n}\nfunction getProgram() {\n  return new anchor.Program(idl, PROGRAM_ID, getProvider());\n}\n\nexport async function buildInitializeAndDepositIxns(wagerLamports, player1, nonce) {\n  const program = getProgram();\n  const escrowPda = (\n    await PublicKey.findProgramAddress(\n      [Buffer.from(\"escrow\"), player1.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)],\n      PROGRAM_ID\n    )\n  )[0];\n\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,\n      player1: player1,\n      authority: player1,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: player1,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const program = getProgram();\n  const provider = getProvider();\n\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  return ix;\n}\n\nexport async function buildCancelIxn(escrowPda, player1, player2) {\n  const program = getProgram();\n  const provider = getProvider();\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: escrowPda,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n  return ix;\n}\n\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const provider = getProvider();\n\n  const winnerKey = new PublicKey(winnerPubkey);\n\n  const ix = await program.methods\n    .resolve(winnerKey)\n    .accounts({\n      escrow: escrowPda,\n      winner: winnerKey,\n      house: provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n    })\n    .instruction();\n  return ix;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}