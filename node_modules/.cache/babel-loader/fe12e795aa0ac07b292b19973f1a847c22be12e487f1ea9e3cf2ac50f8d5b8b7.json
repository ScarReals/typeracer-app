{"ast":null,"code":"// frontend/src/solana.js\n\nimport * as anchor from \"@coral-xyz/anchor\"; // ← ensure this import is here\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// ── RPC endpoint ──────────────────────────────────────────────────────────────\nconst RPC_URL = process.env.REACT_APP_SOLANA_RPC;\nif (!RPC_URL) {\n  throw new Error(\"Missing REACT_APP_SOLANA_RPC in your .env\");\n}\n\n// export a shared connection\nexport const connection = new Connection(RPC_URL, \"confirmed\");\n\n// ── Program ID ────────────────────────────────────────────────────────────────\nif (!idl.metadata || !idl.metadata.address) {\n  throw new Error(\"IDL is missing `metadata.address` field\");\n}\nexport const PROGRAM_ID = new PublicKey(idl.metadata.address);\n\n// ── Anchor provider holder ───────────────────────────────────────────────────\nlet _provider = null;\n\n/**\n * Sets the Anchor provider for all `escrow.js` calls.\n * Must be called from App.jsx after wallet connects.\n */\nexport function setProvider(wallet) {\n  _provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\"\n  });\n}\n\n/** Returns the Anchor provider (or null if not set yet) */\nexport function getProvider() {\n  return _provider;\n}","map":{"version":3,"names":["anchor","Connection","PublicKey","idl","RPC_URL","process","env","REACT_APP_SOLANA_RPC","Error","connection","metadata","address","PROGRAM_ID","_provider","setProvider","wallet","AnchorProvider","preflightCommitment","commitment","getProvider"],"sources":["/home/kokoi/sol-wager-app/frontend/src/solana.js"],"sourcesContent":["// frontend/src/solana.js\n\nimport * as anchor from \"@coral-xyz/anchor\";        // ← ensure this import is here\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// ── RPC endpoint ──────────────────────────────────────────────────────────────\nconst RPC_URL = process.env.REACT_APP_SOLANA_RPC;\nif (!RPC_URL) {\n  throw new Error(\"Missing REACT_APP_SOLANA_RPC in your .env\");\n}\n\n// export a shared connection\nexport const connection = new Connection(RPC_URL, \"confirmed\");\n\n// ── Program ID ────────────────────────────────────────────────────────────────\nif (!idl.metadata || !idl.metadata.address) {\n  throw new Error(\"IDL is missing `metadata.address` field\");\n}\nexport const PROGRAM_ID = new PublicKey(idl.metadata.address);\n\n// ── Anchor provider holder ───────────────────────────────────────────────────\nlet _provider = null;\n\n/**\n * Sets the Anchor provider for all `escrow.js` calls.\n * Must be called from App.jsx after wallet connects.\n */\nexport function setProvider(wallet) {\n  _provider = new anchor.AnchorProvider(connection, wallet, {\n    preflightCommitment: \"confirmed\",\n    commitment: \"confirmed\",\n  });\n}\n\n/** Returns the Anchor provider (or null if not set yet) */\nexport function getProvider() {\n  return _provider;\n}\n"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,MAAM,MAAM,mBAAmB,CAAC,CAAQ;AACpD,SAASC,UAAU,EAAEC,SAAS,QAAQ,iBAAiB;AACvD,OAAOC,GAAG,MAAM,6BAA6B;;AAE7C;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB;AAChD,IAAI,CAACH,OAAO,EAAE;EACZ,MAAM,IAAII,KAAK,CAAC,2CAA2C,CAAC;AAC9D;;AAEA;AACA,OAAO,MAAMC,UAAU,GAAG,IAAIR,UAAU,CAACG,OAAO,EAAE,WAAW,CAAC;;AAE9D;AACA,IAAI,CAACD,GAAG,CAACO,QAAQ,IAAI,CAACP,GAAG,CAACO,QAAQ,CAACC,OAAO,EAAE;EAC1C,MAAM,IAAIH,KAAK,CAAC,yCAAyC,CAAC;AAC5D;AACA,OAAO,MAAMI,UAAU,GAAG,IAAIV,SAAS,CAACC,GAAG,CAACO,QAAQ,CAACC,OAAO,CAAC;;AAE7D;AACA,IAAIE,SAAS,GAAG,IAAI;;AAEpB;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAE;EAClCF,SAAS,GAAG,IAAIb,MAAM,CAACgB,cAAc,CAACP,UAAU,EAAEM,MAAM,EAAE;IACxDE,mBAAmB,EAAE,WAAW;IAChCC,UAAU,EAAE;EACd,CAAC,CAAC;AACJ;;AAEA;AACA,OAAO,SAASC,WAAWA,CAAA,EAAG;EAC5B,OAAON,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}