{"ast":null,"code":"// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily grab your Anchor Program (throws if no provider) */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\"Provider not set: call setProvider(wallet) in App.jsx before using escrow.js\");\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * 1) Initialize + deposit\n * @param {number} lamports\n * @param {PublicKey} initializerPubkey\n * @param {number} nonce\n */\nexport async function buildInitializeAndDepositIxns(lamports, initializerPubkey, nonce) {\n  const program = getProgram();\n\n  // ── pack nonce as 8‑byte LE\n  const nonceBuf = Buffer.from(new anchor.BN(nonce).toArray(\"le\", 8));\n\n  // ── derive PDA\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), initializerPubkey.toBuffer(), nonceBuf], PROGRAM_ID);\n\n  // ── initialize RPC call\n  const ixInit = await program.methods.initialize(new anchor.BN(lamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: initializerPubkey,\n    authority: initializerPubkey,\n    system_program: SystemProgram.programId\n  }).instruction();\n\n  // ── deposit SOL\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports\n  });\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * 2) Join & deposit in one go\n * @param {PublicKey} escrowPda\n */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const program = getProgram();\n  return program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: program.provider.wallet.publicKey,\n    escrow_account: escrowPda,\n    system_program: SystemProgram.programId\n  }).instruction();\n}\n\n/**\n * 3) Cancel an existing escrow\n * @param {PublicKey} escrowPda\n * @param {PublicKey} initializerPubkey\n * @param {PublicKey} accepterPubkey\n */\nexport async function buildCancelIxn(escrowPda, initializerPubkey, accepterPubkey) {\n  const program = getProgram();\n  return program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1: initializerPubkey,\n    player2: accepterPubkey,\n    authority: initializerPubkey,\n    escrow_account: escrowPda,\n    system_program: SystemProgram.programId\n  }).instruction();\n}\n\n/**\n * 4) Resolve (payout)\n * @param {PublicKey} escrowPda\n * @param {PublicKey | string} winnerPubkey\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const winnerKey = typeof winnerPubkey === \"string\" ? new PublicKey(winnerPubkey) : winnerPubkey;\n  return program.methods.resolve(winnerKey).accounts({\n    escrow: escrowPda,\n    winner: winnerKey,\n    house: program.provider.wallet.publicKey,\n    escrow_account: escrowPda\n  }).instruction();\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","getProvider","getProgram","provider","Error","Program","buildInitializeAndDepositIxns","lamports","initializerPubkey","nonce","program","nonceBuf","Buffer","from","BN","toArray","escrowPda","findProgramAddress","toBuffer","ixInit","methods","initialize","accounts","escrow","player1","authority","system_program","programId","instruction","ixDeposit","transfer","fromPubkey","toPubkey","buildJoinAndDepositIxn","joinAndDeposit","player2","wallet","publicKey","escrow_account","buildCancelIxn","accepterPubkey","cancel","buildResolveIxn","winnerPubkey","winnerKey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily grab your Anchor Program (throws if no provider) */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\n      \"Provider not set: call setProvider(wallet) in App.jsx before using escrow.js\"\n    );\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * 1) Initialize + deposit\n * @param {number} lamports\n * @param {PublicKey} initializerPubkey\n * @param {number} nonce\n */\nexport async function buildInitializeAndDepositIxns(\n  lamports,\n  initializerPubkey,\n  nonce\n) {\n  const program = getProgram();\n\n  // ── pack nonce as 8‑byte LE\n  const nonceBuf = Buffer.from(new anchor.BN(nonce).toArray(\"le\", 8));\n\n  // ── derive PDA\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      initializerPubkey.toBuffer(),\n      nonceBuf,\n    ],\n    PROGRAM_ID\n  );\n\n  // ── initialize RPC call\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(lamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,\n      player1: initializerPubkey,\n      authority: initializerPubkey,\n      system_program: SystemProgram.programId,\n    })\n    .instruction();\n\n  // ── deposit SOL\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports,\n  });\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * 2) Join & deposit in one go\n * @param {PublicKey} escrowPda\n */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const program = getProgram();\n  return program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: program.provider.wallet.publicKey,\n      escrow_account: escrowPda,\n      system_program: SystemProgram.programId,\n    })\n    .instruction();\n}\n\n/**\n * 3) Cancel an existing escrow\n * @param {PublicKey} escrowPda\n * @param {PublicKey} initializerPubkey\n * @param {PublicKey} accepterPubkey\n */\nexport async function buildCancelIxn(\n  escrowPda,\n  initializerPubkey,\n  accepterPubkey\n) {\n  const program = getProgram();\n  return program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1: initializerPubkey,\n      player2: accepterPubkey,\n      authority: initializerPubkey,\n      escrow_account: escrowPda,\n      system_program: SystemProgram.programId,\n    })\n    .instruction();\n}\n\n/**\n * 4) Resolve (payout)\n * @param {PublicKey} escrowPda\n * @param {PublicKey | string} winnerPubkey\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const winnerKey =\n    typeof winnerPubkey === \"string\"\n      ? new PublicKey(winnerPubkey)\n      : winnerPubkey;\n\n  return program.methods\n    .resolve(winnerKey)\n    .accounts({\n      escrow: escrowPda,\n      winner: winnerKey,\n      house: program.provider.wallet.publicKey,\n      escrow_account: escrowPda,\n    })\n    .instruction();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}