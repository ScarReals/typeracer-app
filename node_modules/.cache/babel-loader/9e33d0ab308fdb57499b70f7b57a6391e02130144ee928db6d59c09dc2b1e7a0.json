{"ast":null,"code":"// src/escrow.js\n\nimport { Program, getProvider, BN } from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Program ID from your IDL\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\n/**\n * Helper to grab the Anchor Program with the current provider.\n */\nfunction getProgram() {\n  return new Program(idl, PROGRAM_ID, getProvider());\n}\n\n/**\n * Build initialize + deposit instructions.\n *\n * @param {number} wagerLamports - Amount in lamports to wager.\n * @param {PublicKey} publicKey - Player 1’s public key.\n * @param {number} nonce - Unique nonce for the PDA.\n * @returns {Promise<{ ixInit: TransactionInstruction, ixDeposit: TransactionInstruction, escrowPda: PublicKey }>}\n */\nexport async function buildInitializeAndDepositIxns(wagerLamports, publicKey, nonce) {\n  const nonceBN = new BN(nonce);\n  const wagerBN = new BN(wagerLamports);\n\n  // Derive the PDA\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), publicKey.toBuffer(), nonceBN.toArrayLike(Buffer, \"le\", 8)], PROGRAM_ID);\n  const program = getProgram();\n\n  // initialize instruction\n  const ixInit = await program.methods.initialize(wagerBN, nonceBN).accounts({\n    escrow: escrowPda,\n    player1: publicKey,\n    authority: publicKey,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n\n  // deposit instruction\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * Build join & deposit instruction.\n *\n * @param {PublicKey} escrowPda - The PDA of the escrow account.\n * @returns {Promise<TransactionInstruction>}\n */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const program = getProgram();\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: getProvider().wallet.publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\n\n/**\n * Build cancel instruction.\n *\n * @param {PublicKey} escrowPda - The PDA of the escrow account.\n * @param {PublicKey} player1 - Player1’s public key.\n * @param {PublicKey} player2 - Player2’s public key.\n * @returns {Promise<TransactionInstruction>}\n */\nexport async function buildCancelIxn(escrowPda, player1, player2) {\n  const program = getProgram();\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrowAccount: escrowPda,\n    authority: getProvider().wallet.publicKey\n  }).instruction();\n  return ix;\n}","map":{"version":3,"names":["Program","getProvider","BN","PublicKey","SystemProgram","idl","PROGRAM_ID","metadata","address","getProgram","buildInitializeAndDepositIxns","wagerLamports","publicKey","nonce","nonceBN","wagerBN","escrowPda","findProgramAddress","Buffer","from","toBuffer","toArrayLike","program","ixInit","methods","initialize","accounts","escrow","player1","authority","systemProgram","programId","instruction","ixDeposit","deposit","payer","escrowAccount","buildJoinAndDepositIxn","ix","joinAndDeposit","player2","wallet","buildCancelIxn","cancel"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\n\nimport { Program, getProvider, BN } from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Program ID from your IDL\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\n/**\n * Helper to grab the Anchor Program with the current provider.\n */\nfunction getProgram() {\n  return new Program(idl, PROGRAM_ID, getProvider());\n}\n\n/**\n * Build initialize + deposit instructions.\n *\n * @param {number} wagerLamports - Amount in lamports to wager.\n * @param {PublicKey} publicKey - Player 1’s public key.\n * @param {number} nonce - Unique nonce for the PDA.\n * @returns {Promise<{ ixInit: TransactionInstruction, ixDeposit: TransactionInstruction, escrowPda: PublicKey }>}\n */\nexport async function buildInitializeAndDepositIxns(\n  wagerLamports,\n  publicKey,\n  nonce\n) {\n  const nonceBN = new BN(nonce);\n  const wagerBN = new BN(wagerLamports);\n\n  // Derive the PDA\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      publicKey.toBuffer(),\n      nonceBN.toArrayLike(Buffer, \"le\", 8),\n    ],\n    PROGRAM_ID\n  );\n\n  const program = getProgram();\n\n  // initialize instruction\n  const ixInit = await program.methods\n    .initialize(wagerBN, nonceBN)\n    .accounts({\n      escrow: escrowPda,\n      player1: publicKey,\n      authority: publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  // deposit instruction\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * Build join & deposit instruction.\n *\n * @param {PublicKey} escrowPda - The PDA of the escrow account.\n * @returns {Promise<TransactionInstruction>}\n */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const program = getProgram();\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: getProvider().wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  return ix;\n}\n\n/**\n * Build cancel instruction.\n *\n * @param {PublicKey} escrowPda - The PDA of the escrow account.\n * @param {PublicKey} player1 - Player1’s public key.\n * @param {PublicKey} player2 - Player2’s public key.\n * @returns {Promise<TransactionInstruction>}\n */\nexport async function buildCancelIxn(\n  escrowPda,\n  player1,\n  player2\n) {\n  const program = getProgram();\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: escrowPda,\n      authority: getProvider().wallet.publicKey,\n    })\n    .instruction();\n  return ix;\n}\n"],"mappings":"AAAA;;AAEA,SAASA,OAAO,EAAEC,WAAW,EAAEC,EAAE,QAAQ,mBAAmB;AAC5D,SAASC,SAAS,EAAEC,aAAa,QAAQ,iBAAiB;AAC1D,OAAOC,GAAG,MAAM,6BAA6B;;AAE7C;AACA,MAAMC,UAAU,GAAG,IAAIH,SAAS,CAACE,GAAG,CAACE,QAAQ,CAACC,OAAO,CAAC;;AAEtD;AACA;AACA;AACA,SAASC,UAAUA,CAAA,EAAG;EACpB,OAAO,IAAIT,OAAO,CAACK,GAAG,EAAEC,UAAU,EAAEL,WAAW,CAAC,CAAC,CAAC;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeS,6BAA6BA,CACjDC,aAAa,EACbC,SAAS,EACTC,KAAK,EACL;EACA,MAAMC,OAAO,GAAG,IAAIZ,EAAE,CAACW,KAAK,CAAC;EAC7B,MAAME,OAAO,GAAG,IAAIb,EAAE,CAACS,aAAa,CAAC;;EAErC;EACA,MAAM,CAACK,SAAS,CAAC,GAAG,MAAMb,SAAS,CAACc,kBAAkB,CACpD,CACEC,MAAM,CAACC,IAAI,CAAC,QAAQ,CAAC,EACrBP,SAAS,CAACQ,QAAQ,CAAC,CAAC,EACpBN,OAAO,CAACO,WAAW,CAACH,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CACrC,EACDZ,UACF,CAAC;EAED,MAAMgB,OAAO,GAAGb,UAAU,CAAC,CAAC;;EAE5B;EACA,MAAMc,MAAM,GAAG,MAAMD,OAAO,CAACE,OAAO,CACjCC,UAAU,CAACV,OAAO,EAAED,OAAO,CAAC,CAC5BY,QAAQ,CAAC;IACRC,MAAM,EAAEX,SAAS;IACjBY,OAAO,EAAEhB,SAAS;IAClBiB,SAAS,EAAEjB,SAAS;IACpBkB,aAAa,EAAE1B,aAAa,CAAC2B;EAC/B,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;;EAEhB;EACA,MAAMC,SAAS,GAAG,MAAMX,OAAO,CAACE,OAAO,CACpCU,OAAO,CAAC,CAAC,CACTR,QAAQ,CAAC;IACRC,MAAM,EAAEX,SAAS;IACjBmB,KAAK,EAAEvB,SAAS;IAChBwB,aAAa,EAAEpB,SAAS;IACxBc,aAAa,EAAE1B,aAAa,CAAC2B;EAC/B,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;EAEhB,OAAO;IAAET,MAAM;IAAEU,SAAS;IAAEjB;EAAU,CAAC;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeqB,sBAAsBA,CAACrB,SAAS,EAAE;EACtD,MAAMM,OAAO,GAAGb,UAAU,CAAC,CAAC;EAC5B,MAAM6B,EAAE,GAAG,MAAMhB,OAAO,CAACE,OAAO,CAC7Be,cAAc,CAAC,CAAC,CAChBb,QAAQ,CAAC;IACRC,MAAM,EAAEX,SAAS;IACjBwB,OAAO,EAAEvC,WAAW,CAAC,CAAC,CAACwC,MAAM,CAAC7B,SAAS;IACvCwB,aAAa,EAAEpB,SAAS;IACxBc,aAAa,EAAE1B,aAAa,CAAC2B;EAC/B,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;EAChB,OAAOM,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeI,cAAcA,CAClC1B,SAAS,EACTY,OAAO,EACPY,OAAO,EACP;EACA,MAAMlB,OAAO,GAAGb,UAAU,CAAC,CAAC;EAC5B,MAAM6B,EAAE,GAAG,MAAMhB,OAAO,CAACE,OAAO,CAC7BmB,MAAM,CAAC,CAAC,CACRjB,QAAQ,CAAC;IACRC,MAAM,EAAEX,SAAS;IACjBY,OAAO;IACPY,OAAO;IACPJ,aAAa,EAAEpB,SAAS;IACxBa,SAAS,EAAE5B,WAAW,CAAC,CAAC,CAACwC,MAAM,CAAC7B;EAClC,CAAC,CAAC,CACDoB,WAAW,CAAC,CAAC;EAChB,OAAOM,EAAE;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}