{"ast":null,"code":"// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Program ID from the IDL (use idl.address, not metadata.address)\nconst PROGRAM_ID = new PublicKey(idl.address);\n\n/**\n * Internal helper: get a typed Anchor Program client.\n */\nfunction getProgram() {\n  const provider = anchor.getProvider();\n  if (!provider) {\n    throw new Error(\"Provider not set. Call setProvider in solana.js first.\");\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Build the Initialize + Deposit instructions.\n * Returns { ixInit, ixDeposit, escrowPda } for App.jsx to send in one TX.\n */\nexport async function buildInitializeAndDepositIxns(wagerLamports, player1Pubkey, nonce) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n\n  // Derive the PDA for escrow account\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), player1Pubkey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], program.programId);\n\n  // Instruction: initialize\n  const ixInit = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: player1Pubkey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n\n  // Instruction: deposit player1\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: player1Pubkey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * Build the JoinAndDeposit instruction for player2.\n */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  var _acct$escrowAccount;\n  const program = getProgram();\n  const provider = anchor.getProvider();\n\n  // Fetch on‑chain escrow account to get vault PDA\n  const acct = await program.account.escrow.fetch(escrowPda);\n  const vault = (_acct$escrowAccount = acct.escrowAccount) !== null && _acct$escrowAccount !== void 0 ? _acct$escrowAccount : escrowPda;\n\n  // Build join_and_deposit\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: provider.wallet.publicKey,\n    escrowAccount: vault,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\n\n/**\n * Build the Cancel instruction.\n */\nexport async function buildCancelIxn(escrowPda, player1Pubkey, player2Pubkey) {\n  var _acct$escrowAccount2;\n  const program = getProgram();\n  const provider = anchor.getProvider();\n\n  // Fetch vault PDA\n  const acct = await program.account.escrow.fetch(escrowPda);\n  const vault = (_acct$escrowAccount2 = acct.escrowAccount) !== null && _acct$escrowAccount2 !== void 0 ? _acct$escrowAccount2 : escrowPda;\n\n  // Build cancel\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1: player1Pubkey,\n    player2: player2Pubkey,\n    escrowAccount: vault,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  return ix;\n}\n\n/**\n * Build the Resolve instruction:\n * the house (provider.wallet) signs and authorizes payout.\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  var _acct$escrowAccount3;\n  const program = getProgram();\n  const provider = anchor.getProvider();\n\n  // Fetch vault PDA\n  const acct = await program.account.escrow.fetch(escrowPda);\n  const vault = (_acct$escrowAccount3 = acct.escrowAccount) !== null && _acct$escrowAccount3 !== void 0 ? _acct$escrowAccount3 : escrowPda;\n\n  // Build resolve\n  const ix = await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPda,\n    winner: winnerPubkey,\n    house: provider.wallet.publicKey,\n    escrowAccount: vault\n  }).signers([provider.wallet.payer]) // ensure the house keypair signs\n  .instruction();\n  return ix;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","address","getProgram","provider","getProvider","Error","Program","buildInitializeAndDepositIxns","wagerLamports","player1Pubkey","nonce","program","escrowPda","findProgramAddress","Buffer","from","toBuffer","BN","toArrayLike","programId","ixInit","methods","initialize","accounts","escrow","player1","authority","wallet","publicKey","systemProgram","instruction","ixDeposit","deposit","payer","escrowAccount","buildJoinAndDepositIxn","_acct$escrowAccount","acct","account","fetch","vault","ix","joinAndDeposit","player2","buildCancelIxn","player2Pubkey","_acct$escrowAccount2","cancel","buildResolveIxn","winnerPubkey","_acct$escrowAccount3","resolve","winner","house","signers"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Program ID from the IDL (use idl.address, not metadata.address)\nconst PROGRAM_ID = new PublicKey(idl.address);\n\n/**\n * Internal helper: get a typed Anchor Program client.\n */\nfunction getProgram() {\n  const provider = anchor.getProvider();\n  if (!provider) {\n    throw new Error(\"Provider not set. Call setProvider in solana.js first.\");\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * Build the Initialize + Deposit instructions.\n * Returns { ixInit, ixDeposit, escrowPda } for App.jsx to send in one TX.\n */\nexport async function buildInitializeAndDepositIxns(\n  wagerLamports,\n  player1Pubkey,\n  nonce\n) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n\n  // Derive the PDA for escrow account\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      player1Pubkey.toBuffer(),\n      new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  // Instruction: initialize\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,\n      player1: player1Pubkey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  // Instruction: deposit player1\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: player1Pubkey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * Build the JoinAndDeposit instruction for player2.\n */\nexport async function buildJoinAndDepositIxn(escrowPda) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n\n  // Fetch on‑chain escrow account to get vault PDA\n  const acct = await program.account.escrow.fetch(escrowPda);\n  const vault = acct.escrowAccount ?? escrowPda;\n\n  // Build join_and_deposit\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: provider.wallet.publicKey,\n      escrowAccount: vault,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return ix;\n}\n\n/**\n * Build the Cancel instruction.\n */\nexport async function buildCancelIxn(escrowPda, player1Pubkey, player2Pubkey) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n\n  // Fetch vault PDA\n  const acct = await program.account.escrow.fetch(escrowPda);\n  const vault = acct.escrowAccount ?? escrowPda;\n\n  // Build cancel\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1: player1Pubkey,\n      player2: player2Pubkey,\n      escrowAccount: vault,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n\n  return ix;\n}\n\n/**\n * Build the Resolve instruction:\n * the house (provider.wallet) signs and authorizes payout.\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const provider = anchor.getProvider();\n\n  // Fetch vault PDA\n  const acct = await program.account.escrow.fetch(escrowPda);\n  const vault = acct.escrowAccount ?? escrowPda;\n\n  // Build resolve\n  const ix = await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPda,\n      winner: winnerPubkey,\n      house: provider.wallet.publicKey,\n      escrowAccount: vault,\n    })\n    .signers([provider.wallet.payer])  // ensure the house keypair signs\n    .instruction();\n\n  return ix;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}