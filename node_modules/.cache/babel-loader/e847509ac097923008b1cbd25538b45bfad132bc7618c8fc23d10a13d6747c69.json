{"ast":null,"code":"// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) throw new Error(\"Provider not set. Call setProvider(wallet) first.\");\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * 3) Cancel an escrow\n */\nexport async function buildCancelIxn(escrowId, player1Pubkey, player2Pubkey) {\n  const program = getProgram();\n  const escrowPda = typeof escrowId === \"string\" ? new PublicKey(escrowId) : escrowId;\n  const p1 = new PublicKey(player1Pubkey);\n  const p2 = new PublicKey(player2Pubkey);\n\n  // fetch discriminator for `cancel`\n  const disc = idl.instructions.find(ix => ix.name === \"cancel\").discriminator;\n  const data = Buffer.from(disc);\n\n  // accounts exactly in IDL order:\n  const keys = [{\n    pubkey: escrowPda,\n    isSigner: false,\n    isWritable: true\n  },\n  // escrow\n  {\n    pubkey: p1,\n    isSigner: false,\n    isWritable: true\n  },\n  // player1\n  {\n    pubkey: p2,\n    isSigner: false,\n    isWritable: true\n  },\n  // player2\n  {\n    pubkey: escrowPda,\n    isSigner: false,\n    isWritable: true\n  } // escrow_account\n  ];\n  return new TransactionInstruction({\n    programId: PROGRAM_ID,\n    keys,\n    data\n  });\n}\n\n/**\n * 4) Resolve/payout  (if you ever need it on‐chain)\n */\nexport async function buildResolveIxn(escrowId, winnerPubkey) {\n  const program = getProgram();\n  const escrowPda = typeof escrowId === \"string\" ? new PublicKey(escrowId) : escrowId;\n  const winnerKey = typeof winnerPubkey === \"string\" ? new PublicKey(winnerPubkey) : winnerPubkey;\n  const disc = idl.instructions.find(ix => ix.name === \"resolve\").discriminator;\n  const data = Buffer.concat([Buffer.from(disc), Buffer.from(winnerKey.toBytes())]);\n  const keys = [{\n    pubkey: escrowPda,\n    isSigner: false,\n    isWritable: true\n  },\n  // escrow\n  {\n    pubkey: winnerKey,\n    isSigner: false,\n    isWritable: true\n  },\n  // winner\n  {\n    pubkey: program.provider.wallet.publicKey,\n    isSigner: false,\n    isWritable: true\n  },\n  // house\n  {\n    pubkey: escrowPda,\n    isSigner: false,\n    isWritable: true\n  } // escrow_account\n  ];\n  return new TransactionInstruction({\n    programId: PROGRAM_ID,\n    keys,\n    data\n  });\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","TransactionInstruction","idl","PROGRAM_ID","getProvider","getProgram","provider","Error","Program","buildCancelIxn","escrowId","player1Pubkey","player2Pubkey","program","escrowPda","p1","p2","disc","instructions","find","ix","name","discriminator","data","Buffer","from","keys","pubkey","isSigner","isWritable","programId","buildResolveIxn","winnerPubkey","winnerKey","concat","toBytes","wallet","publicKey"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) throw new Error(\"Provider not set. Call setProvider(wallet) first.\");\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * 3) Cancel an escrow\n */\nexport async function buildCancelIxn(escrowId, player1Pubkey, player2Pubkey) {\n  const program = getProgram();\n  const escrowPda = typeof escrowId === \"string\" ? new PublicKey(escrowId) : escrowId;\n  const p1 = new PublicKey(player1Pubkey);\n  const p2 = new PublicKey(player2Pubkey);\n\n  // fetch discriminator for `cancel`\n  const disc = idl.instructions.find(ix => ix.name === \"cancel\").discriminator;\n  const data = Buffer.from(disc);\n\n  // accounts exactly in IDL order:\n  const keys = [\n    { pubkey: escrowPda, isSigner: false, isWritable: true }, // escrow\n    { pubkey: p1,        isSigner: false, isWritable: true }, // player1\n    { pubkey: p2,        isSigner: false, isWritable: true }, // player2\n    { pubkey: escrowPda, isSigner: false, isWritable: true }, // escrow_account\n  ];\n\n  return new TransactionInstruction({\n    programId: PROGRAM_ID,\n    keys,\n    data,\n  });\n}\n\n/**\n * 4) Resolve/payout  (if you ever need it on‐chain)\n */\nexport async function buildResolveIxn(escrowId, winnerPubkey) {\n  const program = getProgram();\n  const escrowPda = typeof escrowId === \"string\" ? new PublicKey(escrowId) : escrowId;\n  const winnerKey = typeof winnerPubkey === \"string\"\n    ? new PublicKey(winnerPubkey)\n    : winnerPubkey;\n\n  const disc = idl.instructions.find(ix => ix.name === \"resolve\").discriminator;\n  const data = Buffer.concat([\n    Buffer.from(disc),\n    Buffer.from(winnerKey.toBytes()),\n  ]);\n\n  const keys = [\n    { pubkey: escrowPda,  isSigner: false, isWritable: true }, // escrow\n    { pubkey: winnerKey,  isSigner: false, isWritable: true }, // winner\n    { pubkey: program.provider.wallet.publicKey, isSigner: false, isWritable: true }, // house\n    { pubkey: escrowPda,  isSigner: false, isWritable: true }, // escrow_account\n  ];\n\n  return new TransactionInstruction({\n    programId: PROGRAM_ID,\n    keys,\n    data,\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}