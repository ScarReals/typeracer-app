{"ast":null,"code":"// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram, Transaction } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Program ID from your IDL\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nfunction getProvider() {\n  const prov = anchor.getProvider();\n  if (!prov) throw new Error(\"Provider not set. Call setProvider in App.jsx first.\");\n  return prov;\n}\nfunction getProgram() {\n  const provider = getProvider();\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\nasync function fetchEscrowVault(escrowPda) {\n  var _ref, _acct$escrowAccount;\n  const program = getProgram();\n  const acct = await program.account.escrow.fetch(escrowPda);\n  console.log(\"⛓️ escrow account data:\", acct);\n\n  // Try the common IDL fields:\n  const vault = (_ref = (_acct$escrowAccount = acct.escrowAccount) !== null && _acct$escrowAccount !== void 0 ? _acct$escrowAccount : acct.escrowVault) !== null && _ref !== void 0 ? _ref : acct.vault;\n  if (vault) return vault;\n  console.warn(\"No vault field found; using escrow PDA as vault\");\n  return escrowPda;\n}\nasync function sendTx(ixs) {\n  const provider = getProvider();\n  const tx = new Transaction().add(...ixs);\n  tx.feePayer = provider.wallet.publicKey;\n  const {\n    blockhash,\n    lastValidBlockHeight\n  } = await provider.connection.getLatestBlockhash(\"confirmed\");\n  tx.recentBlockhash = blockhash;\n\n  // let wallet adapter send + sign\n  let sig = await provider.wallet.sendTransaction(tx, provider.connection);\n  // confirm\n  await provider.connection.confirmTransaction({\n    signature: sig,\n    blockhash,\n    lastValidBlockHeight\n  }, \"confirmed\");\n  return sig;\n}\nexport async function initializeEscrow(wagerLamports) {\n  const program = getProgram();\n  const provider = getProvider();\n  const nonce = Math.floor(Math.random() * 1000000);\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], program.programId);\n\n  // build instructions\n  const ixInit = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: provider.wallet.publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  await sendTx([ixInit, ixDeposit]);\n  return escrowPda;\n}\nexport async function joinAndDeposit(escrowPda) {\n  const program = getProgram();\n  const provider = getProvider();\n  const vault = await fetchEscrowVault(escrowPda);\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: provider.wallet.publicKey,\n    escrowAccount: vault,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  await sendTx([ix]);\n}\nexport async function cancelEscrow(escrowPda, player1Pubkey, player2Pubkey) {\n  const program = getProgram();\n  const provider = getProvider();\n  const vault = await fetchEscrowVault(escrowPda);\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1: player1Pubkey,\n    player2: player2Pubkey,\n    escrowAccount: vault,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  await sendTx([ix]);\n}\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const provider = getProvider();\n  const vault = await fetchEscrowVault(escrowPda);\n  const ix = await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPda,\n    winner: winnerPubkey,\n    house: provider.wallet.publicKey,\n    escrowAccount: vault,\n    authority: provider.wallet.publicKey\n  }).instruction();\n  await sendTx([ix]);\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","Transaction","idl","PROGRAM_ID","metadata","address","getProvider","prov","Error","getProgram","provider","Program","fetchEscrowVault","escrowPda","_ref","_acct$escrowAccount","program","acct","account","escrow","fetch","console","log","vault","escrowAccount","escrowVault","warn","sendTx","ixs","tx","add","feePayer","wallet","publicKey","blockhash","lastValidBlockHeight","connection","getLatestBlockhash","recentBlockhash","sig","sendTransaction","confirmTransaction","signature","initializeEscrow","wagerLamports","nonce","Math","floor","random","findProgramAddress","Buffer","from","toBuffer","BN","toArrayLike","programId","ixInit","methods","initialize","accounts","player1","authority","systemProgram","instruction","ixDeposit","deposit","payer","joinAndDeposit","ix","player2","cancelEscrow","player1Pubkey","player2Pubkey","cancel","resolveEscrow","winnerPubkey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram, Transaction } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\n// Program ID from your IDL\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\nfunction getProvider() {\n  const prov = anchor.getProvider();\n  if (!prov) throw new Error(\"Provider not set. Call setProvider in App.jsx first.\");\n  return prov;\n}\n\nfunction getProgram() {\n  const provider = getProvider();\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\nasync function fetchEscrowVault(escrowPda) {\n  const program = getProgram();\n  const acct = await program.account.escrow.fetch(escrowPda);\n  console.log(\"⛓️ escrow account data:\", acct);\n\n  // Try the common IDL fields:\n  const vault = acct.escrowAccount ?? acct.escrowVault ?? acct.vault;\n  if (vault) return vault;\n\n  console.warn(\"No vault field found; using escrow PDA as vault\");\n  return escrowPda;\n}\n\nasync function sendTx(ixs) {\n  const provider = getProvider();\n  const tx = new Transaction().add(...ixs);\n  tx.feePayer = provider.wallet.publicKey;\n\n  const { blockhash, lastValidBlockHeight } =\n    await provider.connection.getLatestBlockhash(\"confirmed\");\n  tx.recentBlockhash = blockhash;\n\n  // let wallet adapter send + sign\n  let sig = await provider.wallet.sendTransaction(tx, provider.connection);\n  // confirm\n  await provider.connection.confirmTransaction(\n    { signature: sig, blockhash, lastValidBlockHeight },\n    \"confirmed\"\n  );\n  return sig;\n}\n\nexport async function initializeEscrow(wagerLamports) {\n  const program = getProgram();\n  const provider = getProvider();\n\n  const nonce = Math.floor(Math.random() * 1_000_000);\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      provider.wallet.publicKey.toBuffer(),\n      new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  // build instructions\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,\n      player1: provider.wallet.publicKey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: provider.wallet.publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  await sendTx([ixInit, ixDeposit]);\n  return escrowPda;\n}\n\nexport async function joinAndDeposit(escrowPda) {\n  const program = getProgram();\n  const provider = getProvider();\n  const vault = await fetchEscrowVault(escrowPda);\n\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: provider.wallet.publicKey,\n      escrowAccount: vault,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  await sendTx([ix]);\n}\n\nexport async function cancelEscrow(escrowPda, player1Pubkey, player2Pubkey) {\n  const program = getProgram();\n  const provider = getProvider();\n  const vault = await fetchEscrowVault(escrowPda);\n\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1: player1Pubkey,\n      player2: player2Pubkey,\n      escrowAccount: vault,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n\n  await sendTx([ix]);\n}\n\nexport async function resolveEscrow(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const provider = getProvider();\n  const vault = await fetchEscrowVault(escrowPda);\n\n  const ix = await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPda,\n      winner: winnerPubkey,\n      house: provider.wallet.publicKey,\n      escrowAccount: vault,\n      authority: provider.wallet.publicKey,\n    })\n    .instruction();\n\n  await sendTx([ix]);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}