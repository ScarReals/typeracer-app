{"ast":null,"code":"import * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram, Transaction } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\n\n// Use the IDL's address field for your program ID\nconst PROGRAM_ID = new PublicKey(idl.address);\n\n/**\n * Standard initialize: waits for full commit confirmation\n * @param {number} wagerLamports\n * @returns {Promise<PublicKey>} PDA of escrow\n */\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const nonce = Math.floor(Math.random() * 1e6);\n  const [escrowPDA] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], program.programId);\n  await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPDA,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).rpc({\n    skipPreflight: false,\n    preflightCommitment: \"confirmed\"\n  });\n  return escrowPDA;\n}\n\n/**\n * Optimistic initialize: returns immediately after wallet sign\n * @param {number} wagerLamports\n * @returns {Promise<PublicKey>} PDA of escrow\n */\nexport async function initializeEscrowOptimistic(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const nonce = Math.floor(Math.random() * 1e6);\n  const [escrowPDA] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), provider.wallet.publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], program.programId);\n\n  // Build the transaction\n  const tx = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPDA,\n    player1: provider.wallet.publicKey,\n    authority: provider.wallet.publicKey,\n    systemProgram: SystemProgram.programId\n  }).transaction();\n\n  // Let the user sign & send without waiting on Anchor's subscription\n  const signedTx = await provider.wallet.signTransaction(tx);\n  await provider.sendAndConfirm(signedTx, {\n    skipPreflight: true,\n    preflightCommitment: \"processed\",\n    commitment: \"processed\"\n  });\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one go\n * @param {PublicKey} escrowPDA\n */\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const account = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPDA,\n    player2: provider.wallet.publicKey,\n    escrowAccount: account.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).rpc();\n}\n\n/**\n * Deposit to an existing escrow\n * @param {PublicKey} escrowPDA\n */\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const account = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.deposit().accounts({\n    escrow: escrowPDA,\n    payer: provider.wallet.publicKey,\n    escrowAccount: account.escrowAccount,\n    systemProgram: SystemProgram.programId\n  }).rpc();\n}\n\n/**\n * Cancel an escrow\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} player1Pubkey\n * @param {PublicKey} player2Pubkey\n */\nexport async function cancelEscrow(escrowPDA, player1Pubkey, player2Pubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const account = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.cancel().accounts({\n    escrow: escrowPDA,\n    player1: player1Pubkey,\n    player2: player2Pubkey,\n    escrowAccount: account.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).rpc();\n}\n\n/**\n * Resolve escrow to pay out winner\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} winnerPubkey\n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n  const account = await program.account.escrow.fetch(escrowPDA);\n  await program.methods.resolve(winnerPubkey).accounts({\n    escrow: escrowPDA,\n    winner: winnerPubkey,\n    house: provider.wallet.publicKey,\n    escrowAccount: account.escrowAccount,\n    authority: provider.wallet.publicKey\n  }).rpc();\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","Transaction","idl","getProvider","PROGRAM_ID","address","initializeEscrow","wagerLamports","provider","program","Program","nonce","Math","floor","random","escrowPDA","findProgramAddress","Buffer","from","wallet","publicKey","toBuffer","BN","toArrayLike","programId","methods","initialize","accounts","escrow","player1","authority","systemProgram","rpc","skipPreflight","preflightCommitment","initializeEscrowOptimistic","tx","transaction","signedTx","signTransaction","sendAndConfirm","commitment","joinAndDeposit","account","fetch","player2","escrowAccount","depositToEscrow","deposit","payer","cancelEscrow","player1Pubkey","player2Pubkey","cancel","resolveEscrow","winnerPubkey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram, Transaction } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { getProvider } from \"./solana\";\n\n// Use the IDL's address field for your program ID\nconst PROGRAM_ID = new PublicKey(idl.address);\n\n/**\n * Standard initialize: waits for full commit confirmation\n * @param {number} wagerLamports\n * @returns {Promise<PublicKey>} PDA of escrow\n */\nexport async function initializeEscrow(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const nonce = Math.floor(Math.random() * 1e6);\n  const [escrowPDA] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      provider.wallet.publicKey.toBuffer(),\n      new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPDA,\n      player1: provider.wallet.publicKey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc({\n      skipPreflight: false,\n      preflightCommitment: \"confirmed\",\n    });\n\n  return escrowPDA;\n}\n\n/**\n * Optimistic initialize: returns immediately after wallet sign\n * @param {number} wagerLamports\n * @returns {Promise<PublicKey>} PDA of escrow\n */\nexport async function initializeEscrowOptimistic(wagerLamports) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const nonce = Math.floor(Math.random() * 1e6);\n  const [escrowPDA] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      provider.wallet.publicKey.toBuffer(),\n      new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8),\n    ],\n    program.programId\n  );\n\n  // Build the transaction\n  const tx = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPDA,\n      player1: provider.wallet.publicKey,\n      authority: provider.wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n\n  // Let the user sign & send without waiting on Anchor's subscription\n  const signedTx = await provider.wallet.signTransaction(tx);\n  await provider.sendAndConfirm(signedTx, {\n    skipPreflight: true,\n    preflightCommitment: \"processed\",\n    commitment: \"processed\",\n  });\n\n  return escrowPDA;\n}\n\n/**\n * Player 2 joins and deposits in one go\n * @param {PublicKey} escrowPDA\n */\nexport async function joinAndDeposit(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const account = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPDA,\n      player2: provider.wallet.publicKey,\n      escrowAccount: account.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc();\n}\n\n/**\n * Deposit to an existing escrow\n * @param {PublicKey} escrowPDA\n */\nexport async function depositToEscrow(escrowPDA) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const account = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPDA,\n      payer: provider.wallet.publicKey,\n      escrowAccount: account.escrowAccount,\n      systemProgram: SystemProgram.programId,\n    })\n    .rpc();\n}\n\n/**\n * Cancel an escrow\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} player1Pubkey\n * @param {PublicKey} player2Pubkey\n */\nexport async function cancelEscrow(\n  escrowPDA,\n  player1Pubkey,\n  player2Pubkey\n) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const account = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPDA,\n      player1: player1Pubkey,\n      player2: player2Pubkey,\n      escrowAccount: account.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .rpc();\n}\n\n/**\n * Resolve escrow to pay out winner\n * @param {PublicKey} escrowPDA\n * @param {PublicKey} winnerPubkey\n */\nexport async function resolveEscrow(escrowPDA, winnerPubkey) {\n  const provider = getProvider();\n  const program = new anchor.Program(idl, PROGRAM_ID, provider);\n\n  const account = await program.account.escrow.fetch(escrowPDA);\n\n  await program.methods\n    .resolve(winnerPubkey)\n    .accounts({\n      escrow: escrowPDA,\n      winner: winnerPubkey,\n      house: provider.wallet.publicKey,\n      escrowAccount: account.escrowAccount,\n      authority: provider.wallet.publicKey,\n    })\n    .rpc();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}