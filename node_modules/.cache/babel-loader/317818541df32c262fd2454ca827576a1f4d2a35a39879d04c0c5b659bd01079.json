{"ast":null,"code":"// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily grab your Anchor Program; must have called setProvider(wallet) first */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\"Provider not set: call setProvider(wallet) in App.jsx before using escrow.js\");\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * 1) Initialize + deposit\n */\nexport async function buildInitializeAndDepositIxns(lamports, initializerPubkey, nonce) {\n  const program = getProgram();\n\n  // pack nonce into 8‑byte LE buffer\n  const nonceBuf = Buffer.from(new anchor.BN(nonce).toArray(\"le\", 8));\n\n  // derive PDA\n  const [escrowPda] = await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), initializerPubkey.toBuffer(), nonceBuf], PROGRAM_ID);\n\n  // initialize (wager, nonce)\n  const ixInit = await program.methods.initialize(new anchor.BN(lamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: initializerPubkey,\n    authority: initializerPubkey,\n    system_program: SystemProgram.programId // snake_case\n  }).instruction();\n\n  // deposit SOL\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports\n  });\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * 2) Join & deposit in one go\n */\nexport async function buildJoinAndDepositIxn(escrowPda, wager) {\n  const program = getProgram();\n  return program.methods.joinAndDeposit(new anchor.BN(wager)).accounts({\n    escrow: escrowPda,\n    player2: program.provider.wallet.publicKey,\n    escrow_account: escrowPda,\n    // snake_case\n    system_program: SystemProgram.programId // snake_case\n  }).instruction();\n}\n\n/**\n * 3) Cancel an escrow (with debug logs)\n */\nexport async function buildCancelIxn(escrowPda, initializerPubkey, accepterPubkey) {\n  const program = getProgram();\n\n  // Debug: inspect the IDL for \"cancel\"\n  console.log(\"IDL cancel accounts:\", program.idl.instructions.find(ix => ix.name === \"cancel\").accounts);\n\n  // Build the actual TransactionInstruction\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    // #[account(mut)]\n    player1: initializerPubkey,\n    // #[account(mut)]\n    player2: accepterPubkey,\n    // #[account(mut)]\n    escrow_account: escrowPda,\n    // #[account(mut, address = escrow.key())]\n    authority: initializerPubkey // #[account(mut)] signer\n  }).instruction();\n\n  // Debug: inspect what metas Anchor generated (use .writable/.signer)\n  console.log(\"Built Cancel ix metas:\", ix.keys.map(k => ({\n    pubkey: k.pubkey.toBase58(),\n    writable: k.writable,\n    signer: k.signer\n  })));\n  return ix;\n}\n\n/**\n * 4) Resolve/payout\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const winnerKey = typeof winnerPubkey === \"string\" ? new PublicKey(winnerPubkey) : winnerPubkey;\n  return program.methods.resolve(winnerKey).accounts({\n    escrow: escrowPda,\n    winner: winnerKey,\n    house: program.provider.wallet.publicKey,\n    escrow_account: escrowPda // snake_case\n  }).instruction();\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","getProvider","getProgram","provider","Error","Program","buildInitializeAndDepositIxns","lamports","initializerPubkey","nonce","program","nonceBuf","Buffer","from","BN","toArray","escrowPda","findProgramAddress","toBuffer","ixInit","methods","initialize","accounts","escrow","player1","authority","system_program","programId","instruction","ixDeposit","transfer","fromPubkey","toPubkey","buildJoinAndDepositIxn","wager","joinAndDeposit","player2","wallet","publicKey","escrow_account","buildCancelIxn","accepterPubkey","console","log","instructions","find","ix","name","cancel","keys","map","k","pubkey","toBase58","writable","signer","buildResolveIxn","winnerPubkey","winnerKey","resolve","winner","house"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["// frontend/src/escrow.js\n\nimport * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nimport { PROGRAM_ID, getProvider } from \"./solana\";\n\n/** Lazily grab your Anchor Program; must have called setProvider(wallet) first */\nfunction getProgram() {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\n      \"Provider not set: call setProvider(wallet) in App.jsx before using escrow.js\"\n    );\n  }\n  return new anchor.Program(idl, PROGRAM_ID, provider);\n}\n\n/**\n * 1) Initialize + deposit\n */\nexport async function buildInitializeAndDepositIxns(\n  lamports,\n  initializerPubkey,\n  nonce\n) {\n  const program = getProgram();\n\n  // pack nonce into 8‑byte LE buffer\n  const nonceBuf = Buffer.from(new anchor.BN(nonce).toArray(\"le\", 8));\n\n  // derive PDA\n  const [escrowPda] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"escrow\"),\n      initializerPubkey.toBuffer(),\n      nonceBuf,\n    ],\n    PROGRAM_ID\n  );\n\n  // initialize (wager, nonce)\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(lamports), new anchor.BN(nonce))\n    .accounts({\n      escrow:         escrowPda,\n      player1:        initializerPubkey,\n      authority:      initializerPubkey,\n      system_program: SystemProgram.programId,  // snake_case\n    })\n    .instruction();\n\n  // deposit SOL\n  const ixDeposit = SystemProgram.transfer({\n    fromPubkey: initializerPubkey,\n    toPubkey: escrowPda,\n    lamports,\n  });\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * 2) Join & deposit in one go\n */\nexport async function buildJoinAndDepositIxn(escrowPda, wager) {\n  const program = getProgram();\n  return program.methods\n    .joinAndDeposit(new anchor.BN(wager))\n    .accounts({\n      escrow:         escrowPda,\n      player2:        program.provider.wallet.publicKey,\n      escrow_account: escrowPda,                // snake_case\n      system_program: SystemProgram.programId,  // snake_case\n    })\n    .instruction();\n}\n\n/**\n * 3) Cancel an escrow (with debug logs)\n */\nexport async function buildCancelIxn(\n  escrowPda,\n  initializerPubkey,\n  accepterPubkey\n) {\n  const program = getProgram();\n\n  // Debug: inspect the IDL for \"cancel\"\n  console.log(\n    \"IDL cancel accounts:\",\n    program.idl.instructions.find((ix) => ix.name === \"cancel\").accounts\n  );\n\n  // Build the actual TransactionInstruction\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow:          escrowPda,        // #[account(mut)]\n      player1:         initializerPubkey, // #[account(mut)]\n      player2:         accepterPubkey,    // #[account(mut)]\n      escrow_account:  escrowPda,        // #[account(mut, address = escrow.key())]\n      authority:       initializerPubkey, // #[account(mut)] signer\n    })\n    .instruction();\n\n  // Debug: inspect what metas Anchor generated (use .writable/.signer)\n  console.log(\n    \"Built Cancel ix metas:\",\n    ix.keys.map((k) => ({\n      pubkey:   k.pubkey.toBase58(),\n      writable: k.writable,\n      signer:   k.signer,\n    }))\n  );\n\n  return ix;\n}\n\n/**\n * 4) Resolve/payout\n */\nexport async function buildResolveIxn(escrowPda, winnerPubkey) {\n  const program = getProgram();\n  const winnerKey =\n    typeof winnerPubkey === \"string\"\n      ? new PublicKey(winnerPubkey)\n      : winnerPubkey;\n\n  return program.methods\n    .resolve(winnerKey)\n    .accounts({\n      escrow:          escrowPda,\n      winner:          winnerKey,\n      house:           program.provider.wallet.publicKey,\n      escrow_account:  escrowPda,        // snake_case\n    })\n    .instruction();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}