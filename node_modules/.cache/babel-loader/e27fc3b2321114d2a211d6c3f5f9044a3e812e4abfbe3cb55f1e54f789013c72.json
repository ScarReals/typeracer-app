{"ast":null,"code":"import * as anchor from \"@coral-xyz/anchor\";\nimport { Keypair, Connection, PublicKey } from \"@solana/web3.js\";\nimport NodeWallet from \"@coral-xyz/anchor/dist/cjs/nodewallet\"; // import NodeWallet from internal path\nimport idl from \"./idl/typeracer_escrow.json\";\nconst RPC_URL = process.env.REACT_APP_SOLANA_RPC;\nconst HOUSE_PATH = process.env.REACT_APP_HOUSE_KEYPAIR_PATH;\nconst secret = Uint8Array.from(require(HOUSE_PATH));\nconst houseKeypair = Keypair.fromSecretKey(secret);\nconst wallet = new NodeWallet(houseKeypair);\nconst connection = new Connection(RPC_URL, \"confirmed\");\nconst provider = new anchor.AnchorProvider(connection, wallet, {\n  preflightCommitment: \"confirmed\",\n  commitment: \"confirmed\"\n});\nanchor.setProvider(provider);\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nconst program = new anchor.Program(idl, PROGRAM_ID, provider);\nexport { connection, provider, program, PROGRAM_ID };","map":{"version":3,"names":["anchor","Keypair","Connection","PublicKey","NodeWallet","idl","RPC_URL","process","env","REACT_APP_SOLANA_RPC","HOUSE_PATH","REACT_APP_HOUSE_KEYPAIR_PATH","secret","Uint8Array","from","require","houseKeypair","fromSecretKey","wallet","connection","provider","AnchorProvider","preflightCommitment","commitment","setProvider","PROGRAM_ID","metadata","address","program","Program"],"sources":["/home/kokoi/sol-wager-app/frontend/src/solana.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { Keypair, Connection, PublicKey } from \"@solana/web3.js\";\nimport NodeWallet from \"@coral-xyz/anchor/dist/cjs/nodewallet\"; // import NodeWallet from internal path\nimport idl from \"./idl/typeracer_escrow.json\";\n\nconst RPC_URL = process.env.REACT_APP_SOLANA_RPC;\nconst HOUSE_PATH = process.env.REACT_APP_HOUSE_KEYPAIR_PATH;\nconst secret = Uint8Array.from(require(HOUSE_PATH));\nconst houseKeypair = Keypair.fromSecretKey(secret);\nconst wallet = new NodeWallet(houseKeypair);\n\nconst connection = new Connection(RPC_URL, \"confirmed\");\nconst provider = new anchor.AnchorProvider(\n  connection,\n  wallet,\n  { preflightCommitment: \"confirmed\", commitment: \"confirmed\" }\n);\nanchor.setProvider(provider);\n\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\nconst program = new anchor.Program(idl, PROGRAM_ID, provider);\n\nexport { connection, provider, program, PROGRAM_ID };\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,OAAO,EAAEC,UAAU,EAAEC,SAAS,QAAQ,iBAAiB;AAChE,OAAOC,UAAU,MAAM,uCAAuC,CAAC,CAAC;AAChE,OAAOC,GAAG,MAAM,6BAA6B;AAE7C,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB;AAChD,MAAMC,UAAU,GAAGH,OAAO,CAACC,GAAG,CAACG,4BAA4B;AAC3D,MAAMC,MAAM,GAAGC,UAAU,CAACC,IAAI,CAACC,OAAO,CAACL,UAAU,CAAC,CAAC;AACnD,MAAMM,YAAY,GAAGf,OAAO,CAACgB,aAAa,CAACL,MAAM,CAAC;AAClD,MAAMM,MAAM,GAAG,IAAId,UAAU,CAACY,YAAY,CAAC;AAE3C,MAAMG,UAAU,GAAG,IAAIjB,UAAU,CAACI,OAAO,EAAE,WAAW,CAAC;AACvD,MAAMc,QAAQ,GAAG,IAAIpB,MAAM,CAACqB,cAAc,CACxCF,UAAU,EACVD,MAAM,EACN;EAAEI,mBAAmB,EAAE,WAAW;EAAEC,UAAU,EAAE;AAAY,CAC9D,CAAC;AACDvB,MAAM,CAACwB,WAAW,CAACJ,QAAQ,CAAC;AAE5B,MAAMK,UAAU,GAAG,IAAItB,SAAS,CAACE,GAAG,CAACqB,QAAQ,CAACC,OAAO,CAAC;AACtD,MAAMC,OAAO,GAAG,IAAI5B,MAAM,CAAC6B,OAAO,CAACxB,GAAG,EAAEoB,UAAU,EAAEL,QAAQ,CAAC;AAE7D,SAASD,UAAU,EAAEC,QAAQ,EAAEQ,OAAO,EAAEH,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}