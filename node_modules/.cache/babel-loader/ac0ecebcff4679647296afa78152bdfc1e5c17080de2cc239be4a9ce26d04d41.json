{"ast":null,"code":"import * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\n/**\n * Build initialize and deposit instructions.\n * @param {anchor.Program} program - Anchor program instance.\n * @param {number} wagerLamports - Amount in lamports.\n * @param {PublicKey} publicKey - Player 1's public key.\n * @param {number} nonce - Unique nonce for PDA.\n */\nexport async function buildInitializeAndDepositIxns(program, wagerLamports, publicKey, nonce) {\n  const escrowPda = (await PublicKey.findProgramAddress([Buffer.from(\"escrow\"), publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)], PROGRAM_ID))[0];\n  const ixInit = await program.methods.initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce)).accounts({\n    escrow: escrowPda,\n    player1: publicKey,\n    authority: publicKey,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  const ixDeposit = await program.methods.deposit().accounts({\n    escrow: escrowPda,\n    payer: publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return {\n    ixInit,\n    ixDeposit,\n    escrowPda\n  };\n}\n\n/**\n * Build join and deposit instruction.\n * @param {anchor.Program} program - Anchor program instance.\n * @param {PublicKey} publicKey - Player 2's public key.\n * @param {PublicKey} escrowPda - Escrow PDA public key.\n */\nexport async function buildJoinAndDepositIxn(program, publicKey, escrowPda) {\n  const ix = await program.methods.joinAndDeposit().accounts({\n    escrow: escrowPda,\n    player2: publicKey,\n    escrowAccount: escrowPda,\n    systemProgram: SystemProgram.programId\n  }).instruction();\n  return ix;\n}\n\n/**\n * Build cancel instruction.\n * @param {anchor.Program} program - Anchor program instance.\n * @param {PublicKey} escrowPda - Escrow PDA.\n * @param {PublicKey} player1 - Player1's public key.\n * @param {PublicKey} player2 - Player2's public key.\n * @param {PublicKey} authority - Authority's public key (signer).\n */\nexport async function buildCancelIxn(program, escrowPda, player1, player2, authority) {\n  const ix = await program.methods.cancel().accounts({\n    escrow: escrowPda,\n    player1,\n    player2,\n    escrowAccount: escrowPda,\n    authority\n  }).instruction();\n  return ix;\n}","map":{"version":3,"names":["anchor","PublicKey","SystemProgram","idl","PROGRAM_ID","metadata","address","buildInitializeAndDepositIxns","program","wagerLamports","publicKey","nonce","escrowPda","findProgramAddress","Buffer","from","toBuffer","BN","toArrayLike","ixInit","methods","initialize","accounts","escrow","player1","authority","systemProgram","programId","instruction","ixDeposit","deposit","payer","escrowAccount","buildJoinAndDepositIxn","ix","joinAndDeposit","player2","buildCancelIxn","cancel"],"sources":["/home/kokoi/sol-wager-app/frontend/src/escrow.js"],"sourcesContent":["import * as anchor from \"@coral-xyz/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport idl from \"./idl/typeracer_escrow.json\";\n\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\n/**\n * Build initialize and deposit instructions.\n * @param {anchor.Program} program - Anchor program instance.\n * @param {number} wagerLamports - Amount in lamports.\n * @param {PublicKey} publicKey - Player 1's public key.\n * @param {number} nonce - Unique nonce for PDA.\n */\nexport async function buildInitializeAndDepositIxns(program, wagerLamports, publicKey, nonce) {\n  const escrowPda = (\n    await PublicKey.findProgramAddress(\n      [Buffer.from(\"escrow\"), publicKey.toBuffer(), new anchor.BN(nonce).toArrayLike(Buffer, \"le\", 8)],\n      PROGRAM_ID\n    )\n  )[0];\n\n  const ixInit = await program.methods\n    .initialize(new anchor.BN(wagerLamports), new anchor.BN(nonce))\n    .accounts({\n      escrow: escrowPda,\n      player1: publicKey,\n      authority: publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  const ixDeposit = await program.methods\n    .deposit()\n    .accounts({\n      escrow: escrowPda,\n      payer: publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n\n  return { ixInit, ixDeposit, escrowPda };\n}\n\n/**\n * Build join and deposit instruction.\n * @param {anchor.Program} program - Anchor program instance.\n * @param {PublicKey} publicKey - Player 2's public key.\n * @param {PublicKey} escrowPda - Escrow PDA public key.\n */\nexport async function buildJoinAndDepositIxn(program, publicKey, escrowPda) {\n  const ix = await program.methods\n    .joinAndDeposit()\n    .accounts({\n      escrow: escrowPda,\n      player2: publicKey,\n      escrowAccount: escrowPda,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  return ix;\n}\n\n/**\n * Build cancel instruction.\n * @param {anchor.Program} program - Anchor program instance.\n * @param {PublicKey} escrowPda - Escrow PDA.\n * @param {PublicKey} player1 - Player1's public key.\n * @param {PublicKey} player2 - Player2's public key.\n * @param {PublicKey} authority - Authority's public key (signer).\n */\nexport async function buildCancelIxn(program, escrowPda, player1, player2, authority) {\n  const ix = await program.methods\n    .cancel()\n    .accounts({\n      escrow: escrowPda,\n      player1,\n      player2,\n      escrowAccount: escrowPda,\n      authority,\n    })\n    .instruction();\n  return ix;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,mBAAmB;AAC3C,SAASC,SAAS,EAAEC,aAAa,QAAQ,iBAAiB;AAC1D,OAAOC,GAAG,MAAM,6BAA6B;AAE7C,MAAMC,UAAU,GAAG,IAAIH,SAAS,CAACE,GAAG,CAACE,QAAQ,CAACC,OAAO,CAAC;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,6BAA6BA,CAACC,OAAO,EAAEC,aAAa,EAAEC,SAAS,EAAEC,KAAK,EAAE;EAC5F,MAAMC,SAAS,GAAG,CAChB,MAAMX,SAAS,CAACY,kBAAkB,CAChC,CAACC,MAAM,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAEL,SAAS,CAACM,QAAQ,CAAC,CAAC,EAAE,IAAIhB,MAAM,CAACiB,EAAE,CAACN,KAAK,CAAC,CAACO,WAAW,CAACJ,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAChGV,UACF,CAAC,EACD,CAAC,CAAC;EAEJ,MAAMe,MAAM,GAAG,MAAMX,OAAO,CAACY,OAAO,CACjCC,UAAU,CAAC,IAAIrB,MAAM,CAACiB,EAAE,CAACR,aAAa,CAAC,EAAE,IAAIT,MAAM,CAACiB,EAAE,CAACN,KAAK,CAAC,CAAC,CAC9DW,QAAQ,CAAC;IACRC,MAAM,EAAEX,SAAS;IACjBY,OAAO,EAAEd,SAAS;IAClBe,SAAS,EAAEf,SAAS;IACpBgB,aAAa,EAAExB,aAAa,CAACyB;EAC/B,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;EAEhB,MAAMC,SAAS,GAAG,MAAMrB,OAAO,CAACY,OAAO,CACpCU,OAAO,CAAC,CAAC,CACTR,QAAQ,CAAC;IACRC,MAAM,EAAEX,SAAS;IACjBmB,KAAK,EAAErB,SAAS;IAChBsB,aAAa,EAAEpB,SAAS;IACxBc,aAAa,EAAExB,aAAa,CAACyB;EAC/B,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;EAEhB,OAAO;IAAET,MAAM;IAAEU,SAAS;IAAEjB;EAAU,CAAC;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeqB,sBAAsBA,CAACzB,OAAO,EAAEE,SAAS,EAAEE,SAAS,EAAE;EAC1E,MAAMsB,EAAE,GAAG,MAAM1B,OAAO,CAACY,OAAO,CAC7Be,cAAc,CAAC,CAAC,CAChBb,QAAQ,CAAC;IACRC,MAAM,EAAEX,SAAS;IACjBwB,OAAO,EAAE1B,SAAS;IAClBsB,aAAa,EAAEpB,SAAS;IACxBc,aAAa,EAAExB,aAAa,CAACyB;EAC/B,CAAC,CAAC,CACDC,WAAW,CAAC,CAAC;EAChB,OAAOM,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeG,cAAcA,CAAC7B,OAAO,EAAEI,SAAS,EAAEY,OAAO,EAAEY,OAAO,EAAEX,SAAS,EAAE;EACpF,MAAMS,EAAE,GAAG,MAAM1B,OAAO,CAACY,OAAO,CAC7BkB,MAAM,CAAC,CAAC,CACRhB,QAAQ,CAAC;IACRC,MAAM,EAAEX,SAAS;IACjBY,OAAO;IACPY,OAAO;IACPJ,aAAa,EAAEpB,SAAS;IACxBa;EACF,CAAC,CAAC,CACDG,WAAW,CAAC,CAAC;EAChB,OAAOM,EAAE;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}